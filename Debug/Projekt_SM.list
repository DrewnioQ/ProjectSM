
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a84  08007a84  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a8c  08007a8c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200000a8  08007b38  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08007b38  00020300  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a3a  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7b  00000000  00000000  00037b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002998c  00000000  00000000  0003c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c23  00000000  00000000  000662ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101799  00000000  00000000  0007bf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0017d6a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a34  00000000  00000000  0017d770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080079f4 	.word	0x080079f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	080079f4 	.word	0x080079f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	4613      	mov	r3, r2
 80005f8:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 fa98 	bl	8000b30 <null_ptr_check>
 8000600:	4603      	mov	r3, r0
 8000602:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11c      	bne.n	8000646 <bmp280_get_regs+0x5e>
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d019      	beq.n	8000646 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000620:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685c      	ldr	r4, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7858      	ldrb	r0, [r3, #1]
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	b29b      	uxth	r3, r3
 800062e:	7bf9      	ldrb	r1, [r7, #15]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	47a0      	blx	r4
 8000634:	4603      	mov	r3, r0
 8000636:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d004      	beq.n	800064a <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000640:	23fc      	movs	r3, #252	; 0xfc
 8000642:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000644:	e001      	b.n	800064a <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000646:	23ff      	movs	r3, #255	; 0xff
 8000648:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800064a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800064e:	4618      	mov	r0, r3
 8000650:	371c      	adds	r7, #28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}

08000656 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000656:	b590      	push	{r4, r7, lr}
 8000658:	b089      	sub	sp, #36	; 0x24
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4613      	mov	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d901      	bls.n	8000670 <bmp280_set_regs+0x1a>
    {
        len = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	f000 fa5d 	bl	8000b30 <null_ptr_check>
 8000676:	4603      	mov	r3, r0
 8000678:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800067a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d14d      	bne.n	800071e <bmp280_set_regs+0xc8>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d04a      	beq.n	800071e <bmp280_set_regs+0xc8>
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d047      	beq.n	800071e <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d041      	beq.n	8000718 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d114      	bne.n	80006cc <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	76fb      	strb	r3, [r7, #27]
 80006a6:	e00d      	b.n	80006c4 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80006a8:	7efb      	ldrb	r3, [r7, #27]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	7efb      	ldrb	r3, [r7, #27]
 80006b2:	68f9      	ldr	r1, [r7, #12]
 80006b4:	440b      	add	r3, r1
 80006b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006be:	7efb      	ldrb	r3, [r7, #27]
 80006c0:	3301      	adds	r3, #1
 80006c2:	76fb      	strb	r3, [r7, #27]
 80006c4:	7efa      	ldrb	r2, [r7, #27]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3ed      	bcc.n	80006a8 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d90d      	bls.n	80006ee <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f107 0110 	add.w	r1, r7, #16
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f000 fa48 	bl	8000b70 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	3b01      	subs	r3, #1
 80006ea:	83bb      	strh	r3, [r7, #28]
 80006ec:	e001      	b.n	80006f2 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689c      	ldr	r4, [r3, #8]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	7858      	ldrb	r0, [r3, #1]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	7819      	ldrb	r1, [r3, #0]
 80006fe:	8bbb      	ldrh	r3, [r7, #28]
 8000700:	f107 0210 	add.w	r2, r7, #16
 8000704:	47a0      	blx	r4
 8000706:	4603      	mov	r3, r0
 8000708:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 800070a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000712:	23fc      	movs	r3, #252	; 0xfc
 8000714:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000716:	e005      	b.n	8000724 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000718:	23fd      	movs	r3, #253	; 0xfd
 800071a:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800071c:	e002      	b.n	8000724 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800071e:	23ff      	movs	r3, #255	; 0xff
 8000720:	77fb      	strb	r3, [r7, #31]
 8000722:	e000      	b.n	8000726 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000724:	bf00      	nop
    }

    return rslt;
 8000726:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd90      	pop	{r4, r7, pc}

08000732 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800073a:	23e0      	movs	r3, #224	; 0xe0
 800073c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800073e:	23b6      	movs	r3, #182	; 0xb6
 8000740:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f9f4 	bl	8000b30 <null_ptr_check>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10d      	bne.n	8000770 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000754:	f107 010d 	add.w	r1, r7, #13
 8000758:	f107 000e 	add.w	r0, r7, #14
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2201      	movs	r2, #1
 8000760:	f7ff ff79 	bl	8000656 <bmp280_set_regs>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	2002      	movs	r0, #2
 800076e:	4798      	blx	r3
    }

    return rslt;
 8000770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000784:	2305      	movs	r3, #5
 8000786:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f9d1 	bl	8000b30 <null_ptr_check>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d150      	bne.n	800083c <bmp280_init+0xc0>
    {
        while (try_count)
 800079a:	e02d      	b.n	80007f8 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	20d0      	movs	r0, #208	; 0xd0
 80007a4:	f7ff ff20 	bl	80005e8 <bmp280_get_regs>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11a      	bne.n	80007ea <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80007b8:	2b56      	cmp	r3, #86	; 0x56
 80007ba:	d007      	beq.n	80007cc <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b57      	cmp	r3, #87	; 0x57
 80007c2:	d003      	beq.n	80007cc <bmp280_init+0x50>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b58      	cmp	r3, #88	; 0x58
 80007ca:	d10e      	bne.n	80007ea <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffb0 	bl	8000732 <bmp280_soft_reset>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d110      	bne.n	8000800 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f9f2 	bl	8000bc8 <get_calib_param>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007e8:	e00a      	b.n	8000800 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	200a      	movs	r0, #10
 80007f0:	4798      	blx	r3
            --try_count;
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ce      	bne.n	800079c <bmp280_init+0x20>
 80007fe:	e000      	b.n	8000802 <bmp280_init+0x86>
                break;
 8000800:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000808:	23fe      	movs	r3, #254	; 0xfe
 800080a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 800080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d113      	bne.n	800083c <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000852:	2300      	movs	r3, #0
 8000854:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000856:	6838      	ldr	r0, [r7, #0]
 8000858:	f000 f96a 	bl	8000b30 <null_ptr_check>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d137      	bne.n	80008d8 <bmp280_get_config+0x90>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d034      	beq.n	80008d8 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800086e:	f107 010c 	add.w	r1, r7, #12
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	2202      	movs	r2, #2
 8000876:	20f4      	movs	r0, #244	; 0xf4
 8000878:	f7ff feb6 	bl	80005e8 <bmp280_get_regs>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d129      	bne.n	80008dc <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000888:	7b3b      	ldrb	r3, [r7, #12]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	109b      	asrs	r3, r3, #2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	b2da      	uxtb	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80008a2:	7b7b      	ldrb	r3, [r7, #13]
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	109b      	asrs	r3, r3, #2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	332c      	adds	r3, #44	; 0x2c
 80008ce:	6810      	ldr	r0, [r2, #0]
 80008d0:	6018      	str	r0, [r3, #0]
 80008d2:	7912      	ldrb	r2, [r2, #4]
 80008d4:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008d6:	e001      	b.n	80008dc <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008d8:	23ff      	movs	r3, #255	; 0xff
 80008da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fa04 	bl	8000d04 <conf_sensor>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	6039      	str	r1, [r7, #0]
 8000910:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f000 f90c 	bl	8000b30 <null_ptr_check>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800091c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f9e8 	bl	8000d04 <conf_sensor>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	2300      	movs	r3, #0
 8000954:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f000 f8ea 	bl	8000b30 <null_ptr_check>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8000960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d133      	bne.n	80009d0 <bmp280_get_uncomp_data+0x8c>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d030      	beq.n	80009d0 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800096e:	f107 0108 	add.w	r1, r7, #8
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2206      	movs	r2, #6
 8000976:	20f7      	movs	r0, #247	; 0xf7
 8000978:	f7ff fe36 	bl	80005e8 <bmp280_get_regs>
 800097c:	4603      	mov	r3, r0
 800097e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8000980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d120      	bne.n	80009ca <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000988:	7a3b      	ldrb	r3, [r7, #8]
 800098a:	031a      	lsls	r2, r3, #12
 800098c:	7a7b      	ldrb	r3, [r7, #9]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	4313      	orrs	r3, r2
 8000992:	7aba      	ldrb	r2, [r7, #10]
 8000994:	0912      	lsrs	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	031a      	lsls	r2, r3, #12
 80009a2:	7b3b      	ldrb	r3, [r7, #12]
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	4313      	orrs	r3, r2
 80009a8:	7b7a      	ldrb	r2, [r7, #13]
 80009aa:	0912      	lsrs	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4619      	mov	r1, r3
 80009be:	4610      	mov	r0, r2
 80009c0:	f000 fa56 	bl	8000e70 <st_check_boundaries>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009c8:	e004      	b.n	80009d4 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009ca:	23f3      	movs	r3, #243	; 0xf3
 80009cc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009ce:	e001      	b.n	80009d4 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009d0:	23ff      	movs	r3, #255	; 0xff
 80009d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f89f 	bl	8000b30 <null_ptr_check>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80009f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d170      	bne.n	8000ae2 <bmp280_get_comp_temp_double+0x102>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a0a:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8000b08 <bmp280_get_comp_temp_double+0x128>
 8000a0e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	8a1b      	ldrh	r3, [r3, #16]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000a1e:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8000b10 <bmp280_get_comp_temp_double+0x130>
 8000a22:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000a26:	ee36 6b47 	vsub.f64	d6, d6, d7
               ((double) dev->calib_param.dig_t2);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8000a38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a3c:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000b18 <bmp280_get_comp_temp_double+0x138>
 8000a4e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8a1b      	ldrh	r3, [r3, #16]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000a5e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8000b20 <bmp280_get_comp_temp_double+0x140>
 8000a62:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000a66:	ee36 6b47 	vsub.f64	d6, d6, d7
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a74:	ed9f 4b28 	vldr	d4, [pc, #160]	; 8000b18 <bmp280_get_comp_temp_double+0x138>
 8000a78:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8a1b      	ldrh	r3, [r3, #16]
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8000a88:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8000b20 <bmp280_get_comp_temp_double+0x140>
 8000a8c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000a90:	ee35 7b47 	vsub.f64	d7, d5, d7
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8000a94:	ee26 6b07 	vmul.f64	d6, d6, d7
            ((double) dev->calib_param.dig_t3);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        var2 =
 8000aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000aaa:	ed87 7b04 	vstr	d7, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8000aae:	ed97 6b06 	vldr	d6, [r7, #24]
 8000ab2:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000abe:	ee17 2a90 	vmov	r2, s15
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8000ac6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000aca:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ace:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ad2:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000b28 <bmp280_get_comp_temp_double+0x148>
 8000ad6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	ed83 7b00 	vstr	d7, [r3]
 8000ae0:	e009      	b.n	8000af6 <bmp280_get_comp_temp_double+0x116>
    }
    else
    {
        *temperature = 0;
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8000af0:	23ef      	movs	r3, #239	; 0xef
 8000af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8000af6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	f3af 8000 	nop.w
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	40d00000 	.word	0x40d00000
 8000b10:	00000000 	.word	0x00000000
 8000b14:	40900000 	.word	0x40900000
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	41000000 	.word	0x41000000
 8000b20:	00000000 	.word	0x00000000
 8000b24:	40c00000 	.word	0x40c00000
 8000b28:	00000000 	.word	0x00000000
 8000b2c:	40b40000 	.word	0x40b40000

08000b30 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <null_ptr_check+0x26>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d007      	beq.n	8000b56 <null_ptr_check+0x26>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <null_ptr_check+0x26>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000b56:	23ff      	movs	r3, #255	; 0xff
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e001      	b.n	8000b60 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
 8000b82:	e016      	b.n	8000bb2 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	441a      	add	r2, r3
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	440b      	add	r3, r1
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	440b      	add	r3, r1
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	7dfa      	ldrb	r2, [r7, #23]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3e4      	bcc.n	8000b84 <interleave_data+0x14>
    }
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffa3 	bl	8000b30 <null_ptr_check>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d17f      	bne.n	8000cf8 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2218      	movs	r2, #24
 8000c00:	2088      	movs	r0, #136	; 0x88
 8000c02:	f7ff fcf1 	bl	80005e8 <bmp280_get_regs>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d171      	bne.n	8000cf8 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	7b3b      	ldrb	r3, [r7, #12]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000c3a:	7c7b      	ldrb	r3, [r7, #17]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	7c3b      	ldrb	r3, [r7, #16]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000c4c:	7cfb      	ldrb	r3, [r7, #19]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	7cbb      	ldrb	r3, [r7, #18]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000c60:	7d7b      	ldrb	r3, [r7, #21]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	7d3b      	ldrb	r3, [r7, #20]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	7dbb      	ldrb	r3, [r7, #22]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000c84:	7e7b      	ldrb	r3, [r7, #25]
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	7e3b      	ldrb	r3, [r7, #24]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000c96:	7efb      	ldrb	r3, [r7, #27]
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	7ebb      	ldrb	r3, [r7, #26]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000ca8:	7f7b      	ldrb	r3, [r7, #29]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	7f3b      	ldrb	r3, [r7, #28]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000cba:	7ffb      	ldrb	r3, [r7, #31]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	7fbb      	ldrb	r3, [r7, #30]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000ccc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000d12:	2300      	movs	r3, #0
 8000d14:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000d16:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8000d1a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff07 	bl	8000b30 <null_ptr_check>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 8095 	bne.w	8000e5a <conf_sensor+0x156>
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8091 	beq.w	8000e5a <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000d38:	f107 0114 	add.w	r1, r7, #20
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	20f4      	movs	r0, #244	; 0xf4
 8000d42:	f7ff fc51 	bl	80005e8 <bmp280_get_regs>
 8000d46:	4603      	mov	r3, r0
 8000d48:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8086 	bne.w	8000e60 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fcec 	bl	8000732 <bmp280_soft_reset>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d17c      	bne.n	8000e60 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000d66:	7d3b      	ldrb	r3, [r7, #20]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	015b      	lsls	r3, r3, #5
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000d80:	7d3b      	ldrb	r3, [r7, #20]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	f023 031c 	bic.w	r3, r3, #28
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	f003 031c 	and.w	r3, r3, #28
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000da0:	7d7b      	ldrb	r3, [r7, #21]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	015b      	lsls	r3, r3, #5
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000dba:	7d7b      	ldrb	r3, [r7, #21]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	f023 031c 	bic.w	r3, r3, #28
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f003 031c 	and.w	r3, r3, #28
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	f023 0301 	bic.w	r3, r3, #1
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000df8:	f107 0114 	add.w	r1, r7, #20
 8000dfc:	f107 0010 	add.w	r0, r7, #16
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2202      	movs	r2, #2
 8000e04:	f7ff fc27 	bl	8000656 <bmp280_set_regs>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d125      	bne.n	8000e60 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	332c      	adds	r3, #44	; 0x2c
 8000e1a:	6810      	ldr	r0, [r2, #0]
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	7912      	ldrb	r2, [r2, #4]
 8000e20:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01b      	beq.n	8000e60 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000e28:	7d3b      	ldrb	r3, [r7, #20]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f023 0303 	bic.w	r3, r3, #3
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000e44:	f107 0114 	add.w	r1, r7, #20
 8000e48:	f107 0010 	add.w	r0, r7, #16
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f7ff fc01 	bl	8000656 <bmp280_set_regs>
 8000e54:	4603      	mov	r3, r0
 8000e56:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000e58:	e002      	b.n	8000e60 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	e000      	b.n	8000e62 <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8000e60:	bf00      	nop
    }

    return rslt;
 8000e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dd03      	ble.n	8000e8c <st_check_boundaries+0x1c>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <st_check_boundaries+0x6c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	dd09      	ble.n	8000ea0 <st_check_boundaries+0x30>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	dd03      	ble.n	8000e9a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <st_check_boundaries+0x6c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	dd02      	ble.n	8000ea0 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000e9a:	23f4      	movs	r3, #244	; 0xf4
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e015      	b.n	8000ecc <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd03      	ble.n	8000eae <st_check_boundaries+0x3e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <st_check_boundaries+0x6c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	dd02      	ble.n	8000eb4 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000eae:	23f6      	movs	r3, #246	; 0xf6
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e00b      	b.n	8000ecc <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dd03      	ble.n	8000ec2 <st_check_boundaries+0x52>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <st_check_boundaries+0x6c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	dd02      	ble.n	8000ec8 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000ec2:	23f5      	movs	r3, #245	; 0xf5
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e001      	b.n	8000ecc <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	000fffef 	.word	0x000fffef

08000ee0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	; 0x30
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b8a      	ldr	r3, [pc, #552]	; (8001120 <MX_GPIO_Init+0x240>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a89      	ldr	r2, [pc, #548]	; (8001120 <MX_GPIO_Init+0x240>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b87      	ldr	r3, [pc, #540]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b84      	ldr	r3, [pc, #528]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a83      	ldr	r2, [pc, #524]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b81      	ldr	r3, [pc, #516]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	4b7e      	ldr	r3, [pc, #504]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a7d      	ldr	r2, [pc, #500]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b7b      	ldr	r3, [pc, #492]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b78      	ldr	r3, [pc, #480]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a77      	ldr	r2, [pc, #476]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b75      	ldr	r3, [pc, #468]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b72      	ldr	r3, [pc, #456]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a71      	ldr	r2, [pc, #452]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b6f      	ldr	r3, [pc, #444]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b69      	ldr	r3, [pc, #420]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a65      	ldr	r2, [pc, #404]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CS1_GPIO_Port, BMP280_CS1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4860      	ldr	r0, [pc, #384]	; (8001124 <MX_GPIO_Init+0x244>)
 8000fa4:	f001 fbdc 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fae:	485e      	ldr	r0, [pc, #376]	; (8001128 <MX_GPIO_Init+0x248>)
 8000fb0:	f001 fbd6 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	485c      	ldr	r0, [pc, #368]	; (800112c <MX_GPIO_Init+0x24c>)
 8000fba:	f001 fbd1 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CS1_Pin;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BMP280_CS1_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4853      	ldr	r0, [pc, #332]	; (8001124 <MX_GPIO_Init+0x244>)
 8000fd6:	f001 fa17 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	484f      	ldr	r0, [pc, #316]	; (8001130 <MX_GPIO_Init+0x250>)
 8000ff2:	f001 fa09 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff6:	2332      	movs	r3, #50	; 0x32
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4847      	ldr	r0, [pc, #284]	; (8001130 <MX_GPIO_Init+0x250>)
 8001012:	f001 f9f9 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001016:	2386      	movs	r3, #134	; 0x86
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001026:	230b      	movs	r3, #11
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4840      	ldr	r0, [pc, #256]	; (8001134 <MX_GPIO_Init+0x254>)
 8001032:	f001 f9e9 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001036:	f244 0381 	movw	r3, #16513	; 0x4081
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4836      	ldr	r0, [pc, #216]	; (8001128 <MX_GPIO_Init+0x248>)
 8001050:	f001 f9da 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	482d      	ldr	r0, [pc, #180]	; (8001128 <MX_GPIO_Init+0x248>)
 8001072:	f001 f9c9 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_GPIO_Init+0x24c>)
 800108e:	f001 f9bb 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_GPIO_Init+0x24c>)
 80010a6:	f001 f9af 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010bc:	230a      	movs	r3, #10
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <MX_GPIO_Init+0x254>)
 80010c8:	f001 f99e 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_GPIO_Init+0x254>)
 80010e2:	f001 f991 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f8:	230b      	movs	r3, #11
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <MX_GPIO_Init+0x24c>)
 8001104:	f001 f980 	bl	8002408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	f001 f8b2 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001112:	2028      	movs	r0, #40	; 0x28
 8001114:	f001 f8cb 	bl	80022ae <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40021000 	.word	0x40021000
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800
 8001130:	40020800 	.word	0x40020800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_TIM_PeriodElapsedCallback>:
float uchyb = 0;
float PWM_raw = 0;
int32_t SWV_temp = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b099      	sub	sp, #100	; 0x64
 800113c:	af04      	add	r7, sp, #16
 800113e:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a78      	ldr	r2, [pc, #480]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	f040 80a5 	bne.w	8001296 <HAL_TIM_PeriodElapsedCallback+0x15e>
	 {
		 /* Reading the raw data from sensor */
		 rslt = bmp280_get_uncomp_data(&bmp280_data, &bmp280);
 800114c:	4977      	ldr	r1, [pc, #476]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800114e:	4878      	ldr	r0, [pc, #480]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001150:	f7ff fbf8 	bl	8000944 <bmp280_get_uncomp_data>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b76      	ldr	r3, [pc, #472]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800115a:	701a      	strb	r2, [r3, #0]

		 rslt = bmp280_get_comp_temp_double(&temp, bmp280_data.uncomp_temp, &bmp280);
 800115c:	4b74      	ldr	r3, [pc, #464]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a72      	ldr	r2, [pc, #456]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001162:	4619      	mov	r1, r3
 8001164:	4874      	ldr	r0, [pc, #464]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001166:	f7ff fc3b 	bl	80009e0 <bmp280_get_comp_temp_double>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001170:	701a      	strb	r2, [r3, #0]
		 SWV_temp = (int32_t)temp;
 8001172:	4b71      	ldr	r3, [pc, #452]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001174:	ed93 7b00 	vldr	d7, [r3]
 8001178:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800117c:	ee17 2a90 	vmov	r2, s15
 8001180:	4b6e      	ldr	r3, [pc, #440]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001182:	601a      	str	r2, [r3, #0]

		 uchyb = (float)(setValue - temp);
 8001184:	4b6e      	ldr	r3, [pc, #440]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001190:	4b69      	ldr	r3, [pc, #420]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001192:	ed93 7b00 	vldr	d7, [r3]
 8001196:	ee36 7b47 	vsub.f64	d7, d6, d7
 800119a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800119e:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80011a0:	edc3 7a00 	vstr	s15, [r3]

		 PWM_raw = arm_pid_f32(&PID, uchyb);
 80011a4:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a67      	ldr	r2, [pc, #412]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80011ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011b8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80011bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011be:	edd3 6a01 	vldr	s13, [r3, #4]
 80011c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80011c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80011cc:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80011d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80011d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011e6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    /* Update state */
    S->state[1] = S->state[0];
 80011f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f8:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80011fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011fe:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001204:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x214>)
 800120a:	6013      	str	r3, [r2, #0]
		 PWM=(float)(PWM_raw);
 800120c:	4b4f      	ldr	r3, [pc, #316]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x214>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800121e:	801a      	strh	r2, [r3, #0]

		 if(PWM_raw>2000)
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001354 <HAL_TIM_PeriodElapsedCallback+0x21c>
 800122a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd11      	ble.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x120>
		 {
		 	PWM=2000;
 8001234:	4b46      	ldr	r3, [pc, #280]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001236:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800123a:	801a      	strh	r2, [r3, #0]
		 	//arm_pid_reset_f32(&PID_regulator);
		 	if(PID.state[2] > 2500) PID.state[2] = 2500;
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800123e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001242:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001358 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd12      	ble.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x13e>
 8001250:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001252:	4a42      	ldr	r2, [pc, #264]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	e00e      	b.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x13e>
		 }
		 else if (PWM_raw<0)
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x214>)
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d506      	bpl.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x13e>
		 {
		 	//arm_pid_reset_f32(&PID_regulator);
		 	PWM=0;
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800126a:	2200      	movs	r2, #0
 800126c:	801a      	strh	r2, [r3, #0]
		 	PID.state[2] = 0;
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
		 }
		 if(PWM<=1000)
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800127e:	d805      	bhi.n	800128c <HAL_TIM_PeriodElapsedCallback+0x154>
		 {
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM);
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
 800128a:	e004      	b.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x15e>
		 }
		 else
		 {
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000);
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
		 }


	 }

	 if (htim->Instance == TIM4)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d138      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x1da>
	 {
		 char txData[50];
		 int text = sprintf(txData, "set_temp: %u | temp: %d.%02u | uchyb: %d\r\n",
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012a8:	ed93 7b00 	vldr	d7, [r3]
 80012ac:	eefd 5bc7 	vcvt.s32.f64	s11, d7
		 				 	setValue, (int32_t)temp, (int32_t)((temp-(int32_t)temp)*100),
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012b2:	ed93 6b00 	vldr	d6, [r3]
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012b8:	ed93 7b00 	vldr	d7, [r3]
 80012bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001320 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80012cc:	ee27 7b06 	vmul.f64	d7, d7, d6
		 int text = sprintf(txData, "set_temp: %u | temp: %d.%02u | uchyb: %d\r\n",
 80012d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012d4:	ee17 1a90 	vmov	r1, s15
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e2:	f107 000c 	add.w	r0, r7, #12
 80012e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80012ea:	9100      	str	r1, [sp, #0]
 80012ec:	ee15 3a90 	vmov	r3, s11
 80012f0:	491d      	ldr	r1, [pc, #116]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80012f2:	f005 ff51 	bl	8007198 <siprintf>
 80012f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		 					uchyb);

		 HAL_UART_Transmit(&huart3, (uint8_t*)txData, text, strlen(text));
 80012f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fa:	b29c      	uxth	r4, r3
 80012fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff9e 	bl	8000240 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	f107 010c 	add.w	r1, r7, #12
 800130a:	4622      	mov	r2, r4
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800130e:	f004 fc2b 	bl	8005b68 <HAL_UART_Transmit>
	 }
}
 8001312:	bf00      	nop
 8001314:	3754      	adds	r7, #84	; 0x54
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w
 8001320:	00000000 	.word	0x00000000
 8001324:	40590000 	.word	0x40590000
 8001328:	40000400 	.word	0x40000400
 800132c:	20000000 	.word	0x20000000
 8001330:	200000e0 	.word	0x200000e0
 8001334:	200000e8 	.word	0x200000e8
 8001338:	20000110 	.word	0x20000110
 800133c:	200000cc 	.word	0x200000cc
 8001340:	20000118 	.word	0x20000118
 8001344:	200000c4 	.word	0x200000c4
 8001348:	200000ec 	.word	0x200000ec
 800134c:	200000c8 	.word	0x200000c8
 8001350:	2000011a 	.word	0x2000011a
 8001354:	44fa0000 	.word	0x44fa0000
 8001358:	451c4000 	.word	0x451c4000
 800135c:	451c4000 	.word	0x451c4000
 8001360:	2000021c 	.word	0x2000021c
 8001364:	40000800 	.word	0x40000800
 8001368:	08007a0c 	.word	0x08007a0c
 800136c:	20000268 	.word	0x20000268

08001370 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_UART_RxCpltCallback+0x148>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f040 8090 	bne.w	80014a4 <HAL_UART_RxCpltCallback+0x134>
	{
		if(odebrane[0]=='H')
 8001384:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b48      	cmp	r3, #72	; 0x48
 800138a:	d136      	bne.n	80013fa <HAL_UART_RxCpltCallback+0x8a>
		{
			//konwersja na int od 1 elementu tablicy
			PWM = ((int8_t)odebrane[1]-'0')*100+((int8_t)odebrane[2]-'0')*10+((int8_t)odebrane[3]-'0')*1;
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	3b30      	subs	r3, #48	; 0x30
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	4413      	add	r3, r2
 800139c:	461a      	mov	r2, r3
 800139e:	0091      	lsls	r1, r2, #2
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b44      	ldr	r3, [pc, #272]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	3b30      	subs	r3, #48	; 0x30
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	0089      	lsls	r1, r1, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	3b30      	subs	r3, #48	; 0x30
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_UART_RxCpltCallback+0x150>)
 80013d4:	801a      	strh	r2, [r3, #0]
			if(PWM>100) PWM = 100;
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <HAL_UART_RxCpltCallback+0x150>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d902      	bls.n	80013e4 <HAL_UART_RxCpltCallback+0x74>
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_UART_RxCpltCallback+0x150>)
 80013e0:	2264      	movs	r2, #100	; 0x64
 80013e2:	801a      	strh	r2, [r3, #0]
			else if(PWM<0) PWM = 0;
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM*10);
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_UART_RxCpltCallback+0x150>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_UART_RxCpltCallback+0x154>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(odebrane[0]=='T')
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b54      	cmp	r3, #84	; 0x54
 8001400:	d150      	bne.n	80014a4 <HAL_UART_RxCpltCallback+0x134>
		{
			 rslt = bmp280_get_uncomp_data(&bmp280_data, &bmp280);
 8001402:	4931      	ldr	r1, [pc, #196]	; (80014c8 <HAL_UART_RxCpltCallback+0x158>)
 8001404:	4831      	ldr	r0, [pc, #196]	; (80014cc <HAL_UART_RxCpltCallback+0x15c>)
 8001406:	f7ff fa9d 	bl	8000944 <bmp280_get_uncomp_data>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_UART_RxCpltCallback+0x160>)
 8001410:	701a      	strb	r2, [r3, #0]
			 rslt = bmp280_get_comp_temp_double(&temp, bmp280_data.uncomp_temp, &bmp280);
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_UART_RxCpltCallback+0x15c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2c      	ldr	r2, [pc, #176]	; (80014c8 <HAL_UART_RxCpltCallback+0x158>)
 8001418:	4619      	mov	r1, r3
 800141a:	482e      	ldr	r0, [pc, #184]	; (80014d4 <HAL_UART_RxCpltCallback+0x164>)
 800141c:	f7ff fae0 	bl	80009e0 <bmp280_get_comp_temp_double>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_UART_RxCpltCallback+0x160>)
 8001426:	701a      	strb	r2, [r3, #0]

			//konwersja na int od 1 elementu tablicy
			setValue = ((int8_t)odebrane[1]-'0')*100+((int8_t)odebrane[2]-'0')*10+((int8_t)odebrane[3]-'0')*1;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	3b30      	subs	r3, #48	; 0x30
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4413      	add	r3, r2
 8001438:	461a      	mov	r2, r3
 800143a:	0091      	lsls	r1, r2, #2
 800143c:	461a      	mov	r2, r3
 800143e:	460b      	mov	r3, r1
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 8001448:	789b      	ldrb	r3, [r3, #2]
 800144a:	b25b      	sxtb	r3, r3
 800144c:	3b30      	subs	r3, #48	; 0x30
 800144e:	b29b      	uxth	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	0089      	lsls	r1, r1, #2
 8001454:	440b      	add	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 8001460:	78db      	ldrb	r3, [r3, #3]
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b30      	subs	r3, #48	; 0x30
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_UART_RxCpltCallback+0x168>)
 8001470:	801a      	strh	r2, [r3, #0]
			if(setValue>45) setValue = 45;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_UART_RxCpltCallback+0x168>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2b2d      	cmp	r3, #45	; 0x2d
 8001478:	d903      	bls.n	8001482 <HAL_UART_RxCpltCallback+0x112>
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_UART_RxCpltCallback+0x168>)
 800147c:	222d      	movs	r2, #45	; 0x2d
 800147e:	801a      	strh	r2, [r3, #0]
 8001480:	e010      	b.n	80014a4 <HAL_UART_RxCpltCallback+0x134>
			else if(setValue<temp) setValue = 0;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_UART_RxCpltCallback+0x168>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_UART_RxCpltCallback+0x164>)
 8001490:	ed93 7b00 	vldr	d7, [r3]
 8001494:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	d502      	bpl.n	80014a4 <HAL_UART_RxCpltCallback+0x134>
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_UART_RxCpltCallback+0x168>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	801a      	strh	r2, [r3, #0]
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, setValue*10);
		}
	}

	HAL_UART_Receive_IT(&huart3, (uint8_t*)odebrane, 4);
 80014a4:	2204      	movs	r2, #4
 80014a6:	4905      	ldr	r1, [pc, #20]	; (80014bc <HAL_UART_RxCpltCallback+0x14c>)
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_UART_RxCpltCallback+0x16c>)
 80014aa:	f004 fbf0 	bl	8005c8e <HAL_UART_Receive_IT>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004800 	.word	0x40004800
 80014bc:	2000011c 	.word	0x2000011c
 80014c0:	2000011a 	.word	0x2000011a
 80014c4:	2000021c 	.word	0x2000021c
 80014c8:	20000000 	.word	0x20000000
 80014cc:	200000e0 	.word	0x200000e0
 80014d0:	200000e8 	.word	0x200000e8
 80014d4:	20000110 	.word	0x20000110
 80014d8:	20000118 	.word	0x20000118
 80014dc:	20000268 	.word	0x20000268

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f000 fd6a 	bl	8001fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f85b 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ee:	f7ff fcf7 	bl	8000ee0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014f2:	f000 fca3 	bl	8001e3c <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80014f6:	f000 f99f 	bl	8001838 <MX_SPI4_Init>
  MX_TIM2_Init();
 80014fa:	f000 faf7 	bl	8001aec <MX_TIM2_Init>
  MX_TIM3_Init();
 80014fe:	f000 fb6b 	bl	8001bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001502:	f000 fbb9 	bl	8001c78 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // ZAD. 4 ////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);
 8001506:	481e      	ldr	r0, [pc, #120]	; (8001580 <main+0xa0>)
 8001508:	f003 f97c 	bl	8004804 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800150c:	481d      	ldr	r0, [pc, #116]	; (8001584 <main+0xa4>)
 800150e:	f003 f979 	bl	8004804 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001512:	210c      	movs	r1, #12
 8001514:	481c      	ldr	r0, [pc, #112]	; (8001588 <main+0xa8>)
 8001516:	f003 fa4f 	bl	80049b8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)odebrane, 4);
 800151a:	2204      	movs	r2, #4
 800151c:	491b      	ldr	r1, [pc, #108]	; (800158c <main+0xac>)
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <main+0xb0>)
 8001520:	f004 fbb5 	bl	8005c8e <HAL_UART_Receive_IT>

  PID.Kp = PID_KP;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <main+0xb4>)
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <main+0xb8>)
 8001528:	619a      	str	r2, [r3, #24]
  PID.Ki = PID_KI * PID_TS;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <main+0xb4>)
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <main+0xbc>)
 800152e:	61da      	str	r2, [r3, #28]
//  PID.Kd = PID_KD / PID_TS;

  arm_pid_init_f32(&PID, 1);
 8001530:	2101      	movs	r1, #1
 8001532:	4818      	ldr	r0, [pc, #96]	; (8001594 <main+0xb4>)
 8001534:	f005 fde0 	bl	80070f8 <arm_pid_init_f32>

      struct bmp280_config conf;
      uint8_t rslt = bmp280_init(&bmp280);
 8001538:	4819      	ldr	r0, [pc, #100]	; (80015a0 <main+0xc0>)
 800153a:	f7ff f91f 	bl	800077c <bmp280_init>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
      /* Always read the current settings before writing, especially when
      * all the configuration is not modified
      */
      rslt = bmp280_get_config(&conf, &bmp280);
 8001542:	463b      	mov	r3, r7
 8001544:	4916      	ldr	r1, [pc, #88]	; (80015a0 <main+0xc0>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f97e 	bl	8000848 <bmp280_get_config>
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
      /* configuring the temperature oversampling, filter coefficient and output data rate */
      /* Overwrite the desired settings */
      conf.filter = BMP280_FILTER_OFF;
 8001550:	2300      	movs	r3, #0
 8001552:	70fb      	strb	r3, [r7, #3]
      /* Temperature oversampling set at 1x */
      conf.os_temp = BMP280_OS_1X;
 8001554:	2301      	movs	r3, #1
 8001556:	703b      	strb	r3, [r7, #0]
      /* Pressure over sampling none (disabling pressure measurement) */
      conf.os_pres = BMP280_OS_1X;
 8001558:	2301      	movs	r3, #1
 800155a:	707b      	strb	r3, [r7, #1]
      /* Setting the output data rate as 1HZ(1000ms) */
      conf.odr = BMP280_ODR_1000_MS;
 800155c:	2305      	movs	r3, #5
 800155e:	70bb      	strb	r3, [r7, #2]
      rslt = bmp280_set_config(&conf, &bmp280);
 8001560:	463b      	mov	r3, r7
 8001562:	490f      	ldr	r1, [pc, #60]	; (80015a0 <main+0xc0>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f9bf 	bl	80008e8 <bmp280_set_config>
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
      /* Always set the power mode after setting the configuration */
      rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp280);
 800156e:	490c      	ldr	r1, [pc, #48]	; (80015a0 <main+0xc0>)
 8001570:	2003      	movs	r0, #3
 8001572:	f7ff f9c8 	bl	8000906 <bmp280_set_power_mode>
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
      /* Pressure over sampling 1X */
      conf.os_pres = BMP280_OS_1X;
 800157a:	2301      	movs	r3, #1
 800157c:	707b      	strb	r3, [r7, #1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800157e:	e7fe      	b.n	800157e <main+0x9e>
 8001580:	200001d0 	.word	0x200001d0
 8001584:	20000184 	.word	0x20000184
 8001588:	2000021c 	.word	0x2000021c
 800158c:	2000011c 	.word	0x2000011c
 8001590:	20000268 	.word	0x20000268
 8001594:	200000ec 	.word	0x200000ec
 8001598:	41780000 	.word	0x41780000
 800159c:	3da1815a 	.word	0x3da1815a
 80015a0:	20000000 	.word	0x20000000

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	2234      	movs	r2, #52	; 0x34
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fde8 	bl	8007188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015c8:	f001 f908 	bl	80027dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <SystemClock_Config+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <SystemClock_Config+0xd0>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001618:	2390      	movs	r3, #144	; 0x90
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001620:	2306      	movs	r3, #6
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4618      	mov	r0, r3
 800162e:	f001 f8e5 	bl	80027fc <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001638:	f000 f8f8 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	230f      	movs	r3, #15
 800163e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001640:	2302      	movs	r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fb7d 	bl	8002d58 <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001664:	f000 f8e2 	bl	800182c <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3750      	adds	r7, #80	; 0x50
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <bmp280_spi_reg_read>:

#define BMP280_SPI_BUFFER_LEN 28
#define BMP280_DATA_INDEX 1

int8_t bmp280_spi_reg_read ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af02      	add	r7, sp, #8
 800167e:	603a      	str	r2, [r7, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	460b      	mov	r3, r1
 8001688:	71bb      	strb	r3, [r7, #6]
 800168a:	4613      	mov	r3, r2
 800168c:	80bb      	strh	r3, [r7, #4]
	/* Implement the SPI read routine according to the target machine . */
	HAL_StatusTypeDef status = HAL_OK ;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	int32_t iError = BMP280_OK ;
 8001694:	2300      	movs	r3, #0
 8001696:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t txarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
	uint8_t rxarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	615a      	str	r2, [r3, #20]
	uint8_t stringpos ;
	txarray [0] = reg_addr ;
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	/* Software slave selection procedure */
	if(cs == BMP280_CS1 ){
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d104      	bne.n	80016da <bmp280_spi_reg_read+0x62>
		HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET );
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	4823      	ldr	r0, [pc, #140]	; (8001764 <bmp280_spi_reg_read+0xec>)
 80016d6:	f001 f843 	bl	8002760 <HAL_GPIO_WritePin>
	}

	/* Data exchange */
	status = HAL_SPI_TransmitReceive ( BMP280_SPI , ( uint8_t *) (& txarray ), ( uint8_t *)
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	3301      	adds	r3, #1
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f107 0208 	add.w	r2, r7, #8
 80016e4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016e8:	2005      	movs	r0, #5
 80016ea:	9000      	str	r0, [sp, #0]
 80016ec:	481e      	ldr	r0, [pc, #120]	; (8001768 <bmp280_spi_reg_read+0xf0>)
 80016ee:	f002 fb76 	bl	8003dde <HAL_SPI_TransmitReceive>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			(&rxarray ), length +1, 5);
	while ( BMP280_SPI -> State == HAL_SPI_STATE_BUSY ) {};
 80016f8:	bf00      	nop
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <bmp280_spi_reg_read+0xf0>)
 80016fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d0f9      	beq.n	80016fa <bmp280_spi_reg_read+0x82>

	/* Disable all slaves */
	HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET );
 8001706:	2201      	movs	r2, #1
 8001708:	2110      	movs	r1, #16
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <bmp280_spi_reg_read+0xec>)
 800170c:	f001 f828 	bl	8002760 <HAL_GPIO_WritePin>

	/* Copy data from rx buffer */
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001716:	e011      	b.n	800173c <bmp280_spi_reg_read+0xc4>
		reg_data [ stringpos ] = rxarray [ stringpos + BMP280_DATA_INDEX ];
 8001718:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	440b      	add	r3, r1
 8001726:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800172a:	440a      	add	r2, r1
 800172c:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001730:	701a      	strb	r2, [r3, #0]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8001732:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800173c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001740:	b29b      	uxth	r3, r3
 8001742:	88ba      	ldrh	r2, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8e7      	bhi.n	8001718 <bmp280_spi_reg_read+0xa0>
	}

	// memcpy ( reg_data , rxarray + BMP280_DATA_INDEX , length );
	if ( status != HAL_OK ) {
 8001748:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <bmp280_spi_reg_read+0xde>
	// The BME280 API calls for 0 return value as a success , and -1 returned as failure
		iError = ( -1);
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return ( int8_t ) iError ;
 8001756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001758:	b25b      	sxtb	r3, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	3748      	adds	r7, #72	; 0x48
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	20000120 	.word	0x20000120

0800176c <bmp280_spi_reg_write>:

int8_t bmp280_spi_reg_write ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	603a      	str	r2, [r7, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	460b      	mov	r3, r1
 800177c:	71bb      	strb	r3, [r7, #6]
 800177e:	4613      	mov	r3, r2
 8001780:	80bb      	strh	r3, [r7, #4]
	/* Implement the SPI write routine according to the target machine . */
	HAL_StatusTypeDef status = HAL_OK ;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	int32_t iError = BMP280_OK ;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t txarray [ BMP280_SPI_BUFFER_LEN ];
	uint8_t stringpos ;

	/* Copy register address and data to tx buffer */
	txarray [0] = reg_addr ;
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	733b      	strb	r3, [r7, #12]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8001790:	2300      	movs	r3, #0
 8001792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001796:	e011      	b.n	80017bc <bmp280_spi_reg_write+0x50>
		txarray [ stringpos + BMP280_DATA_INDEX ] = reg_data [ stringpos ];
 8001798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	441a      	add	r2, r3
 80017a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017a4:	3301      	adds	r3, #1
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017ac:	440b      	add	r3, r1
 80017ae:	f803 2c24 	strb.w	r2, [r3, #-36]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 80017b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017b6:	3301      	adds	r3, #1
 80017b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80017bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8e7      	bhi.n	8001798 <bmp280_spi_reg_write+0x2c>
	}

	// memcpy ( txarray + BMP280_DATA_INDEX , reg_data , length );
	/* Software slave selection procedure */
	if(cs == BMP280_CS1 ){
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d104      	bne.n	80017d8 <bmp280_spi_reg_write+0x6c>
		HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET );
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <bmp280_spi_reg_write+0xb8>)
 80017d4:	f000 ffc4 	bl	8002760 <HAL_GPIO_WritePin>
	}

	/* Data exchange */
	status = HAL_SPI_Transmit ( BMP280_SPI , ( uint8_t *) (& txarray ), length +1, 100) ;
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f107 010c 	add.w	r1, r7, #12
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <bmp280_spi_reg_write+0xbc>)
 80017e6:	f002 f98c 	bl	8003b02 <HAL_SPI_Transmit>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while ( BMP280_SPI -> State == HAL_SPI_STATE_BUSY ) {};
 80017f0:	bf00      	nop
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <bmp280_spi_reg_write+0xbc>)
 80017f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d0f9      	beq.n	80017f2 <bmp280_spi_reg_write+0x86>

	/* Disable all slaves */
	HAL_GPIO_WritePin (BMP280_CS1_GPIO_Port, BMP280_CS1_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2110      	movs	r1, #16
 8001802:	4808      	ldr	r0, [pc, #32]	; (8001824 <bmp280_spi_reg_write+0xb8>)
 8001804:	f000 ffac 	bl	8002760 <HAL_GPIO_WritePin>
	if ( status != HAL_OK ) {
 8001808:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <bmp280_spi_reg_write+0xaa>
		// The BMP280 API calls for 0 return value as a success , and -1 returned as failure
		iError = ( -1);
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return ( int8_t ) iError ;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	b25b      	sxtb	r3, r3
}
 800181a:	4618      	mov	r0, r3
 800181c:	3730      	adds	r7, #48	; 0x30
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	20000120 	.word	0x20000120

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_SPI4_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_SPI4_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_SPI4_Init+0x74>)
 8001844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_SPI4_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI4_Init+0x74>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001856:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI4_Init+0x74>)
 800185a:	2202      	movs	r2, #2
 800185c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_SPI4_Init+0x74>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI4_Init+0x74>)
 8001866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI4_Init+0x74>)
 800186e:	2218      	movs	r2, #24
 8001870:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI4_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI4_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_SPI4_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI4_Init+0x74>)
 8001886:	2207      	movs	r2, #7
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_SPI4_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI4_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_SPI4_Init+0x74>)
 8001898:	f002 f888 	bl	80039ac <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f7ff ffc3 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000120 	.word	0x20000120
 80018b0:	40013400 	.word	0x40013400

080018b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <HAL_SPI_MspInit+0x8c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d12f      	bne.n	8001936 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_SPI_MspInit+0x90>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001916:	2305      	movs	r3, #5
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <HAL_SPI_MspInit+0x94>)
 8001922:	f000 fd71 	bl	8002408 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2054      	movs	r0, #84	; 0x54
 800192c:	f000 fca3 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001930:	2054      	movs	r0, #84	; 0x54
 8001932:	f000 fcbc 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40013400 	.word	0x40013400
 8001944:	40023800 	.word	0x40023800
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_MspInit+0x44>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_MspInit+0x44>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_MspInit+0x44>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_MspInit+0x44>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_MspInit+0x44>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_MspInit+0x44>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 fb2a 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM2_IRQHandler+0x10>)
 80019ee:	f003 f8dd 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000021c 	.word	0x2000021c

080019fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM3_IRQHandler+0x10>)
 8001a02:	f003 f8d3 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200001d0 	.word	0x200001d0

08001a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM4_IRQHandler+0x10>)
 8001a16:	f003 f8c9 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000184 	.word	0x20000184

08001a24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <USART3_IRQHandler+0x10>)
 8001a2a:	f004 f97f 	bl	8005d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000268 	.word	0x20000268

08001a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a40:	f000 fea8 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <SPI4_IRQHandler+0x10>)
 8001a4e:	f002 fbd9 	bl	8004204 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000120 	.word	0x20000120

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f005 fb52 	bl	8007134 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20080000 	.word	0x20080000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200000d0 	.word	0x200000d0
 8001ac4:	20000300 	.word	0x20000300

08001ac8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	615a      	str	r2, [r3, #20]
 8001b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b28:	2247      	movs	r2, #71	; 0x47
 8001b2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b46:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b48:	f002 fe04 	bl	8004754 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b52:	f7ff fe6b 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b60:	4619      	mov	r1, r3
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b64:	f003 fa56 	bl	8005014 <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b6e:	f7ff fe5d 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b74:	f002 febe 	bl	80048f4 <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b7e:	f7ff fe55 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001b92:	f003 feef 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b9c:	f7ff fe46 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001bb8:	f003 f918 	bl	8004dec <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bc2:	f7ff fe33 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM2_Init+0xe8>)
 8001bc8:	f000 f902 	bl	8001dd0 <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000021c 	.word	0x2000021c

08001bd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001bf8:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <MX_TIM3_Init+0x9c>)
 8001bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001bfe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c1e:	4814      	ldr	r0, [pc, #80]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c20:	f002 fd98 	bl	8004754 <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c2a:	f7ff fdff 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c3c:	f003 f9ea 	bl	8005014 <HAL_TIM_ConfigClockSource>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001c46:	f7ff fdf1 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001c58:	f003 fe8c 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c62:	f7ff fde3 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001d0 	.word	0x200001d0
 8001c74:	40000400 	.word	0x40000400

08001c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <MX_TIM4_Init+0x9c>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001c9e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001cac:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001cc0:	f002 fd48 	bl	8004754 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001cca:	f7ff fdaf 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001cdc:	f003 f99a 	bl	8005014 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001ce6:	f7ff fda1 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_TIM4_Init+0x98>)
 8001cf8:	f003 fe3c 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001d02:	f7ff fd93 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000184 	.word	0x20000184
 8001d14:	40000800 	.word	0x40000800

08001d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d114      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201c      	movs	r0, #28
 8001d48:	f000 fa95 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4c:	201c      	movs	r0, #28
 8001d4e:	f000 faae 	bl	80022ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d52:	e032      	b.n	8001dba <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d114      	bne.n	8001d88 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	201d      	movs	r0, #29
 8001d7c:	f000 fa7b 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d80:	201d      	movs	r0, #29
 8001d82:	f000 fa94 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 8001d86:	e018      	b.n	8001dba <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_TIM_Base_MspInit+0xb4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d113      	bne.n	8001dba <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_TIM_Base_MspInit+0xac>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	201e      	movs	r0, #30
 8001db0:	f000 fa61 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001db4:	201e      	movs	r0, #30
 8001db6:	f000 fa7a 	bl	80022ae <HAL_NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d11b      	bne.n	8001e2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_TIM_MspPostInit+0x64>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_TIM_MspPostInit+0x64>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_TIM_MspPostInit+0x64>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	4619      	mov	r1, r3
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <HAL_TIM_MspPostInit+0x68>)
 8001e26:	f000 faef 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000

08001e3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e42:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <MX_USART3_UART_Init+0x5c>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART3_UART_Init+0x58>)
 8001e80:	f003 fe24 	bl	8005acc <HAL_UART_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e8a:	f7ff fccf 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000268 	.word	0x20000268
 8001e98:	40004800 	.word	0x40004800

08001e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0ae      	sub	sp, #184	; 0xb8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2290      	movs	r2, #144	; 0x90
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f005 f963 	bl	8007188 <memset>
  if(uartHandle->Instance==USART3)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <HAL_UART_MspInit+0xc4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d144      	bne.n	8001f56 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 f93e 	bl	800315c <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ee6:	f7ff fca1 	bl	800182c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_UART_MspInit+0xc8>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_UART_MspInit+0xc8>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_UART_MspInit+0xc8>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0xc8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_UART_MspInit+0xc8>)
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_UART_MspInit+0xc8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f34:	2307      	movs	r3, #7
 8001f36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <HAL_UART_MspInit+0xcc>)
 8001f42:	f000 fa61 	bl	8002408 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2027      	movs	r0, #39	; 0x27
 8001f4c:	f000 f993 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f50:	2027      	movs	r0, #39	; 0x27
 8001f52:	f000 f9ac 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	37b8      	adds	r7, #184	; 0xb8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40004800 	.word	0x40004800
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020c00 	.word	0x40020c00

08001f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f72:	490e      	ldr	r1, [pc, #56]	; (8001fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f88:	4c0b      	ldr	r4, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f96:	f7ff fd97 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f005 f8d1 	bl	8007140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9e:	f7ff fa9f 	bl	80014e0 <main>
  bx  lr    
 8001fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001fb0:	08007a94 	.word	0x08007a94
  ldr r2, =_sbss
 8001fb4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001fb8:	20000300 	.word	0x20000300

08001fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC_IRQHandler>

08001fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f000 f94c 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 f805 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fce:	f7ff fcbd 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f967 	bl	80022ca <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f92f 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000034 	.word	0x20000034
 8002030:	2000003c 	.word	0x2000003c
 8002034:	20000038 	.word	0x20000038

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000003c 	.word	0x2000003c
 800205c:	200002ec 	.word	0x200002ec

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200002ec 	.word	0x200002ec

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000003c 	.word	0x2000003c

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <__NVIC_SetPriorityGrouping+0x40>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x40>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00
 8002104:	05fa0000 	.word	0x05fa0000

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	; (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff feb6 	bl	8002060 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d008      	beq.n	8002314 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e052      	b.n	80023ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0216 	bic.w	r2, r2, #22
 8002322:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002332:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_DMA_Abort+0x62>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002364:	e013      	b.n	800238e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002366:	f7ff fe7b 	bl	8002060 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b05      	cmp	r3, #5
 8002372:	d90c      	bls.n	800238e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e015      	b.n	80023ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e4      	bne.n	8002366 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	223f      	movs	r2, #63	; 0x3f
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e00c      	b.n	80023fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2205      	movs	r2, #5
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e175      	b.n	8002714 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	f040 8164 	bne.w	800270e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d005      	beq.n	800245e <HAL_GPIO_Init+0x56>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d130      	bne.n	80024c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0201 	and.w	r2, r3, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d017      	beq.n	80024fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d123      	bne.n	8002550 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80be 	beq.w	800270e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_GPIO_Init+0x324>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a65      	ldr	r2, [pc, #404]	; (800272c <HAL_GPIO_Init+0x324>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_GPIO_Init+0x324>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025aa:	4a61      	ldr	r2, [pc, #388]	; (8002730 <HAL_GPIO_Init+0x328>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x32c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d037      	beq.n	8002646 <HAL_GPIO_Init+0x23e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a57      	ldr	r2, [pc, #348]	; (8002738 <HAL_GPIO_Init+0x330>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d031      	beq.n	8002642 <HAL_GPIO_Init+0x23a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_GPIO_Init+0x334>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d02b      	beq.n	800263e <HAL_GPIO_Init+0x236>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a55      	ldr	r2, [pc, #340]	; (8002740 <HAL_GPIO_Init+0x338>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d025      	beq.n	800263a <HAL_GPIO_Init+0x232>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a54      	ldr	r2, [pc, #336]	; (8002744 <HAL_GPIO_Init+0x33c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01f      	beq.n	8002636 <HAL_GPIO_Init+0x22e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a53      	ldr	r2, [pc, #332]	; (8002748 <HAL_GPIO_Init+0x340>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d019      	beq.n	8002632 <HAL_GPIO_Init+0x22a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_GPIO_Init+0x344>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_GPIO_Init+0x226>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a51      	ldr	r2, [pc, #324]	; (8002750 <HAL_GPIO_Init+0x348>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00d      	beq.n	800262a <HAL_GPIO_Init+0x222>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_GPIO_Init+0x34c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <HAL_GPIO_Init+0x21e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_GPIO_Init+0x350>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d101      	bne.n	8002622 <HAL_GPIO_Init+0x21a>
 800261e:	2309      	movs	r3, #9
 8002620:	e012      	b.n	8002648 <HAL_GPIO_Init+0x240>
 8002622:	230a      	movs	r3, #10
 8002624:	e010      	b.n	8002648 <HAL_GPIO_Init+0x240>
 8002626:	2308      	movs	r3, #8
 8002628:	e00e      	b.n	8002648 <HAL_GPIO_Init+0x240>
 800262a:	2307      	movs	r3, #7
 800262c:	e00c      	b.n	8002648 <HAL_GPIO_Init+0x240>
 800262e:	2306      	movs	r3, #6
 8002630:	e00a      	b.n	8002648 <HAL_GPIO_Init+0x240>
 8002632:	2305      	movs	r3, #5
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x240>
 8002636:	2304      	movs	r3, #4
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x240>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x240>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x240>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x240>
 8002646:	2300      	movs	r3, #0
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f002 0203 	and.w	r2, r2, #3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	; (8002730 <HAL_GPIO_Init+0x328>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_GPIO_Init+0x354>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <HAL_GPIO_Init+0x354>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002690:	4b32      	ldr	r3, [pc, #200]	; (800275c <HAL_GPIO_Init+0x354>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <HAL_GPIO_Init+0x354>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ba:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_GPIO_Init+0x354>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026de:	4a1f      	ldr	r2, [pc, #124]	; (800275c <HAL_GPIO_Init+0x354>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_GPIO_Init+0x354>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_GPIO_Init+0x354>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f ae86 	bls.w	8002428 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40021c00 	.word	0x40021c00
 8002754:	40022000 	.word	0x40022000
 8002758:	40022400 	.word	0x40022400
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f806 	bl	80027c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40007000 	.word	0x40007000

080027fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e29b      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8087 	beq.w	800292e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00c      	beq.n	8002846 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282c:	4b93      	ldr	r3, [pc, #588]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d112      	bne.n	800285e <HAL_RCC_OscConfig+0x62>
 8002838:	4b90      	ldr	r3, [pc, #576]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	4b8d      	ldr	r3, [pc, #564]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d06c      	beq.n	800292c <HAL_RCC_OscConfig+0x130>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d168      	bne.n	800292c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e275      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x7a>
 8002868:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a83      	ldr	r2, [pc, #524]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e02e      	b.n	80028d4 <HAL_RCC_OscConfig+0xd8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x9c>
 800287e:	4b7f      	ldr	r3, [pc, #508]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7e      	ldr	r2, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b7c      	ldr	r3, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7b      	ldr	r2, [pc, #492]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xd8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0xc0>
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a75      	ldr	r2, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a72      	ldr	r2, [pc, #456]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xd8>
 80028bc:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6b      	ldr	r2, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff fbc0 	bl	8002060 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff fbbc 	bl	8002060 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e229      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe8>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff fbac 	bl	8002060 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff fba8 	bl	8002060 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e215      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	4b57      	ldr	r3, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x110>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d069      	beq.n	8002a0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293a:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002946:	4b4d      	ldr	r3, [pc, #308]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x190>
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x17a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1e9      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	493d      	ldr	r1, [pc, #244]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e040      	b.n	8002a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d023      	beq.n	80029dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff fb5e 	bl	8002060 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a8:	f7ff fb5a 	bl	8002060 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4929      	ldr	r1, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
 80029da:	e018      	b.n	8002a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff fb3a 	bl	8002060 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f0:	f7ff fb36 	bl	8002060 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1a3      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d038      	beq.n	8002a8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d019      	beq.n	8002a56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fb17 	bl	8002060 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff fb13 	bl	8002060 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e180      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x23a>
 8002a54:	e01a      	b.n	8002a8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7ff fafd 	bl	8002060 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7ff faf9 	bl	8002060 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d903      	bls.n	8002a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e166      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
 8002a7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a4 	beq.w	8002be2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a88      	ldr	r2, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b86      	ldr	r3, [pc, #536]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac2:	4b83      	ldr	r3, [pc, #524]	; (8002cd0 <HAL_RCC_OscConfig+0x4d4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ace:	4b80      	ldr	r3, [pc, #512]	; (8002cd0 <HAL_RCC_OscConfig+0x4d4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7f      	ldr	r2, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x4d4>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7ff fac1 	bl	8002060 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7ff fabd 	bl	8002060 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	; 0x64
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e12a      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af4:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x4d4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x31a>
 8002b08:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a6f      	ldr	r2, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	e02d      	b.n	8002b72 <HAL_RCC_OscConfig+0x376>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x33c>
 8002b1e:	4b6b      	ldr	r3, [pc, #428]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a6a      	ldr	r2, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a67      	ldr	r2, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	e01c      	b.n	8002b72 <HAL_RCC_OscConfig+0x376>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x35e>
 8002b40:	4b62      	ldr	r3, [pc, #392]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a61      	ldr	r2, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b5f      	ldr	r3, [pc, #380]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a5e      	ldr	r2, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0x376>
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d015      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fa71 	bl	8002060 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7ff fa6d 	bl	8002060 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0d8      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ee      	beq.n	8002b82 <HAL_RCC_OscConfig+0x386>
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7ff fa5b 	bl	8002060 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7ff fa57 	bl	8002060 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0c2      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a3c      	ldr	r2, [pc, #240]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80ae 	beq.w	8002d48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d06d      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d14b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fa28 	bl	8002060 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7ff fa24 	bl	8002060 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e091      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	071b      	lsls	r3, r3, #28
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff f9f6 	bl	8002060 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7ff f9f2 	bl	8002060 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e05f      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x47c>
 8002c96:	e057      	b.n	8002d48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7ff f9dc 	bl	8002060 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7ff f9d8 	bl	8002060 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_OscConfig+0x4d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x4b0>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x54c>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cd4:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_RCC_OscConfig+0x558>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d030      	beq.n	8002d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d129      	bne.n	8002d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d122      	bne.n	8002d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d119      	bne.n	8002d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d10f      	bne.n	8002d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0d0      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4965      	ldr	r1, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d040      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d115      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e073      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06b      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4936      	ldr	r1, [pc, #216]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4c:	f7ff f908 	bl	8002060 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7ff f904 	bl	8002060 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e053      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 020c 	and.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d1eb      	bne.n	8002e54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d210      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1cc>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1d0>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f864 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08007a38 	.word	0x08007a38
 8002f28:	20000034 	.word	0x20000034
 8002f2c:	20000038 	.word	0x20000038

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	2300      	movs	r3, #0
 8002f42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80bd 	bhi.w	80030d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0b7      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f66:	60bb      	str	r3, [r7, #8]
      break;
 8002f68:	e0b7      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f6c:	60bb      	str	r3, [r7, #8]
      break;
 8002f6e:	e0b4      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d04d      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	ea02 0800 	and.w	r8, r2, r0
 8002f9e:	ea03 0901 	and.w	r9, r3, r1
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	014b      	lsls	r3, r1, #5
 8002fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fb4:	0142      	lsls	r2, r0, #5
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	ebb0 0008 	subs.w	r0, r0, r8
 8002fbe:	eb61 0109 	sbc.w	r1, r1, r9
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fd0:	0182      	lsls	r2, r0, #6
 8002fd2:	1a12      	subs	r2, r2, r0
 8002fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd8:	f04f 0000 	mov.w	r0, #0
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	00d9      	lsls	r1, r3, #3
 8002fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe6:	00d0      	lsls	r0, r2, #3
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	eb12 0208 	adds.w	r2, r2, r8
 8002ff0:	eb43 0309 	adc.w	r3, r3, r9
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	0259      	lsls	r1, r3, #9
 8002ffe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003002:	0250      	lsls	r0, r2, #9
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	f7fd f96c 	bl	80002f0 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e04a      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	461a      	mov	r2, r3
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	ea02 0400 	and.w	r4, r2, r0
 800303a:	ea03 0501 	and.w	r5, r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	014b      	lsls	r3, r1, #5
 800304c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003050:	0142      	lsls	r2, r0, #5
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	1b00      	subs	r0, r0, r4
 8003058:	eb61 0105 	sbc.w	r1, r1, r5
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	018b      	lsls	r3, r1, #6
 8003066:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800306a:	0182      	lsls	r2, r0, #6
 800306c:	1a12      	subs	r2, r2, r0
 800306e:	eb63 0301 	sbc.w	r3, r3, r1
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	00d9      	lsls	r1, r3, #3
 800307c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003080:	00d0      	lsls	r0, r2, #3
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	1912      	adds	r2, r2, r4
 8003088:	eb45 0303 	adc.w	r3, r5, r3
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	0299      	lsls	r1, r3, #10
 8003096:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800309a:	0290      	lsls	r0, r2, #10
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	f7fd f920 	bl	80002f0 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	60bb      	str	r3, [r7, #8]
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d6:	60bb      	str	r3, [r7, #8]
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	68bb      	ldr	r3, [r7, #8]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	007a1200 	.word	0x007a1200

080030f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_RCC_GetHCLKFreq+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000034 	.word	0x20000034

0800310c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003110:	f7ff fff0 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0a9b      	lsrs	r3, r3, #10
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	08007a48 	.word	0x08007a48

08003134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003138:	f7ff ffdc 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0b5b      	lsrs	r3, r3, #13
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08007a48 	.word	0x08007a48

0800315c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003184:	4b69      	ldr	r3, [pc, #420]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a68      	ldr	r2, [pc, #416]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800318e:	6093      	str	r3, [r2, #8]
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	4964      	ldr	r1, [pc, #400]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	4959      	ldr	r1, [pc, #356]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	494a      	ldr	r1, [pc, #296]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800322e:	2301      	movs	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 808b 	beq.w	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	4a39      	ldr	r2, [pc, #228]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	; 0x40
 800324c:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003258:	4b35      	ldr	r3, [pc, #212]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003264:	f7fe fefc 	bl	8002060 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fe fef8 	bl	8002060 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e38f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d035      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d02e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b2:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d114      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fec0 	bl	8002060 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe febc 	bl	8002060 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e351      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ee      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003312:	d111      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003322:	400b      	ands	r3, r1
 8003324:	4901      	ldr	r1, [pc, #4]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
 800332a:	e00b      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
 8003334:	0ffffcff 	.word	0x0ffffcff
 8003338:	4bb3      	ldr	r3, [pc, #716]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4ab2      	ldr	r2, [pc, #712]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	4bb0      	ldr	r3, [pc, #704]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003350:	49ad      	ldr	r1, [pc, #692]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003352:	4313      	orrs	r3, r2
 8003354:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d010      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003362:	4ba9      	ldr	r3, [pc, #676]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003368:	4aa7      	ldr	r2, [pc, #668]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003372:	4ba5      	ldr	r3, [pc, #660]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003374:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	49a2      	ldr	r1, [pc, #648]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003390:	4b9d      	ldr	r3, [pc, #628]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339e:	499a      	ldr	r1, [pc, #616]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b2:	4b95      	ldr	r3, [pc, #596]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c0:	4991      	ldr	r1, [pc, #580]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d4:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e2:	4989      	ldr	r1, [pc, #548]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033f6:	4b84      	ldr	r3, [pc, #528]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	4980      	ldr	r1, [pc, #512]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003418:	4b7b      	ldr	r3, [pc, #492]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4978      	ldr	r1, [pc, #480]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800343a:	4b73      	ldr	r3, [pc, #460]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f023 020c 	bic.w	r2, r3, #12
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	496f      	ldr	r1, [pc, #444]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800345c:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	4967      	ldr	r1, [pc, #412]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800347e:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	495e      	ldr	r1, [pc, #376]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034a0:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	4956      	ldr	r1, [pc, #344]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034c2:	4b51      	ldr	r3, [pc, #324]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	494d      	ldr	r1, [pc, #308]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034e4:	4b48      	ldr	r3, [pc, #288]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	4945      	ldr	r1, [pc, #276]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	493c      	ldr	r1, [pc, #240]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003528:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003536:	4934      	ldr	r1, [pc, #208]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800354a:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003558:	492b      	ldr	r1, [pc, #172]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003598:	491b      	ldr	r1, [pc, #108]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035bc:	4912      	ldr	r1, [pc, #72]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e0:	4909      	ldr	r1, [pc, #36]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00f      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	e002      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	4986      	ldr	r1, [pc, #536]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003620:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003626:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003630:	497d      	ldr	r1, [pc, #500]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d006      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80d6 	beq.w	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800364c:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe fd02 	bl	8002060 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003660:	f7fe fcfe 	bl	8002060 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e195      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003672:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003692:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	0e1b      	lsrs	r3, r3, #24
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	019a      	lsls	r2, r3, #6
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	4958      	ldr	r1, [pc, #352]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f8:	d129      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036fa:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003708:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	0f1b      	lsrs	r3, r3, #28
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	019a      	lsls	r2, r3, #6
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	061b      	lsls	r3, r3, #24
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	493e      	ldr	r1, [pc, #248]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800373c:	f023 021f 	bic.w	r2, r3, #31
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	3b01      	subs	r3, #1
 8003746:	4938      	ldr	r1, [pc, #224]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01d      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800375a:	4b33      	ldr	r3, [pc, #204]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003760:	0e1b      	lsrs	r3, r3, #24
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376e:	0f1b      	lsrs	r3, r3, #28
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	019a      	lsls	r2, r3, #6
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	431a      	orrs	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	061b      	lsls	r3, r3, #24
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	071b      	lsls	r3, r3, #28
 800378e:	4926      	ldr	r1, [pc, #152]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d011      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	019a      	lsls	r2, r3, #6
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	071b      	lsls	r3, r3, #28
 80037be:	491a      	ldr	r1, [pc, #104]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d2:	f7fe fc45 	bl	8002060 <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037da:	f7fe fc41 	bl	8002060 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b64      	cmp	r3, #100	; 0x64
 80037e6:	d901      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0d8      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 80ce 	bne.w	800399c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a08      	ldr	r2, [pc, #32]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fe fc28 	bl	8002060 <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003812:	e00b      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003814:	f7fe fc24 	bl	8002060 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d904      	bls.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0bb      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800382c:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003838:	d0ec      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02e      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d12a      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003870:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	019a      	lsls	r2, r3, #6
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	4944      	ldr	r1, [pc, #272]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800389e:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	493d      	ldr	r1, [pc, #244]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038cc:	d11d      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	0e1b      	lsrs	r3, r3, #24
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	0f1b      	lsrs	r3, r3, #28
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	019a      	lsls	r2, r3, #6
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	4929      	ldr	r1, [pc, #164]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d028      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	019a      	lsls	r2, r3, #6
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	431a      	orrs	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	071b      	lsls	r3, r3, #28
 800394a:	4917      	ldr	r1, [pc, #92]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4911      	ldr	r1, [pc, #68]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fe fb74 	bl	8002060 <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800397c:	f7fe fb70 	bl	8002060 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e007      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399a:	d1ef      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800

080039ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e09d      	b.n	8003afa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ce:	d009      	beq.n	80039e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
 80039d6:	e005      	b.n	80039e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd ff58 	bl	80018b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a24:	d902      	bls.n	8003a2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e002      	b.n	8003a32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a3a:	d007      	beq.n	8003a4c <HAL_SPI_Init+0xa0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a44:	d002      	beq.n	8003a4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	ea42 0103 	orr.w	r1, r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	f003 0204 	and.w	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ac8:	ea42 0103 	orr.w	r1, r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_Transmit+0x22>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e158      	b.n	8003dd6 <HAL_SPI_Transmit+0x2d4>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b2c:	f7fe fa98 	bl	8002060 <HAL_GetTick>
 8003b30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b46:	e13d      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_SPI_Transmit+0x52>
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b58:	e134      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d007      	beq.n	8003be4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bec:	d94b      	bls.n	8003c86 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0xfa>
 8003bf6:	8afb      	ldrh	r3, [r7, #22]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d13e      	bne.n	8003c7a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c20:	e02b      	b.n	8003c7a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d112      	bne.n	8003c56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c54:	e011      	b.n	8003c7a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c56:	f7fe fa03 	bl	8002060 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d803      	bhi.n	8003c6e <HAL_SPI_Transmit+0x16c>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d102      	bne.n	8003c74 <HAL_SPI_Transmit+0x172>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c78:	e0a4      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ce      	bne.n	8003c22 <HAL_SPI_Transmit+0x120>
 8003c84:	e07c      	b.n	8003d80 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Transmit+0x192>
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d170      	bne.n	8003d76 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d912      	bls.n	8003cc4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b02      	subs	r3, #2
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc2:	e058      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	7812      	ldrb	r2, [r2, #0]
 8003cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cea:	e044      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d12b      	bne.n	8003d52 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d912      	bls.n	8003d2a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b02      	subs	r3, #2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d28:	e025      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d50:	e011      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d52:	f7fe f985 	bl	8002060 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d803      	bhi.n	8003d6a <HAL_SPI_Transmit+0x268>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d102      	bne.n	8003d70 <HAL_SPI_Transmit+0x26e>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d74:	e026      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1b5      	bne.n	8003cec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	6839      	ldr	r1, [r7, #0]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fc7b 	bl	8004680 <SPI_EndRxTxTransaction>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e000      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08a      	sub	sp, #40	; 0x28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dec:	2301      	movs	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x26>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e1fb      	b.n	80041fc <HAL_SPI_TransmitReceive+0x41e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0c:	f7fe f928 	bl	8002060 <HAL_GetTick>
 8003e10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e28:	7efb      	ldrb	r3, [r7, #27]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d00e      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x6e>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e34:	d106      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x66>
 8003e3e:	7efb      	ldrb	r3, [r7, #27]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d003      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e4a:	e1cd      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x80>
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e64:	e1c0      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d003      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2205      	movs	r2, #5
 8003e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ebc:	d802      	bhi.n	8003ec4 <HAL_SPI_TransmitReceive+0xe6>
 8003ebe:	8a3b      	ldrh	r3, [r7, #16]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d908      	bls.n	8003ed6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	e007      	b.n	8003ee6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d007      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f0c:	d97c      	bls.n	8004008 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x13e>
 8003f16:	8a7b      	ldrh	r3, [r7, #18]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d169      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f40:	e056      	b.n	8003ff0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x1aa>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_SPI_TransmitReceive+0x1aa>
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d113      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d11c      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x1f2>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fd0:	f7fe f846 	bl	8002060 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d807      	bhi.n	8003ff0 <HAL_SPI_TransmitReceive+0x212>
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d003      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003fee:	e0fb      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1a3      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x164>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d19d      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x164>
 8004006:	e0df      	b.n	80041c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x23a>
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	2b01      	cmp	r3, #1
 8004014:	f040 80cb 	bne.w	80041ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d912      	bls.n	8004048 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	881a      	ldrh	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b02      	subs	r3, #2
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004046:	e0b2      	b.n	80041ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406e:	e09e      	b.n	80041ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d134      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x30a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02f      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x30a>
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	2b01      	cmp	r3, #1
 800408c:	d12c      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d912      	bls.n	80040be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b02      	subs	r3, #2
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040bc:	e012      	b.n	80040e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d148      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x3aa>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d042      	beq.n	8004188 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d923      	bls.n	8004156 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	b292      	uxth	r2, r2
 800411a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b02      	subs	r3, #2
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d81f      	bhi.n	8004184 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	e016      	b.n	8004184 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f103 020c 	add.w	r2, r3, #12
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004184:	2301      	movs	r3, #1
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004188:	f7fd ff6a 	bl	8002060 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004194:	429a      	cmp	r2, r3
 8004196:	d803      	bhi.n	80041a0 <HAL_SPI_TransmitReceive+0x3c2>
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d102      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x3c8>
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041ac:	e01c      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f af5b 	bne.w	8004070 <HAL_SPI_TransmitReceive+0x292>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f47f af54 	bne.w	8004070 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fa57 	bl	8004680 <SPI_EndRxTxTransaction>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	661a      	str	r2, [r3, #96]	; 0x60
 80041e4:	e000      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80041e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3728      	adds	r7, #40	; 0x28
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
    return;
 8004246:	e0d7      	b.n	80043f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_SPI_IRQHandler+0x66>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	09db      	lsrs	r3, r3, #7
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
    return;
 8004268:	e0c6      	b.n	80043f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_SPI_IRQHandler+0x8c>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80b4 	beq.w	80043f8 <HAL_SPI_IRQHandler+0x1f4>
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80ad 	beq.w	80043f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	099b      	lsrs	r3, r3, #6
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d023      	beq.n	80042f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d011      	beq.n	80042da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	f043 0204 	orr.w	r2, r3, #4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	e00b      	b.n	80042f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	693b      	ldr	r3, [r7, #16]
        return;
 80042f0:	e082      	b.n	80043f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d014      	beq.n	8004328 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004338:	f043 0208 	orr.w	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04f      	beq.n	80043f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004364:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <HAL_SPI_IRQHandler+0x17e>
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d034      	beq.n	80043ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0203 	bic.w	r2, r2, #3
 8004390:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	2b00      	cmp	r3, #0
 8004398:	d011      	beq.n	80043be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_SPI_IRQHandler+0x1fc>)
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe f80b 	bl	80023c2 <HAL_DMA_Abort_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_SPI_IRQHandler+0x1fc>)
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fff5 	bl	80023c2 <HAL_DMA_Abort_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80043ea:	e003      	b.n	80043f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f809 	bl	8004404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043f2:	e000      	b.n	80043f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80043f4:	bf00      	nop
    return;
 80043f6:	bf00      	nop
  }
}
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	08004419 	.word	0x08004419

08004404 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff ffe5 	bl	8004404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004454:	f7fd fe04 	bl	8002060 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004464:	f7fd fdfc 	bl	8002060 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	015b      	lsls	r3, r3, #5
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	e054      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d050      	beq.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004484:	f7fd fdec 	bl	8002060 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d111      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d004      	beq.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c6:	d107      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d10f      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e017      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d19b      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000034 	.word	0x20000034

08004554 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004566:	f7fd fd7b 	bl	8002060 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	4413      	add	r3, r2
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004576:	f7fd fd73 	bl	8002060 <HAL_GetTick>
 800457a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004584:	4b3d      	ldr	r3, [pc, #244]	; (800467c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00da      	lsls	r2, r3, #3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	0d1b      	lsrs	r3, r3, #20
 8004594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800459c:	e060      	b.n	8004660 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045a4:	d107      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d050      	beq.n	8004660 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045be:	f7fd fd4f 	bl	8002060 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d902      	bls.n	80045d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d13d      	bne.n	8004650 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ec:	d111      	bne.n	8004612 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f6:	d004      	beq.n	8004602 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d107      	bne.n	8004612 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461a:	d10f      	bne.n	800463c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800463a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e010      	b.n	8004672 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3b01      	subs	r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d196      	bne.n	800459e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3728      	adds	r7, #40	; 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000034 	.word	0x20000034

08004680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff ff5b 	bl	8004554 <SPI_WaitFifoStateUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e046      	b.n	8004742 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <SPI_EndRxTxTransaction+0xcc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <SPI_EndRxTxTransaction+0xd0>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0d5b      	lsrs	r3, r3, #21
 80046c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d112      	bne.n	80046fa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff feb0 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e023      	b.n	8004742 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3b01      	subs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d0f2      	beq.n	80046fa <SPI_EndRxTxTransaction+0x7a>
 8004714:	e000      	b.n	8004718 <SPI_EndRxTxTransaction+0x98>
        break;
 8004716:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff15 	bl	8004554 <SPI_WaitFifoStateUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e000      	b.n	8004742 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000034 	.word	0x20000034
 8004750:	165e9f81 	.word	0x165e9f81

08004754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e049      	b.n	80047fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd facc 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fd30 	bl	80051f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e054      	b.n	80048c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d022      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d01d      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	; (80048dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x80>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d115      	bne.n	80048b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <HAL_TIM_Base_Start_IT+0xec>)
 800488c:	4013      	ands	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b06      	cmp	r3, #6
 8004894:	d015      	beq.n	80048c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d011      	beq.n	80048c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	e008      	b.n	80048c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e000      	b.n	80048c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40010400 	.word	0x40010400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40001800 	.word	0x40001800
 80048f0:	00010007 	.word	0x00010007

080048f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e049      	b.n	800499a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f841 	bl	80049a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fc60 	bl	80051f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start+0x24>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e03c      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d109      	bne.n	80049f6 <HAL_TIM_PWM_Start+0x3e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e02f      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d109      	bne.n	8004a10 <HAL_TIM_PWM_Start+0x58>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e022      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d109      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x72>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e015      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x8c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e008      	b.n	8004a56 <HAL_TIM_PWM_Start+0x9e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e092      	b.n	8004b84 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xb6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6c:	e023      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xc6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	e01b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0xd6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8c:	e013      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xe6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a9c:	e00b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0xf6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aac:	e003      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xfe>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2201      	movs	r2, #1
 8004abc:	6839      	ldr	r1, [r7, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 ff32 	bl	8005928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_TIM_PWM_Start+0x1d4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_TIM_PWM_Start+0x120>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <HAL_TIM_PWM_Start+0x1d8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_TIM_PWM_Start+0x124>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_TIM_PWM_Start+0x126>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <HAL_TIM_PWM_Start+0x1d4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d01d      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <HAL_TIM_PWM_Start+0x1dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_TIM_PWM_Start+0x1e0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <HAL_TIM_PWM_Start+0x1e4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <HAL_TIM_PWM_Start+0x1d8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x18a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d115      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d015      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x1c8>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d011      	beq.n	8004b80 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6c:	e008      	b.n	8004b80 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40001800 	.word	0x40001800
 8004ba8:	00010007 	.word	0x00010007

08004bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0202 	mvn.w	r2, #2
 8004bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fae4 	bl	80051bc <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fad6 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fae7 	bl	80051d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0204 	mvn.w	r2, #4
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 faba 	bl	80051bc <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 faac 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fabd 	bl	80051d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0208 	mvn.w	r2, #8
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2204      	movs	r2, #4
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa90 	bl	80051bc <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa82 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fa93 	bl	80051d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0210 	mvn.w	r2, #16
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa66 	bl	80051bc <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa58 	bl	80051a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa69 	bl	80051d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0201 	mvn.w	r2, #1
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fa04 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b80      	cmp	r3, #128	; 0x80
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fea4 	bl	8005aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	d10e      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d107      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fe97 	bl	8005ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d10e      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d107      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fa17 	bl	80051e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d10e      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d107      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0220 	mvn.w	r2, #32
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fe57 	bl	8005a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e0ff      	b.n	800500a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b14      	cmp	r3, #20
 8004e16:	f200 80f0 	bhi.w	8004ffa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004ffb 	.word	0x08004ffb
 8004e28:	08004ffb 	.word	0x08004ffb
 8004e2c:	08004ffb 	.word	0x08004ffb
 8004e30:	08004eb5 	.word	0x08004eb5
 8004e34:	08004ffb 	.word	0x08004ffb
 8004e38:	08004ffb 	.word	0x08004ffb
 8004e3c:	08004ffb 	.word	0x08004ffb
 8004e40:	08004ef7 	.word	0x08004ef7
 8004e44:	08004ffb 	.word	0x08004ffb
 8004e48:	08004ffb 	.word	0x08004ffb
 8004e4c:	08004ffb 	.word	0x08004ffb
 8004e50:	08004f37 	.word	0x08004f37
 8004e54:	08004ffb 	.word	0x08004ffb
 8004e58:	08004ffb 	.word	0x08004ffb
 8004e5c:	08004ffb 	.word	0x08004ffb
 8004e60:	08004f79 	.word	0x08004f79
 8004e64:	08004ffb 	.word	0x08004ffb
 8004e68:	08004ffb 	.word	0x08004ffb
 8004e6c:	08004ffb 	.word	0x08004ffb
 8004e70:	08004fb9 	.word	0x08004fb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fa5c 	bl	8005338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6999      	ldr	r1, [r3, #24]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	619a      	str	r2, [r3, #24]
      break;
 8004eb2:	e0a5      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 faae 	bl	800541c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6999      	ldr	r1, [r3, #24]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	619a      	str	r2, [r3, #24]
      break;
 8004ef4:	e084      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fb05 	bl	800550c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0208 	orr.w	r2, r2, #8
 8004f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0204 	bic.w	r2, r2, #4
 8004f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	61da      	str	r2, [r3, #28]
      break;
 8004f34:	e064      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fb5b 	bl	80055f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69d9      	ldr	r1, [r3, #28]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	021a      	lsls	r2, r3, #8
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	61da      	str	r2, [r3, #28]
      break;
 8004f76:	e043      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb92 	bl	80056a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0208 	orr.w	r2, r2, #8
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0204 	bic.w	r2, r2, #4
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fb6:	e023      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fbc4 	bl	800574c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ff8:	e002      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ffe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop

08005014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIM_ConfigClockSource+0x1c>
 800502c:	2302      	movs	r3, #2
 800502e:	e0b4      	b.n	800519a <HAL_TIM_ConfigClockSource+0x186>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <HAL_TIM_ConfigClockSource+0x190>)
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005068:	d03e      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0xd4>
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506e:	f200 8087 	bhi.w	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	f000 8086 	beq.w	8005186 <HAL_TIM_ConfigClockSource+0x172>
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d87f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d01a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xa6>
 8005084:	2b70      	cmp	r3, #112	; 0x70
 8005086:	d87b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d050      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x11a>
 800508c:	2b60      	cmp	r3, #96	; 0x60
 800508e:	d877      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d03c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xfa>
 8005094:	2b50      	cmp	r3, #80	; 0x50
 8005096:	d873      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d058      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x13a>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d86f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d064      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d86b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d060      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d867      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05c      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d05a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	e062      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f000 fc0d 	bl	80058e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
      break;
 80050e6:	e04f      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f000 fbf6 	bl	80058e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510a:	609a      	str	r2, [r3, #8]
      break;
 800510c:	e03c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fb6a 	bl	80057f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2150      	movs	r1, #80	; 0x50
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fbc3 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800512c:	e02c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fb89 	bl	8005852 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2160      	movs	r1, #96	; 0x60
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fbb3 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800514c:	e01c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	461a      	mov	r2, r3
 800515c:	f000 fb4a 	bl	80057f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fba3 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800516c:	e00c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 fb9a 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800517e:	e003      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e000      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	fffeff88 	.word	0xfffeff88

080051a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a40      	ldr	r2, [pc, #256]	; (800530c <TIM_Base_SetConfig+0x114>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d00f      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3d      	ldr	r2, [pc, #244]	; (8005310 <TIM_Base_SetConfig+0x118>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00b      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3c      	ldr	r2, [pc, #240]	; (8005314 <TIM_Base_SetConfig+0x11c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3b      	ldr	r2, [pc, #236]	; (8005318 <TIM_Base_SetConfig+0x120>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a3a      	ldr	r2, [pc, #232]	; (800531c <TIM_Base_SetConfig+0x124>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2f      	ldr	r2, [pc, #188]	; (800530c <TIM_Base_SetConfig+0x114>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02b      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d027      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2c      	ldr	r2, [pc, #176]	; (8005310 <TIM_Base_SetConfig+0x118>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d023      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2b      	ldr	r2, [pc, #172]	; (8005314 <TIM_Base_SetConfig+0x11c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01f      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <TIM_Base_SetConfig+0x120>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d01b      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a29      	ldr	r2, [pc, #164]	; (800531c <TIM_Base_SetConfig+0x124>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d017      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a28      	ldr	r2, [pc, #160]	; (8005320 <TIM_Base_SetConfig+0x128>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a27      	ldr	r2, [pc, #156]	; (8005324 <TIM_Base_SetConfig+0x12c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00f      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <TIM_Base_SetConfig+0x130>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a25      	ldr	r2, [pc, #148]	; (800532c <TIM_Base_SetConfig+0x134>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a24      	ldr	r2, [pc, #144]	; (8005330 <TIM_Base_SetConfig+0x138>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a23      	ldr	r2, [pc, #140]	; (8005334 <TIM_Base_SetConfig+0x13c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d108      	bne.n	80052bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a0a      	ldr	r2, [pc, #40]	; (800530c <TIM_Base_SetConfig+0x114>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0xf8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <TIM_Base_SetConfig+0x124>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d103      	bne.n	80052f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	615a      	str	r2, [r3, #20]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40001800 	.word	0x40001800
 8005330:	40001c00 	.word	0x40001c00
 8005334:	40002000 	.word	0x40002000

08005338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0201 	bic.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <TIM_OC1_SetConfig+0xd8>)
 8005364:	4013      	ands	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a21      	ldr	r2, [pc, #132]	; (8005414 <TIM_OC1_SetConfig+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC1_SetConfig+0x64>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a20      	ldr	r2, [pc, #128]	; (8005418 <TIM_OC1_SetConfig+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0308 	bic.w	r3, r3, #8
 80053a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <TIM_OC1_SetConfig+0xdc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC1_SetConfig+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a15      	ldr	r2, [pc, #84]	; (8005418 <TIM_OC1_SetConfig+0xe0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d111      	bne.n	80053ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	fffeff8f 	.word	0xfffeff8f
 8005414:	40010000 	.word	0x40010000
 8005418:	40010400 	.word	0x40010400

0800541c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0210 	bic.w	r2, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <TIM_OC2_SetConfig+0xe4>)
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0320 	bic.w	r3, r3, #32
 8005466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a23      	ldr	r2, [pc, #140]	; (8005504 <TIM_OC2_SetConfig+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC2_SetConfig+0x68>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a22      	ldr	r2, [pc, #136]	; (8005508 <TIM_OC2_SetConfig+0xec>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10d      	bne.n	80054a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <TIM_OC2_SetConfig+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0x94>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a17      	ldr	r2, [pc, #92]	; (8005508 <TIM_OC2_SetConfig+0xec>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d113      	bne.n	80054d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	feff8fff 	.word	0xfeff8fff
 8005504:	40010000 	.word	0x40010000
 8005508:	40010400 	.word	0x40010400

0800550c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <TIM_OC3_SetConfig+0xe0>)
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <TIM_OC3_SetConfig+0xe4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC3_SetConfig+0x66>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <TIM_OC3_SetConfig+0xe8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10d      	bne.n	800558e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800558c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <TIM_OC3_SetConfig+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_OC3_SetConfig+0x92>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <TIM_OC3_SetConfig+0xe8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d113      	bne.n	80055c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	fffeff8f 	.word	0xfffeff8f
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40010400 	.word	0x40010400

080055f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4b1e      	ldr	r3, [pc, #120]	; (800569c <TIM_OC4_SetConfig+0xa4>)
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	031b      	lsls	r3, r3, #12
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <TIM_OC4_SetConfig+0xa8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_OC4_SetConfig+0x68>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <TIM_OC4_SetConfig+0xac>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d109      	bne.n	8005674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	019b      	lsls	r3, r3, #6
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	feff8fff 	.word	0xfeff8fff
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <TIM_OC5_SetConfig+0x98>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a12      	ldr	r2, [pc, #72]	; (8005744 <TIM_OC5_SetConfig+0x9c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC5_SetConfig+0x5e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a11      	ldr	r2, [pc, #68]	; (8005748 <TIM_OC5_SetConfig+0xa0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d109      	bne.n	800571a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	fffeff8f 	.word	0xfffeff8f
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400

0800574c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <TIM_OC6_SetConfig+0x9c>)
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800578e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	051b      	lsls	r3, r3, #20
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <TIM_OC6_SetConfig+0xa0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC6_SetConfig+0x60>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_OC6_SetConfig+0xa4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	feff8fff 	.word	0xfeff8fff
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40010400 	.word	0x40010400

080057f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 030a 	bic.w	r3, r3, #10
 8005830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800587c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f043 0307 	orr.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	431a      	orrs	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	609a      	str	r2, [r3, #8]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2201      	movs	r2, #1
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	43db      	mvns	r3, r3
 800594a:	401a      	ands	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	431a      	orrs	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e06d      	b.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a30      	ldr	r2, [pc, #192]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d108      	bne.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a20      	ldr	r2, [pc, #128]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d022      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fe:	d01d      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d10c      	bne.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40010400 	.word	0x40010400
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40001800 	.word	0x40001800

08005a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e040      	b.n	8005b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc f9d4 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2224      	movs	r2, #36	; 0x24
 8005af8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fc18 	bl	8006340 <UART_SetConfig>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e022      	b.n	8005b60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fe6e 	bl	8006804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fef5 	bl	8006948 <UART_CheckIdleState>
 8005b5e:	4603      	mov	r3, r0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f040 8081 	bne.w	8005c84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <HAL_UART_Transmit+0x26>
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e079      	b.n	8005c86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UART_Transmit+0x38>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e072      	b.n	8005c86 <HAL_UART_Transmit+0x11e>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2221      	movs	r2, #33	; 0x21
 8005bb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb6:	f7fc fa53 	bl	8002060 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd4:	d108      	bne.n	8005be8 <HAL_UART_Transmit+0x80>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	e003      	b.n	8005bf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bf8:	e02c      	b.n	8005c54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	2180      	movs	r1, #128	; 0x80
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fee8 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e038      	b.n	8005c86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	e007      	b.n	8005c42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1cc      	bne.n	8005bfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2200      	movs	r2, #0
 8005c68:	2140      	movs	r1, #64	; 0x40
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 feb5 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e005      	b.n	8005c86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b08a      	sub	sp, #40	; 0x28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d13d      	bne.n	8005d20 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_UART_Receive_IT+0x22>
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e036      	b.n	8005d22 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Receive_IT+0x34>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e02f      	b.n	8005d22 <HAL_UART_Receive_IT+0x94>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d018      	beq.n	8005d10 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	613b      	str	r3, [r7, #16]
   return(result);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e6      	bne.n	8005cde <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	461a      	mov	r2, r3
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 ff24 	bl	8006b64 <UART_Start_Receive_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e000      	b.n	8005d22 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3728      	adds	r7, #40	; 0x28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0ba      	sub	sp, #232	; 0xe8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d56:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00f      	beq.n	8005d94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 82a4 	beq.w	80062d2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
      }
      return;
 8005d92:	e29e      	b.n	80062d2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8117 	beq.w	8005fcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005daa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dae:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_UART_IRQHandler+0x298>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 810a 	beq.w	8005fcc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d011      	beq.n	8005de8 <HAL_UART_IRQHandler+0xbc>
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d011      	beq.n	8005e18 <HAL_UART_IRQHandler+0xec>
 8005df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2202      	movs	r2, #2
 8005e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d011      	beq.n	8005e48 <HAL_UART_IRQHandler+0x11c>
 8005e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2204      	movs	r2, #4
 8005e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2208      	movs	r2, #8
 8005e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e7a:	f043 0208 	orr.w	r2, r3, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d012      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x18a>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 820a 	beq.w	80062d6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d005      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d04f      	beq.n	8005fae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fef2 	bl	8006cf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d141      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1d9      	bne.n	8005f22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <HAL_UART_IRQHandler+0x29c>)
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fc fa1d 	bl	80023c2 <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d017      	beq.n	8005fbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	e00f      	b.n	8005fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9ae 	bl	8006300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e00b      	b.n	8005fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9aa 	bl	8006300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e007      	b.n	8005fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9a6 	bl	8006300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005fbc:	e18b      	b.n	80062d6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbe:	bf00      	nop
    return;
 8005fc0:	e189      	b.n	80062d6 <HAL_UART_IRQHandler+0x5aa>
 8005fc2:	bf00      	nop
 8005fc4:	04000120 	.word	0x04000120
 8005fc8:	08006dbf 	.word	0x08006dbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	f040 8144 	bne.w	800625e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 813d 	beq.w	800625e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8136 	beq.w	800625e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	f040 80b2 	bne.w	800616e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006016:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 815d 	beq.w	80062da <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800602a:	429a      	cmp	r2, r3
 800602c:	f080 8155 	bcs.w	80062da <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006044:	f000 8085 	beq.w	8006152 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800605c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006076:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800607e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800608a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1da      	bne.n	8006048 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3308      	adds	r3, #8
 80060b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e1      	bne.n	8006092 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3308      	adds	r3, #8
 80060ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e3      	bne.n	80060ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006122:	f023 0310 	bic.w	r3, r3, #16
 8006126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006134:	65bb      	str	r3, [r7, #88]	; 0x58
 8006136:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800613a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e4      	bne.n	8006112 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614c:	4618      	mov	r0, r3
 800614e:	f7fc f8c8 	bl	80022e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800615e:	b29b      	uxth	r3, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8d4 	bl	8006314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800616c:	e0b5      	b.n	80062da <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800617a:	b29b      	uxth	r3, r3
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80a7 	beq.w	80062de <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a2 	beq.w	80062de <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
 80061be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e4      	bne.n	800619a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3308      	adds	r3, #8
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	623b      	str	r3, [r7, #32]
   return(result);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061f4:	633a      	str	r2, [r7, #48]	; 0x30
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e3      	bne.n	80061d0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60fb      	str	r3, [r7, #12]
   return(result);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69b9      	ldr	r1, [r7, #24]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	617b      	str	r3, [r7, #20]
   return(result);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e4      	bne.n	800621a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f85c 	bl	8006314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800625c:	e03f      	b.n	80062de <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00e      	beq.n	8006288 <HAL_UART_IRQHandler+0x55c>
 800626a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800627e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f853 	bl	800632c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006286:	e02d      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01c      	beq.n	80062e2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
    }
    return;
 80062b0:	e017      	b.n	80062e2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d012      	beq.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fd8d 	bl	8006dea <UART_EndTransmit_IT>
    return;
 80062d0:	e008      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80062d2:	bf00      	nop
 80062d4:	e006      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80062d6:	bf00      	nop
 80062d8:	e004      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80062da:	bf00      	nop
 80062dc:	e002      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80062e2:	bf00      	nop
  }

}
 80062e4:	37e8      	adds	r7, #232	; 0xe8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop

080062ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4ba7      	ldr	r3, [pc, #668]	; (8006608 <UART_SetConfig+0x2c8>)
 800636c:	4013      	ands	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	6979      	ldr	r1, [r7, #20]
 8006374:	430b      	orrs	r3, r1
 8006376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a95      	ldr	r2, [pc, #596]	; (800660c <UART_SetConfig+0x2cc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d120      	bne.n	80063fe <UART_SetConfig+0xbe>
 80063bc:	4b94      	ldr	r3, [pc, #592]	; (8006610 <UART_SetConfig+0x2d0>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d816      	bhi.n	80063f8 <UART_SetConfig+0xb8>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <UART_SetConfig+0x90>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063e1 	.word	0x080063e1
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080063e7 	.word	0x080063e7
 80063dc:	080063f3 	.word	0x080063f3
 80063e0:	2301      	movs	r3, #1
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e14f      	b.n	8006686 <UART_SetConfig+0x346>
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e14c      	b.n	8006686 <UART_SetConfig+0x346>
 80063ec:	2304      	movs	r3, #4
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e149      	b.n	8006686 <UART_SetConfig+0x346>
 80063f2:	2308      	movs	r3, #8
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e146      	b.n	8006686 <UART_SetConfig+0x346>
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e143      	b.n	8006686 <UART_SetConfig+0x346>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a84      	ldr	r2, [pc, #528]	; (8006614 <UART_SetConfig+0x2d4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d132      	bne.n	800646e <UART_SetConfig+0x12e>
 8006408:	4b81      	ldr	r3, [pc, #516]	; (8006610 <UART_SetConfig+0x2d0>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	2b0c      	cmp	r3, #12
 8006414:	d828      	bhi.n	8006468 <UART_SetConfig+0x128>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0xdc>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006451 	.word	0x08006451
 8006420:	08006469 	.word	0x08006469
 8006424:	08006469 	.word	0x08006469
 8006428:	08006469 	.word	0x08006469
 800642c:	0800645d 	.word	0x0800645d
 8006430:	08006469 	.word	0x08006469
 8006434:	08006469 	.word	0x08006469
 8006438:	08006469 	.word	0x08006469
 800643c:	08006457 	.word	0x08006457
 8006440:	08006469 	.word	0x08006469
 8006444:	08006469 	.word	0x08006469
 8006448:	08006469 	.word	0x08006469
 800644c:	08006463 	.word	0x08006463
 8006450:	2300      	movs	r3, #0
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e117      	b.n	8006686 <UART_SetConfig+0x346>
 8006456:	2302      	movs	r3, #2
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e114      	b.n	8006686 <UART_SetConfig+0x346>
 800645c:	2304      	movs	r3, #4
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e111      	b.n	8006686 <UART_SetConfig+0x346>
 8006462:	2308      	movs	r3, #8
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e10e      	b.n	8006686 <UART_SetConfig+0x346>
 8006468:	2310      	movs	r3, #16
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e10b      	b.n	8006686 <UART_SetConfig+0x346>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a69      	ldr	r2, [pc, #420]	; (8006618 <UART_SetConfig+0x2d8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d120      	bne.n	80064ba <UART_SetConfig+0x17a>
 8006478:	4b65      	ldr	r3, [pc, #404]	; (8006610 <UART_SetConfig+0x2d0>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006482:	2b30      	cmp	r3, #48	; 0x30
 8006484:	d013      	beq.n	80064ae <UART_SetConfig+0x16e>
 8006486:	2b30      	cmp	r3, #48	; 0x30
 8006488:	d814      	bhi.n	80064b4 <UART_SetConfig+0x174>
 800648a:	2b20      	cmp	r3, #32
 800648c:	d009      	beq.n	80064a2 <UART_SetConfig+0x162>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d810      	bhi.n	80064b4 <UART_SetConfig+0x174>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <UART_SetConfig+0x15c>
 8006496:	2b10      	cmp	r3, #16
 8006498:	d006      	beq.n	80064a8 <UART_SetConfig+0x168>
 800649a:	e00b      	b.n	80064b4 <UART_SetConfig+0x174>
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e0f1      	b.n	8006686 <UART_SetConfig+0x346>
 80064a2:	2302      	movs	r3, #2
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e0ee      	b.n	8006686 <UART_SetConfig+0x346>
 80064a8:	2304      	movs	r3, #4
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e0eb      	b.n	8006686 <UART_SetConfig+0x346>
 80064ae:	2308      	movs	r3, #8
 80064b0:	77fb      	strb	r3, [r7, #31]
 80064b2:	e0e8      	b.n	8006686 <UART_SetConfig+0x346>
 80064b4:	2310      	movs	r3, #16
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e0e5      	b.n	8006686 <UART_SetConfig+0x346>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a57      	ldr	r2, [pc, #348]	; (800661c <UART_SetConfig+0x2dc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d120      	bne.n	8006506 <UART_SetConfig+0x1c6>
 80064c4:	4b52      	ldr	r3, [pc, #328]	; (8006610 <UART_SetConfig+0x2d0>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064ce:	2bc0      	cmp	r3, #192	; 0xc0
 80064d0:	d013      	beq.n	80064fa <UART_SetConfig+0x1ba>
 80064d2:	2bc0      	cmp	r3, #192	; 0xc0
 80064d4:	d814      	bhi.n	8006500 <UART_SetConfig+0x1c0>
 80064d6:	2b80      	cmp	r3, #128	; 0x80
 80064d8:	d009      	beq.n	80064ee <UART_SetConfig+0x1ae>
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d810      	bhi.n	8006500 <UART_SetConfig+0x1c0>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <UART_SetConfig+0x1a8>
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d006      	beq.n	80064f4 <UART_SetConfig+0x1b4>
 80064e6:	e00b      	b.n	8006500 <UART_SetConfig+0x1c0>
 80064e8:	2300      	movs	r3, #0
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e0cb      	b.n	8006686 <UART_SetConfig+0x346>
 80064ee:	2302      	movs	r3, #2
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e0c8      	b.n	8006686 <UART_SetConfig+0x346>
 80064f4:	2304      	movs	r3, #4
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e0c5      	b.n	8006686 <UART_SetConfig+0x346>
 80064fa:	2308      	movs	r3, #8
 80064fc:	77fb      	strb	r3, [r7, #31]
 80064fe:	e0c2      	b.n	8006686 <UART_SetConfig+0x346>
 8006500:	2310      	movs	r3, #16
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e0bf      	b.n	8006686 <UART_SetConfig+0x346>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a45      	ldr	r2, [pc, #276]	; (8006620 <UART_SetConfig+0x2e0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d125      	bne.n	800655c <UART_SetConfig+0x21c>
 8006510:	4b3f      	ldr	r3, [pc, #252]	; (8006610 <UART_SetConfig+0x2d0>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800651e:	d017      	beq.n	8006550 <UART_SetConfig+0x210>
 8006520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006524:	d817      	bhi.n	8006556 <UART_SetConfig+0x216>
 8006526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652a:	d00b      	beq.n	8006544 <UART_SetConfig+0x204>
 800652c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006530:	d811      	bhi.n	8006556 <UART_SetConfig+0x216>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <UART_SetConfig+0x1fe>
 8006536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653a:	d006      	beq.n	800654a <UART_SetConfig+0x20a>
 800653c:	e00b      	b.n	8006556 <UART_SetConfig+0x216>
 800653e:	2300      	movs	r3, #0
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e0a0      	b.n	8006686 <UART_SetConfig+0x346>
 8006544:	2302      	movs	r3, #2
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e09d      	b.n	8006686 <UART_SetConfig+0x346>
 800654a:	2304      	movs	r3, #4
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e09a      	b.n	8006686 <UART_SetConfig+0x346>
 8006550:	2308      	movs	r3, #8
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e097      	b.n	8006686 <UART_SetConfig+0x346>
 8006556:	2310      	movs	r3, #16
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e094      	b.n	8006686 <UART_SetConfig+0x346>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a30      	ldr	r2, [pc, #192]	; (8006624 <UART_SetConfig+0x2e4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d125      	bne.n	80065b2 <UART_SetConfig+0x272>
 8006566:	4b2a      	ldr	r3, [pc, #168]	; (8006610 <UART_SetConfig+0x2d0>)
 8006568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006574:	d017      	beq.n	80065a6 <UART_SetConfig+0x266>
 8006576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800657a:	d817      	bhi.n	80065ac <UART_SetConfig+0x26c>
 800657c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006580:	d00b      	beq.n	800659a <UART_SetConfig+0x25a>
 8006582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006586:	d811      	bhi.n	80065ac <UART_SetConfig+0x26c>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <UART_SetConfig+0x254>
 800658c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006590:	d006      	beq.n	80065a0 <UART_SetConfig+0x260>
 8006592:	e00b      	b.n	80065ac <UART_SetConfig+0x26c>
 8006594:	2301      	movs	r3, #1
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e075      	b.n	8006686 <UART_SetConfig+0x346>
 800659a:	2302      	movs	r3, #2
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e072      	b.n	8006686 <UART_SetConfig+0x346>
 80065a0:	2304      	movs	r3, #4
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e06f      	b.n	8006686 <UART_SetConfig+0x346>
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e06c      	b.n	8006686 <UART_SetConfig+0x346>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e069      	b.n	8006686 <UART_SetConfig+0x346>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <UART_SetConfig+0x2e8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d137      	bne.n	800662c <UART_SetConfig+0x2ec>
 80065bc:	4b14      	ldr	r3, [pc, #80]	; (8006610 <UART_SetConfig+0x2d0>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ca:	d017      	beq.n	80065fc <UART_SetConfig+0x2bc>
 80065cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065d0:	d817      	bhi.n	8006602 <UART_SetConfig+0x2c2>
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	d00b      	beq.n	80065f0 <UART_SetConfig+0x2b0>
 80065d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065dc:	d811      	bhi.n	8006602 <UART_SetConfig+0x2c2>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <UART_SetConfig+0x2aa>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d006      	beq.n	80065f6 <UART_SetConfig+0x2b6>
 80065e8:	e00b      	b.n	8006602 <UART_SetConfig+0x2c2>
 80065ea:	2300      	movs	r3, #0
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e04a      	b.n	8006686 <UART_SetConfig+0x346>
 80065f0:	2302      	movs	r3, #2
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e047      	b.n	8006686 <UART_SetConfig+0x346>
 80065f6:	2304      	movs	r3, #4
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e044      	b.n	8006686 <UART_SetConfig+0x346>
 80065fc:	2308      	movs	r3, #8
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e041      	b.n	8006686 <UART_SetConfig+0x346>
 8006602:	2310      	movs	r3, #16
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e03e      	b.n	8006686 <UART_SetConfig+0x346>
 8006608:	efff69f3 	.word	0xefff69f3
 800660c:	40011000 	.word	0x40011000
 8006610:	40023800 	.word	0x40023800
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	40005000 	.word	0x40005000
 8006624:	40011400 	.word	0x40011400
 8006628:	40007800 	.word	0x40007800
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a71      	ldr	r2, [pc, #452]	; (80067f8 <UART_SetConfig+0x4b8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d125      	bne.n	8006682 <UART_SetConfig+0x342>
 8006636:	4b71      	ldr	r3, [pc, #452]	; (80067fc <UART_SetConfig+0x4bc>)
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006640:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006644:	d017      	beq.n	8006676 <UART_SetConfig+0x336>
 8006646:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800664a:	d817      	bhi.n	800667c <UART_SetConfig+0x33c>
 800664c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006650:	d00b      	beq.n	800666a <UART_SetConfig+0x32a>
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006656:	d811      	bhi.n	800667c <UART_SetConfig+0x33c>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <UART_SetConfig+0x324>
 800665c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006660:	d006      	beq.n	8006670 <UART_SetConfig+0x330>
 8006662:	e00b      	b.n	800667c <UART_SetConfig+0x33c>
 8006664:	2300      	movs	r3, #0
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e00d      	b.n	8006686 <UART_SetConfig+0x346>
 800666a:	2302      	movs	r3, #2
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e00a      	b.n	8006686 <UART_SetConfig+0x346>
 8006670:	2304      	movs	r3, #4
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e007      	b.n	8006686 <UART_SetConfig+0x346>
 8006676:	2308      	movs	r3, #8
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e004      	b.n	8006686 <UART_SetConfig+0x346>
 800667c:	2310      	movs	r3, #16
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e001      	b.n	8006686 <UART_SetConfig+0x346>
 8006682:	2310      	movs	r3, #16
 8006684:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668e:	d15a      	bne.n	8006746 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006690:	7ffb      	ldrb	r3, [r7, #31]
 8006692:	2b08      	cmp	r3, #8
 8006694:	d827      	bhi.n	80066e6 <UART_SetConfig+0x3a6>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0x35c>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066e7 	.word	0x080066e7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fc fd24 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 80066c4:	61b8      	str	r0, [r7, #24]
        break;
 80066c6:	e013      	b.n	80066f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fc fd34 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e00f      	b.n	80066f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <UART_SetConfig+0x4c0>)
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e00c      	b.n	80066f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fc fc2b 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80066da:	61b8      	str	r0, [r7, #24]
        break;
 80066dc:	e008      	b.n	80066f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e2:	61bb      	str	r3, [r7, #24]
        break;
 80066e4:	e004      	b.n	80066f0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	77bb      	strb	r3, [r7, #30]
        break;
 80066ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d074      	beq.n	80067e0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	005a      	lsls	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	441a      	add	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	fbb2 f3f3 	udiv	r3, r2, r3
 800670a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b0f      	cmp	r3, #15
 8006710:	d916      	bls.n	8006740 <UART_SetConfig+0x400>
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006718:	d212      	bcs.n	8006740 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f023 030f 	bic.w	r3, r3, #15
 8006722:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	b29b      	uxth	r3, r3
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	b29a      	uxth	r2, r3
 8006730:	89fb      	ldrh	r3, [r7, #14]
 8006732:	4313      	orrs	r3, r2
 8006734:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	89fa      	ldrh	r2, [r7, #14]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	e04f      	b.n	80067e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77bb      	strb	r3, [r7, #30]
 8006744:	e04c      	b.n	80067e0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d828      	bhi.n	800679e <UART_SetConfig+0x45e>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0x414>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006779 	.word	0x08006779
 8006758:	08006781 	.word	0x08006781
 800675c:	08006789 	.word	0x08006789
 8006760:	0800679f 	.word	0x0800679f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800679f 	.word	0x0800679f
 800676c:	0800679f 	.word	0x0800679f
 8006770:	0800679f 	.word	0x0800679f
 8006774:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fc fcc8 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 800677c:	61b8      	str	r0, [r7, #24]
        break;
 800677e:	e013      	b.n	80067a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fc fcd8 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 8006784:	61b8      	str	r0, [r7, #24]
        break;
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <UART_SetConfig+0x4c0>)
 800678a:	61bb      	str	r3, [r7, #24]
        break;
 800678c:	e00c      	b.n	80067a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fc fbcf 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8006792:	61b8      	str	r0, [r7, #24]
        break;
 8006794:	e008      	b.n	80067a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	61bb      	str	r3, [r7, #24]
        break;
 800679c:	e004      	b.n	80067a8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	77bb      	strb	r3, [r7, #30]
        break;
 80067a6:	bf00      	nop
    }

    if (pclk != 0U)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	085a      	lsrs	r2, r3, #1
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	441a      	add	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b0f      	cmp	r3, #15
 80067c6:	d909      	bls.n	80067dc <UART_SetConfig+0x49c>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ce:	d205      	bcs.n	80067dc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	e001      	b.n	80067e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40007c00 	.word	0x40007c00
 80067fc:	40023800 	.word	0x40023800
 8006800:	00f42400 	.word	0x00f42400

08006804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01a      	beq.n	800691a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006902:	d10a      	bne.n	800691a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006958:	f7fb fb82 	bl	8002060 <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10e      	bne.n	800698a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f82d 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e023      	b.n	80069d2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d10e      	bne.n	80069b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f817 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e00d      	b.n	80069d2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b09c      	sub	sp, #112	; 0x70
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	603b      	str	r3, [r7, #0]
 80069e6:	4613      	mov	r3, r2
 80069e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ea:	e0a5      	b.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	f000 80a1 	beq.w	8006b38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fb fb33 	bl	8002060 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d13e      	bne.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a20:	667b      	str	r3, [r7, #100]	; 0x64
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e6      	bne.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3308      	adds	r3, #8
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	663b      	str	r3, [r7, #96]	; 0x60
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e5      	bne.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e067      	b.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d04f      	beq.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa6:	d147      	bne.n	8006b38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ab0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b04:	623a      	str	r2, [r7, #32]
 8006b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e010      	b.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	bf0c      	ite	eq
 8006b48:	2301      	moveq	r3, #1
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	f43f af4a 	beq.w	80069ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3770      	adds	r7, #112	; 0x70
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b097      	sub	sp, #92	; 0x5c
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	88fa      	ldrh	r2, [r7, #6]
 8006b7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	d10e      	bne.n	8006bb6 <UART_Start_Receive_IT+0x52>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d105      	bne.n	8006bac <UART_Start_Receive_IT+0x48>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006baa:	e02d      	b.n	8006c08 <UART_Start_Receive_IT+0xa4>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bb4:	e028      	b.n	8006c08 <UART_Start_Receive_IT+0xa4>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <UART_Start_Receive_IT+0x76>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <UART_Start_Receive_IT+0x6c>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	22ff      	movs	r2, #255	; 0xff
 8006bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bce:	e01b      	b.n	8006c08 <UART_Start_Receive_IT+0xa4>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	227f      	movs	r2, #127	; 0x7f
 8006bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bd8:	e016      	b.n	8006c08 <UART_Start_Receive_IT+0xa4>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be2:	d10d      	bne.n	8006c00 <UART_Start_Receive_IT+0x9c>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <UART_Start_Receive_IT+0x92>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	227f      	movs	r2, #127	; 0x7f
 8006bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bf4:	e008      	b.n	8006c08 <UART_Start_Receive_IT+0xa4>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	223f      	movs	r2, #63	; 0x3f
 8006bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bfe:	e003      	b.n	8006c08 <UART_Start_Receive_IT+0xa4>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2222      	movs	r2, #34	; 0x22
 8006c14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c36:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c52:	d107      	bne.n	8006c64 <UART_Start_Receive_IT+0x100>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d103      	bne.n	8006c64 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a24      	ldr	r2, [pc, #144]	; (8006cf0 <UART_Start_Receive_IT+0x18c>)
 8006c60:	665a      	str	r2, [r3, #100]	; 0x64
 8006c62:	e002      	b.n	8006c6a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <UART_Start_Receive_IT+0x190>)
 8006c68:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d019      	beq.n	8006cae <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_Start_Receive_IT+0x116>
 8006cac:	e018      	b.n	8006ce0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	613b      	str	r3, [r7, #16]
   return(result);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f043 0320 	orr.w	r3, r3, #32
 8006cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ccc:	623b      	str	r3, [r7, #32]
 8006cce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	69f9      	ldr	r1, [r7, #28]
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e6      	bne.n	8006cae <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	375c      	adds	r7, #92	; 0x5c
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	08006f9b 	.word	0x08006f9b
 8006cf4:	08006e3f 	.word	0x08006e3f

08006cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b095      	sub	sp, #84	; 0x54
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e6      	bne.n	8006d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d118      	bne.n	8006da0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f023 0310 	bic.w	r3, r3, #16
 8006d82:	647b      	str	r3, [r7, #68]	; 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6979      	ldr	r1, [r7, #20]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006db2:	bf00      	nop
 8006db4:	3754      	adds	r7, #84	; 0x54
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fa8f 	bl	8006300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b088      	sub	sp, #32
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6979      	ldr	r1, [r7, #20]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fa5b 	bl	80062ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e36:	bf00      	nop
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b096      	sub	sp, #88	; 0x58
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e54:	2b22      	cmp	r3, #34	; 0x22
 8006e56:	f040 8094 	bne.w	8006f82 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006e68:	b2d9      	uxtb	r1, r3
 8006e6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e74:	400a      	ands	r2, r1
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d177      	bne.n	8006f92 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ef4:	633a      	str	r2, [r7, #48]	; 0x30
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d12e      	bne.n	8006f7a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0310 	bic.w	r3, r3, #16
 8006f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f40:	61fb      	str	r3, [r7, #28]
 8006f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	69b9      	ldr	r1, [r7, #24]
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d103      	bne.n	8006f6a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2210      	movs	r2, #16
 8006f68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff f9ce 	bl	8006314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f78:	e00b      	b.n	8006f92 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fa f9f8 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 8006f80:	e007      	b.n	8006f92 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0208 	orr.w	r2, r2, #8
 8006f90:	619a      	str	r2, [r3, #24]
}
 8006f92:	bf00      	nop
 8006f94:	3758      	adds	r7, #88	; 0x58
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b096      	sub	sp, #88	; 0x58
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb0:	2b22      	cmp	r3, #34	; 0x22
 8006fb2:	f040 8094 	bne.w	80070de <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006fc6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006fca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fce:	4013      	ands	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fda:	1c9a      	adds	r2, r3, #2
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d177      	bne.n	80070ee <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701c:	643b      	str	r3, [r7, #64]	; 0x40
 800701e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e6      	bne.n	8006ffe <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3308      	adds	r3, #8
 800704e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e5      	bne.n	8007030 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007074:	2b01      	cmp	r3, #1
 8007076:	d12e      	bne.n	80070d6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	60bb      	str	r3, [r7, #8]
   return(result);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f023 0310 	bic.w	r3, r3, #16
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6979      	ldr	r1, [r7, #20]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	613b      	str	r3, [r7, #16]
   return(result);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e6      	bne.n	800707e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d103      	bne.n	80070c6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2210      	movs	r2, #16
 80070c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff f920 	bl	8006314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070d4:	e00b      	b.n	80070ee <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa f94a 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 80070dc:	e007      	b.n	80070ee <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0208 	orr.w	r2, r2, #8
 80070ec:	619a      	str	r2, [r3, #24]
}
 80070ee:	bf00      	nop
 80070f0:	3758      	adds	r7, #88	; 0x58
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <arm_pid_init_f32>:
 80070f8:	ed90 7a08 	vldr	s14, [r0, #32]
 80070fc:	edd0 7a06 	vldr	s15, [r0, #24]
 8007100:	ed90 6a07 	vldr	s12, [r0, #28]
 8007104:	eef1 6a67 	vneg.f32	s13, s15
 8007108:	ed80 7a02 	vstr	s14, [r0, #8]
 800710c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007110:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007118:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800711c:	edc0 7a00 	vstr	s15, [r0]
 8007120:	ed80 7a01 	vstr	s14, [r0, #4]
 8007124:	b901      	cbnz	r1, 8007128 <arm_pid_init_f32+0x30>
 8007126:	4770      	bx	lr
 8007128:	2300      	movs	r3, #0
 800712a:	60c3      	str	r3, [r0, #12]
 800712c:	6103      	str	r3, [r0, #16]
 800712e:	6143      	str	r3, [r0, #20]
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop

08007134 <__errno>:
 8007134:	4b01      	ldr	r3, [pc, #4]	; (800713c <__errno+0x8>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000040 	.word	0x20000040

08007140 <__libc_init_array>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	4d0d      	ldr	r5, [pc, #52]	; (8007178 <__libc_init_array+0x38>)
 8007144:	4c0d      	ldr	r4, [pc, #52]	; (800717c <__libc_init_array+0x3c>)
 8007146:	1b64      	subs	r4, r4, r5
 8007148:	10a4      	asrs	r4, r4, #2
 800714a:	2600      	movs	r6, #0
 800714c:	42a6      	cmp	r6, r4
 800714e:	d109      	bne.n	8007164 <__libc_init_array+0x24>
 8007150:	4d0b      	ldr	r5, [pc, #44]	; (8007180 <__libc_init_array+0x40>)
 8007152:	4c0c      	ldr	r4, [pc, #48]	; (8007184 <__libc_init_array+0x44>)
 8007154:	f000 fc4e 	bl	80079f4 <_init>
 8007158:	1b64      	subs	r4, r4, r5
 800715a:	10a4      	asrs	r4, r4, #2
 800715c:	2600      	movs	r6, #0
 800715e:	42a6      	cmp	r6, r4
 8007160:	d105      	bne.n	800716e <__libc_init_array+0x2e>
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	f855 3b04 	ldr.w	r3, [r5], #4
 8007168:	4798      	blx	r3
 800716a:	3601      	adds	r6, #1
 800716c:	e7ee      	b.n	800714c <__libc_init_array+0xc>
 800716e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007172:	4798      	blx	r3
 8007174:	3601      	adds	r6, #1
 8007176:	e7f2      	b.n	800715e <__libc_init_array+0x1e>
 8007178:	08007a8c 	.word	0x08007a8c
 800717c:	08007a8c 	.word	0x08007a8c
 8007180:	08007a8c 	.word	0x08007a8c
 8007184:	08007a90 	.word	0x08007a90

08007188 <memset>:
 8007188:	4402      	add	r2, r0
 800718a:	4603      	mov	r3, r0
 800718c:	4293      	cmp	r3, r2
 800718e:	d100      	bne.n	8007192 <memset+0xa>
 8007190:	4770      	bx	lr
 8007192:	f803 1b01 	strb.w	r1, [r3], #1
 8007196:	e7f9      	b.n	800718c <memset+0x4>

08007198 <siprintf>:
 8007198:	b40e      	push	{r1, r2, r3}
 800719a:	b500      	push	{lr}
 800719c:	b09c      	sub	sp, #112	; 0x70
 800719e:	ab1d      	add	r3, sp, #116	; 0x74
 80071a0:	9002      	str	r0, [sp, #8]
 80071a2:	9006      	str	r0, [sp, #24]
 80071a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071a8:	4809      	ldr	r0, [pc, #36]	; (80071d0 <siprintf+0x38>)
 80071aa:	9107      	str	r1, [sp, #28]
 80071ac:	9104      	str	r1, [sp, #16]
 80071ae:	4909      	ldr	r1, [pc, #36]	; (80071d4 <siprintf+0x3c>)
 80071b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b4:	9105      	str	r1, [sp, #20]
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	a902      	add	r1, sp, #8
 80071bc:	f000 f868 	bl	8007290 <_svfiprintf_r>
 80071c0:	9b02      	ldr	r3, [sp, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	b01c      	add	sp, #112	; 0x70
 80071c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071cc:	b003      	add	sp, #12
 80071ce:	4770      	bx	lr
 80071d0:	20000040 	.word	0x20000040
 80071d4:	ffff0208 	.word	0xffff0208

080071d8 <__ssputs_r>:
 80071d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	688e      	ldr	r6, [r1, #8]
 80071de:	429e      	cmp	r6, r3
 80071e0:	4682      	mov	sl, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	4690      	mov	r8, r2
 80071e6:	461f      	mov	r7, r3
 80071e8:	d838      	bhi.n	800725c <__ssputs_r+0x84>
 80071ea:	898a      	ldrh	r2, [r1, #12]
 80071ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071f0:	d032      	beq.n	8007258 <__ssputs_r+0x80>
 80071f2:	6825      	ldr	r5, [r4, #0]
 80071f4:	6909      	ldr	r1, [r1, #16]
 80071f6:	eba5 0901 	sub.w	r9, r5, r1
 80071fa:	6965      	ldr	r5, [r4, #20]
 80071fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007204:	3301      	adds	r3, #1
 8007206:	444b      	add	r3, r9
 8007208:	106d      	asrs	r5, r5, #1
 800720a:	429d      	cmp	r5, r3
 800720c:	bf38      	it	cc
 800720e:	461d      	movcc	r5, r3
 8007210:	0553      	lsls	r3, r2, #21
 8007212:	d531      	bpl.n	8007278 <__ssputs_r+0xa0>
 8007214:	4629      	mov	r1, r5
 8007216:	f000 fb47 	bl	80078a8 <_malloc_r>
 800721a:	4606      	mov	r6, r0
 800721c:	b950      	cbnz	r0, 8007234 <__ssputs_r+0x5c>
 800721e:	230c      	movs	r3, #12
 8007220:	f8ca 3000 	str.w	r3, [sl]
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007234:	6921      	ldr	r1, [r4, #16]
 8007236:	464a      	mov	r2, r9
 8007238:	f000 fabe 	bl	80077b8 <memcpy>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	6126      	str	r6, [r4, #16]
 800724a:	6165      	str	r5, [r4, #20]
 800724c:	444e      	add	r6, r9
 800724e:	eba5 0509 	sub.w	r5, r5, r9
 8007252:	6026      	str	r6, [r4, #0]
 8007254:	60a5      	str	r5, [r4, #8]
 8007256:	463e      	mov	r6, r7
 8007258:	42be      	cmp	r6, r7
 800725a:	d900      	bls.n	800725e <__ssputs_r+0x86>
 800725c:	463e      	mov	r6, r7
 800725e:	4632      	mov	r2, r6
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	4641      	mov	r1, r8
 8007264:	f000 fab6 	bl	80077d4 <memmove>
 8007268:	68a3      	ldr	r3, [r4, #8]
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	1b9b      	subs	r3, r3, r6
 800726e:	4432      	add	r2, r6
 8007270:	60a3      	str	r3, [r4, #8]
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	2000      	movs	r0, #0
 8007276:	e7db      	b.n	8007230 <__ssputs_r+0x58>
 8007278:	462a      	mov	r2, r5
 800727a:	f000 fb6f 	bl	800795c <_realloc_r>
 800727e:	4606      	mov	r6, r0
 8007280:	2800      	cmp	r0, #0
 8007282:	d1e1      	bne.n	8007248 <__ssputs_r+0x70>
 8007284:	6921      	ldr	r1, [r4, #16]
 8007286:	4650      	mov	r0, sl
 8007288:	f000 fabe 	bl	8007808 <_free_r>
 800728c:	e7c7      	b.n	800721e <__ssputs_r+0x46>
	...

08007290 <_svfiprintf_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	4698      	mov	r8, r3
 8007296:	898b      	ldrh	r3, [r1, #12]
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	b09d      	sub	sp, #116	; 0x74
 800729c:	4607      	mov	r7, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	4614      	mov	r4, r2
 80072a2:	d50e      	bpl.n	80072c2 <_svfiprintf_r+0x32>
 80072a4:	690b      	ldr	r3, [r1, #16]
 80072a6:	b963      	cbnz	r3, 80072c2 <_svfiprintf_r+0x32>
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	f000 fafd 	bl	80078a8 <_malloc_r>
 80072ae:	6028      	str	r0, [r5, #0]
 80072b0:	6128      	str	r0, [r5, #16]
 80072b2:	b920      	cbnz	r0, 80072be <_svfiprintf_r+0x2e>
 80072b4:	230c      	movs	r3, #12
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	e0d1      	b.n	8007462 <_svfiprintf_r+0x1d2>
 80072be:	2340      	movs	r3, #64	; 0x40
 80072c0:	616b      	str	r3, [r5, #20]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	2320      	movs	r3, #32
 80072c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80072d0:	2330      	movs	r3, #48	; 0x30
 80072d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800747c <_svfiprintf_r+0x1ec>
 80072d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072da:	f04f 0901 	mov.w	r9, #1
 80072de:	4623      	mov	r3, r4
 80072e0:	469a      	mov	sl, r3
 80072e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e6:	b10a      	cbz	r2, 80072ec <_svfiprintf_r+0x5c>
 80072e8:	2a25      	cmp	r2, #37	; 0x25
 80072ea:	d1f9      	bne.n	80072e0 <_svfiprintf_r+0x50>
 80072ec:	ebba 0b04 	subs.w	fp, sl, r4
 80072f0:	d00b      	beq.n	800730a <_svfiprintf_r+0x7a>
 80072f2:	465b      	mov	r3, fp
 80072f4:	4622      	mov	r2, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	4638      	mov	r0, r7
 80072fa:	f7ff ff6d 	bl	80071d8 <__ssputs_r>
 80072fe:	3001      	adds	r0, #1
 8007300:	f000 80aa 	beq.w	8007458 <_svfiprintf_r+0x1c8>
 8007304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007306:	445a      	add	r2, fp
 8007308:	9209      	str	r2, [sp, #36]	; 0x24
 800730a:	f89a 3000 	ldrb.w	r3, [sl]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 80a2 	beq.w	8007458 <_svfiprintf_r+0x1c8>
 8007314:	2300      	movs	r3, #0
 8007316:	f04f 32ff 	mov.w	r2, #4294967295
 800731a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800731e:	f10a 0a01 	add.w	sl, sl, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800732a:	931a      	str	r3, [sp, #104]	; 0x68
 800732c:	4654      	mov	r4, sl
 800732e:	2205      	movs	r2, #5
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	4851      	ldr	r0, [pc, #324]	; (800747c <_svfiprintf_r+0x1ec>)
 8007336:	f7f8 ff8b 	bl	8000250 <memchr>
 800733a:	9a04      	ldr	r2, [sp, #16]
 800733c:	b9d8      	cbnz	r0, 8007376 <_svfiprintf_r+0xe6>
 800733e:	06d0      	lsls	r0, r2, #27
 8007340:	bf44      	itt	mi
 8007342:	2320      	movmi	r3, #32
 8007344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007348:	0711      	lsls	r1, r2, #28
 800734a:	bf44      	itt	mi
 800734c:	232b      	movmi	r3, #43	; 0x2b
 800734e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007352:	f89a 3000 	ldrb.w	r3, [sl]
 8007356:	2b2a      	cmp	r3, #42	; 0x2a
 8007358:	d015      	beq.n	8007386 <_svfiprintf_r+0xf6>
 800735a:	9a07      	ldr	r2, [sp, #28]
 800735c:	4654      	mov	r4, sl
 800735e:	2000      	movs	r0, #0
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4621      	mov	r1, r4
 8007366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800736a:	3b30      	subs	r3, #48	; 0x30
 800736c:	2b09      	cmp	r3, #9
 800736e:	d94e      	bls.n	800740e <_svfiprintf_r+0x17e>
 8007370:	b1b0      	cbz	r0, 80073a0 <_svfiprintf_r+0x110>
 8007372:	9207      	str	r2, [sp, #28]
 8007374:	e014      	b.n	80073a0 <_svfiprintf_r+0x110>
 8007376:	eba0 0308 	sub.w	r3, r0, r8
 800737a:	fa09 f303 	lsl.w	r3, r9, r3
 800737e:	4313      	orrs	r3, r2
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	46a2      	mov	sl, r4
 8007384:	e7d2      	b.n	800732c <_svfiprintf_r+0x9c>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	1d19      	adds	r1, r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	9103      	str	r1, [sp, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfbb      	ittet	lt
 8007392:	425b      	neglt	r3, r3
 8007394:	f042 0202 	orrlt.w	r2, r2, #2
 8007398:	9307      	strge	r3, [sp, #28]
 800739a:	9307      	strlt	r3, [sp, #28]
 800739c:	bfb8      	it	lt
 800739e:	9204      	strlt	r2, [sp, #16]
 80073a0:	7823      	ldrb	r3, [r4, #0]
 80073a2:	2b2e      	cmp	r3, #46	; 0x2e
 80073a4:	d10c      	bne.n	80073c0 <_svfiprintf_r+0x130>
 80073a6:	7863      	ldrb	r3, [r4, #1]
 80073a8:	2b2a      	cmp	r3, #42	; 0x2a
 80073aa:	d135      	bne.n	8007418 <_svfiprintf_r+0x188>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	9203      	str	r2, [sp, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfb8      	it	lt
 80073b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80073bc:	3402      	adds	r4, #2
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800748c <_svfiprintf_r+0x1fc>
 80073c4:	7821      	ldrb	r1, [r4, #0]
 80073c6:	2203      	movs	r2, #3
 80073c8:	4650      	mov	r0, sl
 80073ca:	f7f8 ff41 	bl	8000250 <memchr>
 80073ce:	b140      	cbz	r0, 80073e2 <_svfiprintf_r+0x152>
 80073d0:	2340      	movs	r3, #64	; 0x40
 80073d2:	eba0 000a 	sub.w	r0, r0, sl
 80073d6:	fa03 f000 	lsl.w	r0, r3, r0
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	4303      	orrs	r3, r0
 80073de:	3401      	adds	r4, #1
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e6:	4826      	ldr	r0, [pc, #152]	; (8007480 <_svfiprintf_r+0x1f0>)
 80073e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073ec:	2206      	movs	r2, #6
 80073ee:	f7f8 ff2f 	bl	8000250 <memchr>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d038      	beq.n	8007468 <_svfiprintf_r+0x1d8>
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <_svfiprintf_r+0x1f4>)
 80073f8:	bb1b      	cbnz	r3, 8007442 <_svfiprintf_r+0x1b2>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	3307      	adds	r3, #7
 80073fe:	f023 0307 	bic.w	r3, r3, #7
 8007402:	3308      	adds	r3, #8
 8007404:	9303      	str	r3, [sp, #12]
 8007406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007408:	4433      	add	r3, r6
 800740a:	9309      	str	r3, [sp, #36]	; 0x24
 800740c:	e767      	b.n	80072de <_svfiprintf_r+0x4e>
 800740e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007412:	460c      	mov	r4, r1
 8007414:	2001      	movs	r0, #1
 8007416:	e7a5      	b.n	8007364 <_svfiprintf_r+0xd4>
 8007418:	2300      	movs	r3, #0
 800741a:	3401      	adds	r4, #1
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	4619      	mov	r1, r3
 8007420:	f04f 0c0a 	mov.w	ip, #10
 8007424:	4620      	mov	r0, r4
 8007426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800742a:	3a30      	subs	r2, #48	; 0x30
 800742c:	2a09      	cmp	r2, #9
 800742e:	d903      	bls.n	8007438 <_svfiprintf_r+0x1a8>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0c5      	beq.n	80073c0 <_svfiprintf_r+0x130>
 8007434:	9105      	str	r1, [sp, #20]
 8007436:	e7c3      	b.n	80073c0 <_svfiprintf_r+0x130>
 8007438:	fb0c 2101 	mla	r1, ip, r1, r2
 800743c:	4604      	mov	r4, r0
 800743e:	2301      	movs	r3, #1
 8007440:	e7f0      	b.n	8007424 <_svfiprintf_r+0x194>
 8007442:	ab03      	add	r3, sp, #12
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	462a      	mov	r2, r5
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <_svfiprintf_r+0x1f8>)
 800744a:	a904      	add	r1, sp, #16
 800744c:	4638      	mov	r0, r7
 800744e:	f3af 8000 	nop.w
 8007452:	1c42      	adds	r2, r0, #1
 8007454:	4606      	mov	r6, r0
 8007456:	d1d6      	bne.n	8007406 <_svfiprintf_r+0x176>
 8007458:	89ab      	ldrh	r3, [r5, #12]
 800745a:	065b      	lsls	r3, r3, #25
 800745c:	f53f af2c 	bmi.w	80072b8 <_svfiprintf_r+0x28>
 8007460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007462:	b01d      	add	sp, #116	; 0x74
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	462a      	mov	r2, r5
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <_svfiprintf_r+0x1f8>)
 8007470:	a904      	add	r1, sp, #16
 8007472:	4638      	mov	r0, r7
 8007474:	f000 f87a 	bl	800756c <_printf_i>
 8007478:	e7eb      	b.n	8007452 <_svfiprintf_r+0x1c2>
 800747a:	bf00      	nop
 800747c:	08007a50 	.word	0x08007a50
 8007480:	08007a5a 	.word	0x08007a5a
 8007484:	00000000 	.word	0x00000000
 8007488:	080071d9 	.word	0x080071d9
 800748c:	08007a56 	.word	0x08007a56

08007490 <_printf_common>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	4616      	mov	r6, r2
 8007496:	4699      	mov	r9, r3
 8007498:	688a      	ldr	r2, [r1, #8]
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bfb8      	it	lt
 80074a4:	4613      	movlt	r3, r2
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ac:	4607      	mov	r7, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	b10a      	cbz	r2, 80074b6 <_printf_common+0x26>
 80074b2:	3301      	adds	r3, #1
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	0699      	lsls	r1, r3, #26
 80074ba:	bf42      	ittt	mi
 80074bc:	6833      	ldrmi	r3, [r6, #0]
 80074be:	3302      	addmi	r3, #2
 80074c0:	6033      	strmi	r3, [r6, #0]
 80074c2:	6825      	ldr	r5, [r4, #0]
 80074c4:	f015 0506 	ands.w	r5, r5, #6
 80074c8:	d106      	bne.n	80074d8 <_printf_common+0x48>
 80074ca:	f104 0a19 	add.w	sl, r4, #25
 80074ce:	68e3      	ldr	r3, [r4, #12]
 80074d0:	6832      	ldr	r2, [r6, #0]
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc26      	bgt.n	8007526 <_printf_common+0x96>
 80074d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074dc:	1e13      	subs	r3, r2, #0
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	bf18      	it	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	0692      	lsls	r2, r2, #26
 80074e6:	d42b      	bmi.n	8007540 <_printf_common+0xb0>
 80074e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ec:	4649      	mov	r1, r9
 80074ee:	4638      	mov	r0, r7
 80074f0:	47c0      	blx	r8
 80074f2:	3001      	adds	r0, #1
 80074f4:	d01e      	beq.n	8007534 <_printf_common+0xa4>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	68e5      	ldr	r5, [r4, #12]
 80074fa:	6832      	ldr	r2, [r6, #0]
 80074fc:	f003 0306 	and.w	r3, r3, #6
 8007500:	2b04      	cmp	r3, #4
 8007502:	bf08      	it	eq
 8007504:	1aad      	subeq	r5, r5, r2
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	bf0c      	ite	eq
 800750c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007510:	2500      	movne	r5, #0
 8007512:	4293      	cmp	r3, r2
 8007514:	bfc4      	itt	gt
 8007516:	1a9b      	subgt	r3, r3, r2
 8007518:	18ed      	addgt	r5, r5, r3
 800751a:	2600      	movs	r6, #0
 800751c:	341a      	adds	r4, #26
 800751e:	42b5      	cmp	r5, r6
 8007520:	d11a      	bne.n	8007558 <_printf_common+0xc8>
 8007522:	2000      	movs	r0, #0
 8007524:	e008      	b.n	8007538 <_printf_common+0xa8>
 8007526:	2301      	movs	r3, #1
 8007528:	4652      	mov	r2, sl
 800752a:	4649      	mov	r1, r9
 800752c:	4638      	mov	r0, r7
 800752e:	47c0      	blx	r8
 8007530:	3001      	adds	r0, #1
 8007532:	d103      	bne.n	800753c <_printf_common+0xac>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	3501      	adds	r5, #1
 800753e:	e7c6      	b.n	80074ce <_printf_common+0x3e>
 8007540:	18e1      	adds	r1, r4, r3
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	2030      	movs	r0, #48	; 0x30
 8007546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800754a:	4422      	add	r2, r4
 800754c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007554:	3302      	adds	r3, #2
 8007556:	e7c7      	b.n	80074e8 <_printf_common+0x58>
 8007558:	2301      	movs	r3, #1
 800755a:	4622      	mov	r2, r4
 800755c:	4649      	mov	r1, r9
 800755e:	4638      	mov	r0, r7
 8007560:	47c0      	blx	r8
 8007562:	3001      	adds	r0, #1
 8007564:	d0e6      	beq.n	8007534 <_printf_common+0xa4>
 8007566:	3601      	adds	r6, #1
 8007568:	e7d9      	b.n	800751e <_printf_common+0x8e>
	...

0800756c <_printf_i>:
 800756c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	4691      	mov	r9, r2
 8007574:	7e27      	ldrb	r7, [r4, #24]
 8007576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007578:	2f78      	cmp	r7, #120	; 0x78
 800757a:	4680      	mov	r8, r0
 800757c:	469a      	mov	sl, r3
 800757e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007582:	d807      	bhi.n	8007594 <_printf_i+0x28>
 8007584:	2f62      	cmp	r7, #98	; 0x62
 8007586:	d80a      	bhi.n	800759e <_printf_i+0x32>
 8007588:	2f00      	cmp	r7, #0
 800758a:	f000 80d8 	beq.w	800773e <_printf_i+0x1d2>
 800758e:	2f58      	cmp	r7, #88	; 0x58
 8007590:	f000 80a3 	beq.w	80076da <_printf_i+0x16e>
 8007594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800759c:	e03a      	b.n	8007614 <_printf_i+0xa8>
 800759e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075a2:	2b15      	cmp	r3, #21
 80075a4:	d8f6      	bhi.n	8007594 <_printf_i+0x28>
 80075a6:	a001      	add	r0, pc, #4	; (adr r0, 80075ac <_printf_i+0x40>)
 80075a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075ac:	08007605 	.word	0x08007605
 80075b0:	08007619 	.word	0x08007619
 80075b4:	08007595 	.word	0x08007595
 80075b8:	08007595 	.word	0x08007595
 80075bc:	08007595 	.word	0x08007595
 80075c0:	08007595 	.word	0x08007595
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007595 	.word	0x08007595
 80075cc:	08007595 	.word	0x08007595
 80075d0:	08007595 	.word	0x08007595
 80075d4:	08007595 	.word	0x08007595
 80075d8:	08007725 	.word	0x08007725
 80075dc:	08007649 	.word	0x08007649
 80075e0:	08007707 	.word	0x08007707
 80075e4:	08007595 	.word	0x08007595
 80075e8:	08007595 	.word	0x08007595
 80075ec:	08007747 	.word	0x08007747
 80075f0:	08007595 	.word	0x08007595
 80075f4:	08007649 	.word	0x08007649
 80075f8:	08007595 	.word	0x08007595
 80075fc:	08007595 	.word	0x08007595
 8007600:	0800770f 	.word	0x0800770f
 8007604:	680b      	ldr	r3, [r1, #0]
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	600a      	str	r2, [r1, #0]
 800760c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007614:	2301      	movs	r3, #1
 8007616:	e0a3      	b.n	8007760 <_printf_i+0x1f4>
 8007618:	6825      	ldr	r5, [r4, #0]
 800761a:	6808      	ldr	r0, [r1, #0]
 800761c:	062e      	lsls	r6, r5, #24
 800761e:	f100 0304 	add.w	r3, r0, #4
 8007622:	d50a      	bpl.n	800763a <_printf_i+0xce>
 8007624:	6805      	ldr	r5, [r0, #0]
 8007626:	600b      	str	r3, [r1, #0]
 8007628:	2d00      	cmp	r5, #0
 800762a:	da03      	bge.n	8007634 <_printf_i+0xc8>
 800762c:	232d      	movs	r3, #45	; 0x2d
 800762e:	426d      	negs	r5, r5
 8007630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007634:	485e      	ldr	r0, [pc, #376]	; (80077b0 <_printf_i+0x244>)
 8007636:	230a      	movs	r3, #10
 8007638:	e019      	b.n	800766e <_printf_i+0x102>
 800763a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800763e:	6805      	ldr	r5, [r0, #0]
 8007640:	600b      	str	r3, [r1, #0]
 8007642:	bf18      	it	ne
 8007644:	b22d      	sxthne	r5, r5
 8007646:	e7ef      	b.n	8007628 <_printf_i+0xbc>
 8007648:	680b      	ldr	r3, [r1, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	1d18      	adds	r0, r3, #4
 800764e:	6008      	str	r0, [r1, #0]
 8007650:	0628      	lsls	r0, r5, #24
 8007652:	d501      	bpl.n	8007658 <_printf_i+0xec>
 8007654:	681d      	ldr	r5, [r3, #0]
 8007656:	e002      	b.n	800765e <_printf_i+0xf2>
 8007658:	0669      	lsls	r1, r5, #25
 800765a:	d5fb      	bpl.n	8007654 <_printf_i+0xe8>
 800765c:	881d      	ldrh	r5, [r3, #0]
 800765e:	4854      	ldr	r0, [pc, #336]	; (80077b0 <_printf_i+0x244>)
 8007660:	2f6f      	cmp	r7, #111	; 0x6f
 8007662:	bf0c      	ite	eq
 8007664:	2308      	moveq	r3, #8
 8007666:	230a      	movne	r3, #10
 8007668:	2100      	movs	r1, #0
 800766a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800766e:	6866      	ldr	r6, [r4, #4]
 8007670:	60a6      	str	r6, [r4, #8]
 8007672:	2e00      	cmp	r6, #0
 8007674:	bfa2      	ittt	ge
 8007676:	6821      	ldrge	r1, [r4, #0]
 8007678:	f021 0104 	bicge.w	r1, r1, #4
 800767c:	6021      	strge	r1, [r4, #0]
 800767e:	b90d      	cbnz	r5, 8007684 <_printf_i+0x118>
 8007680:	2e00      	cmp	r6, #0
 8007682:	d04d      	beq.n	8007720 <_printf_i+0x1b4>
 8007684:	4616      	mov	r6, r2
 8007686:	fbb5 f1f3 	udiv	r1, r5, r3
 800768a:	fb03 5711 	mls	r7, r3, r1, r5
 800768e:	5dc7      	ldrb	r7, [r0, r7]
 8007690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007694:	462f      	mov	r7, r5
 8007696:	42bb      	cmp	r3, r7
 8007698:	460d      	mov	r5, r1
 800769a:	d9f4      	bls.n	8007686 <_printf_i+0x11a>
 800769c:	2b08      	cmp	r3, #8
 800769e:	d10b      	bne.n	80076b8 <_printf_i+0x14c>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07df      	lsls	r7, r3, #31
 80076a4:	d508      	bpl.n	80076b8 <_printf_i+0x14c>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	6861      	ldr	r1, [r4, #4]
 80076aa:	4299      	cmp	r1, r3
 80076ac:	bfde      	ittt	le
 80076ae:	2330      	movle	r3, #48	; 0x30
 80076b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076b8:	1b92      	subs	r2, r2, r6
 80076ba:	6122      	str	r2, [r4, #16]
 80076bc:	f8cd a000 	str.w	sl, [sp]
 80076c0:	464b      	mov	r3, r9
 80076c2:	aa03      	add	r2, sp, #12
 80076c4:	4621      	mov	r1, r4
 80076c6:	4640      	mov	r0, r8
 80076c8:	f7ff fee2 	bl	8007490 <_printf_common>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d14c      	bne.n	800776a <_printf_i+0x1fe>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	b004      	add	sp, #16
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	4835      	ldr	r0, [pc, #212]	; (80077b0 <_printf_i+0x244>)
 80076dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	680e      	ldr	r6, [r1, #0]
 80076e4:	061f      	lsls	r7, r3, #24
 80076e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80076ea:	600e      	str	r6, [r1, #0]
 80076ec:	d514      	bpl.n	8007718 <_printf_i+0x1ac>
 80076ee:	07d9      	lsls	r1, r3, #31
 80076f0:	bf44      	itt	mi
 80076f2:	f043 0320 	orrmi.w	r3, r3, #32
 80076f6:	6023      	strmi	r3, [r4, #0]
 80076f8:	b91d      	cbnz	r5, 8007702 <_printf_i+0x196>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f023 0320 	bic.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	2310      	movs	r3, #16
 8007704:	e7b0      	b.n	8007668 <_printf_i+0xfc>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f043 0320 	orr.w	r3, r3, #32
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	2378      	movs	r3, #120	; 0x78
 8007710:	4828      	ldr	r0, [pc, #160]	; (80077b4 <_printf_i+0x248>)
 8007712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007716:	e7e3      	b.n	80076e0 <_printf_i+0x174>
 8007718:	065e      	lsls	r6, r3, #25
 800771a:	bf48      	it	mi
 800771c:	b2ad      	uxthmi	r5, r5
 800771e:	e7e6      	b.n	80076ee <_printf_i+0x182>
 8007720:	4616      	mov	r6, r2
 8007722:	e7bb      	b.n	800769c <_printf_i+0x130>
 8007724:	680b      	ldr	r3, [r1, #0]
 8007726:	6826      	ldr	r6, [r4, #0]
 8007728:	6960      	ldr	r0, [r4, #20]
 800772a:	1d1d      	adds	r5, r3, #4
 800772c:	600d      	str	r5, [r1, #0]
 800772e:	0635      	lsls	r5, r6, #24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	d501      	bpl.n	8007738 <_printf_i+0x1cc>
 8007734:	6018      	str	r0, [r3, #0]
 8007736:	e002      	b.n	800773e <_printf_i+0x1d2>
 8007738:	0671      	lsls	r1, r6, #25
 800773a:	d5fb      	bpl.n	8007734 <_printf_i+0x1c8>
 800773c:	8018      	strh	r0, [r3, #0]
 800773e:	2300      	movs	r3, #0
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	4616      	mov	r6, r2
 8007744:	e7ba      	b.n	80076bc <_printf_i+0x150>
 8007746:	680b      	ldr	r3, [r1, #0]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	600a      	str	r2, [r1, #0]
 800774c:	681e      	ldr	r6, [r3, #0]
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	2100      	movs	r1, #0
 8007752:	4630      	mov	r0, r6
 8007754:	f7f8 fd7c 	bl	8000250 <memchr>
 8007758:	b108      	cbz	r0, 800775e <_printf_i+0x1f2>
 800775a:	1b80      	subs	r0, r0, r6
 800775c:	6060      	str	r0, [r4, #4]
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	2300      	movs	r3, #0
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007768:	e7a8      	b.n	80076bc <_printf_i+0x150>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	4632      	mov	r2, r6
 800776e:	4649      	mov	r1, r9
 8007770:	4640      	mov	r0, r8
 8007772:	47d0      	blx	sl
 8007774:	3001      	adds	r0, #1
 8007776:	d0ab      	beq.n	80076d0 <_printf_i+0x164>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	079b      	lsls	r3, r3, #30
 800777c:	d413      	bmi.n	80077a6 <_printf_i+0x23a>
 800777e:	68e0      	ldr	r0, [r4, #12]
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	4298      	cmp	r0, r3
 8007784:	bfb8      	it	lt
 8007786:	4618      	movlt	r0, r3
 8007788:	e7a4      	b.n	80076d4 <_printf_i+0x168>
 800778a:	2301      	movs	r3, #1
 800778c:	4632      	mov	r2, r6
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d09b      	beq.n	80076d0 <_printf_i+0x164>
 8007798:	3501      	adds	r5, #1
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	9903      	ldr	r1, [sp, #12]
 800779e:	1a5b      	subs	r3, r3, r1
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dcf2      	bgt.n	800778a <_printf_i+0x21e>
 80077a4:	e7eb      	b.n	800777e <_printf_i+0x212>
 80077a6:	2500      	movs	r5, #0
 80077a8:	f104 0619 	add.w	r6, r4, #25
 80077ac:	e7f5      	b.n	800779a <_printf_i+0x22e>
 80077ae:	bf00      	nop
 80077b0:	08007a61 	.word	0x08007a61
 80077b4:	08007a72 	.word	0x08007a72

080077b8 <memcpy>:
 80077b8:	440a      	add	r2, r1
 80077ba:	4291      	cmp	r1, r2
 80077bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c0:	d100      	bne.n	80077c4 <memcpy+0xc>
 80077c2:	4770      	bx	lr
 80077c4:	b510      	push	{r4, lr}
 80077c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ce:	4291      	cmp	r1, r2
 80077d0:	d1f9      	bne.n	80077c6 <memcpy+0xe>
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <memmove>:
 80077d4:	4288      	cmp	r0, r1
 80077d6:	b510      	push	{r4, lr}
 80077d8:	eb01 0402 	add.w	r4, r1, r2
 80077dc:	d902      	bls.n	80077e4 <memmove+0x10>
 80077de:	4284      	cmp	r4, r0
 80077e0:	4623      	mov	r3, r4
 80077e2:	d807      	bhi.n	80077f4 <memmove+0x20>
 80077e4:	1e43      	subs	r3, r0, #1
 80077e6:	42a1      	cmp	r1, r4
 80077e8:	d008      	beq.n	80077fc <memmove+0x28>
 80077ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077f2:	e7f8      	b.n	80077e6 <memmove+0x12>
 80077f4:	4402      	add	r2, r0
 80077f6:	4601      	mov	r1, r0
 80077f8:	428a      	cmp	r2, r1
 80077fa:	d100      	bne.n	80077fe <memmove+0x2a>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007806:	e7f7      	b.n	80077f8 <memmove+0x24>

08007808 <_free_r>:
 8007808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780a:	2900      	cmp	r1, #0
 800780c:	d048      	beq.n	80078a0 <_free_r+0x98>
 800780e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007812:	9001      	str	r0, [sp, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f1a1 0404 	sub.w	r4, r1, #4
 800781a:	bfb8      	it	lt
 800781c:	18e4      	addlt	r4, r4, r3
 800781e:	f000 f8d3 	bl	80079c8 <__malloc_lock>
 8007822:	4a20      	ldr	r2, [pc, #128]	; (80078a4 <_free_r+0x9c>)
 8007824:	9801      	ldr	r0, [sp, #4]
 8007826:	6813      	ldr	r3, [r2, #0]
 8007828:	4615      	mov	r5, r2
 800782a:	b933      	cbnz	r3, 800783a <_free_r+0x32>
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	6014      	str	r4, [r2, #0]
 8007830:	b003      	add	sp, #12
 8007832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007836:	f000 b8cd 	b.w	80079d4 <__malloc_unlock>
 800783a:	42a3      	cmp	r3, r4
 800783c:	d90b      	bls.n	8007856 <_free_r+0x4e>
 800783e:	6821      	ldr	r1, [r4, #0]
 8007840:	1862      	adds	r2, r4, r1
 8007842:	4293      	cmp	r3, r2
 8007844:	bf04      	itt	eq
 8007846:	681a      	ldreq	r2, [r3, #0]
 8007848:	685b      	ldreq	r3, [r3, #4]
 800784a:	6063      	str	r3, [r4, #4]
 800784c:	bf04      	itt	eq
 800784e:	1852      	addeq	r2, r2, r1
 8007850:	6022      	streq	r2, [r4, #0]
 8007852:	602c      	str	r4, [r5, #0]
 8007854:	e7ec      	b.n	8007830 <_free_r+0x28>
 8007856:	461a      	mov	r2, r3
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b10b      	cbz	r3, 8007860 <_free_r+0x58>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d9fa      	bls.n	8007856 <_free_r+0x4e>
 8007860:	6811      	ldr	r1, [r2, #0]
 8007862:	1855      	adds	r5, r2, r1
 8007864:	42a5      	cmp	r5, r4
 8007866:	d10b      	bne.n	8007880 <_free_r+0x78>
 8007868:	6824      	ldr	r4, [r4, #0]
 800786a:	4421      	add	r1, r4
 800786c:	1854      	adds	r4, r2, r1
 800786e:	42a3      	cmp	r3, r4
 8007870:	6011      	str	r1, [r2, #0]
 8007872:	d1dd      	bne.n	8007830 <_free_r+0x28>
 8007874:	681c      	ldr	r4, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	6053      	str	r3, [r2, #4]
 800787a:	4421      	add	r1, r4
 800787c:	6011      	str	r1, [r2, #0]
 800787e:	e7d7      	b.n	8007830 <_free_r+0x28>
 8007880:	d902      	bls.n	8007888 <_free_r+0x80>
 8007882:	230c      	movs	r3, #12
 8007884:	6003      	str	r3, [r0, #0]
 8007886:	e7d3      	b.n	8007830 <_free_r+0x28>
 8007888:	6825      	ldr	r5, [r4, #0]
 800788a:	1961      	adds	r1, r4, r5
 800788c:	428b      	cmp	r3, r1
 800788e:	bf04      	itt	eq
 8007890:	6819      	ldreq	r1, [r3, #0]
 8007892:	685b      	ldreq	r3, [r3, #4]
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	bf04      	itt	eq
 8007898:	1949      	addeq	r1, r1, r5
 800789a:	6021      	streq	r1, [r4, #0]
 800789c:	6054      	str	r4, [r2, #4]
 800789e:	e7c7      	b.n	8007830 <_free_r+0x28>
 80078a0:	b003      	add	sp, #12
 80078a2:	bd30      	pop	{r4, r5, pc}
 80078a4:	200000d4 	.word	0x200000d4

080078a8 <_malloc_r>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	1ccd      	adds	r5, r1, #3
 80078ac:	f025 0503 	bic.w	r5, r5, #3
 80078b0:	3508      	adds	r5, #8
 80078b2:	2d0c      	cmp	r5, #12
 80078b4:	bf38      	it	cc
 80078b6:	250c      	movcc	r5, #12
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	4606      	mov	r6, r0
 80078bc:	db01      	blt.n	80078c2 <_malloc_r+0x1a>
 80078be:	42a9      	cmp	r1, r5
 80078c0:	d903      	bls.n	80078ca <_malloc_r+0x22>
 80078c2:	230c      	movs	r3, #12
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	2000      	movs	r0, #0
 80078c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ca:	f000 f87d 	bl	80079c8 <__malloc_lock>
 80078ce:	4921      	ldr	r1, [pc, #132]	; (8007954 <_malloc_r+0xac>)
 80078d0:	680a      	ldr	r2, [r1, #0]
 80078d2:	4614      	mov	r4, r2
 80078d4:	b99c      	cbnz	r4, 80078fe <_malloc_r+0x56>
 80078d6:	4f20      	ldr	r7, [pc, #128]	; (8007958 <_malloc_r+0xb0>)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	b923      	cbnz	r3, 80078e6 <_malloc_r+0x3e>
 80078dc:	4621      	mov	r1, r4
 80078de:	4630      	mov	r0, r6
 80078e0:	f000 f862 	bl	80079a8 <_sbrk_r>
 80078e4:	6038      	str	r0, [r7, #0]
 80078e6:	4629      	mov	r1, r5
 80078e8:	4630      	mov	r0, r6
 80078ea:	f000 f85d 	bl	80079a8 <_sbrk_r>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d123      	bne.n	800793a <_malloc_r+0x92>
 80078f2:	230c      	movs	r3, #12
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	4630      	mov	r0, r6
 80078f8:	f000 f86c 	bl	80079d4 <__malloc_unlock>
 80078fc:	e7e3      	b.n	80078c6 <_malloc_r+0x1e>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	1b5b      	subs	r3, r3, r5
 8007902:	d417      	bmi.n	8007934 <_malloc_r+0x8c>
 8007904:	2b0b      	cmp	r3, #11
 8007906:	d903      	bls.n	8007910 <_malloc_r+0x68>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	441c      	add	r4, r3
 800790c:	6025      	str	r5, [r4, #0]
 800790e:	e004      	b.n	800791a <_malloc_r+0x72>
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	42a2      	cmp	r2, r4
 8007914:	bf0c      	ite	eq
 8007916:	600b      	streq	r3, [r1, #0]
 8007918:	6053      	strne	r3, [r2, #4]
 800791a:	4630      	mov	r0, r6
 800791c:	f000 f85a 	bl	80079d4 <__malloc_unlock>
 8007920:	f104 000b 	add.w	r0, r4, #11
 8007924:	1d23      	adds	r3, r4, #4
 8007926:	f020 0007 	bic.w	r0, r0, #7
 800792a:	1ac2      	subs	r2, r0, r3
 800792c:	d0cc      	beq.n	80078c8 <_malloc_r+0x20>
 800792e:	1a1b      	subs	r3, r3, r0
 8007930:	50a3      	str	r3, [r4, r2]
 8007932:	e7c9      	b.n	80078c8 <_malloc_r+0x20>
 8007934:	4622      	mov	r2, r4
 8007936:	6864      	ldr	r4, [r4, #4]
 8007938:	e7cc      	b.n	80078d4 <_malloc_r+0x2c>
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d0e3      	beq.n	800790c <_malloc_r+0x64>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f82e 	bl	80079a8 <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d1dd      	bne.n	800790c <_malloc_r+0x64>
 8007950:	e7cf      	b.n	80078f2 <_malloc_r+0x4a>
 8007952:	bf00      	nop
 8007954:	200000d4 	.word	0x200000d4
 8007958:	200000d8 	.word	0x200000d8

0800795c <_realloc_r>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	4607      	mov	r7, r0
 8007960:	4614      	mov	r4, r2
 8007962:	460e      	mov	r6, r1
 8007964:	b921      	cbnz	r1, 8007970 <_realloc_r+0x14>
 8007966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800796a:	4611      	mov	r1, r2
 800796c:	f7ff bf9c 	b.w	80078a8 <_malloc_r>
 8007970:	b922      	cbnz	r2, 800797c <_realloc_r+0x20>
 8007972:	f7ff ff49 	bl	8007808 <_free_r>
 8007976:	4625      	mov	r5, r4
 8007978:	4628      	mov	r0, r5
 800797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797c:	f000 f830 	bl	80079e0 <_malloc_usable_size_r>
 8007980:	42a0      	cmp	r0, r4
 8007982:	d20f      	bcs.n	80079a4 <_realloc_r+0x48>
 8007984:	4621      	mov	r1, r4
 8007986:	4638      	mov	r0, r7
 8007988:	f7ff ff8e 	bl	80078a8 <_malloc_r>
 800798c:	4605      	mov	r5, r0
 800798e:	2800      	cmp	r0, #0
 8007990:	d0f2      	beq.n	8007978 <_realloc_r+0x1c>
 8007992:	4631      	mov	r1, r6
 8007994:	4622      	mov	r2, r4
 8007996:	f7ff ff0f 	bl	80077b8 <memcpy>
 800799a:	4631      	mov	r1, r6
 800799c:	4638      	mov	r0, r7
 800799e:	f7ff ff33 	bl	8007808 <_free_r>
 80079a2:	e7e9      	b.n	8007978 <_realloc_r+0x1c>
 80079a4:	4635      	mov	r5, r6
 80079a6:	e7e7      	b.n	8007978 <_realloc_r+0x1c>

080079a8 <_sbrk_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d06      	ldr	r5, [pc, #24]	; (80079c4 <_sbrk_r+0x1c>)
 80079ac:	2300      	movs	r3, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	f7fa f852 	bl	8001a5c <_sbrk>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_sbrk_r+0x1a>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_sbrk_r+0x1a>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	200002f0 	.word	0x200002f0

080079c8 <__malloc_lock>:
 80079c8:	4801      	ldr	r0, [pc, #4]	; (80079d0 <__malloc_lock+0x8>)
 80079ca:	f000 b811 	b.w	80079f0 <__retarget_lock_acquire_recursive>
 80079ce:	bf00      	nop
 80079d0:	200002f8 	.word	0x200002f8

080079d4 <__malloc_unlock>:
 80079d4:	4801      	ldr	r0, [pc, #4]	; (80079dc <__malloc_unlock+0x8>)
 80079d6:	f000 b80c 	b.w	80079f2 <__retarget_lock_release_recursive>
 80079da:	bf00      	nop
 80079dc:	200002f8 	.word	0x200002f8

080079e0 <_malloc_usable_size_r>:
 80079e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e4:	1f18      	subs	r0, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bfbc      	itt	lt
 80079ea:	580b      	ldrlt	r3, [r1, r0]
 80079ec:	18c0      	addlt	r0, r0, r3
 80079ee:	4770      	bx	lr

080079f0 <__retarget_lock_acquire_recursive>:
 80079f0:	4770      	bx	lr

080079f2 <__retarget_lock_release_recursive>:
 80079f2:	4770      	bx	lr

080079f4 <_init>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr

08007a00 <_fini>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr
