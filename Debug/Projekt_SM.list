
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007754  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079cc  080079cc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d4  080079d4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080079dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200000a8  08007a80  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08007a80  00020300  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a4c  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7b  00000000  00000000  00037b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002998c  00000000  00000000  0003c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bdf  00000000  00000000  00066304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010179c  00000000  00000000  0007bee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0017d67f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a34  00000000  00000000  0017d748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800793c 	.word	0x0800793c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	0800793c 	.word	0x0800793c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	4613      	mov	r3, r2
 80005f8:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 fa98 	bl	8000b30 <null_ptr_check>
 8000600:	4603      	mov	r3, r0
 8000602:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11c      	bne.n	8000646 <bmp280_get_regs+0x5e>
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d019      	beq.n	8000646 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000620:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685c      	ldr	r4, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7858      	ldrb	r0, [r3, #1]
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	b29b      	uxth	r3, r3
 800062e:	7bf9      	ldrb	r1, [r7, #15]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	47a0      	blx	r4
 8000634:	4603      	mov	r3, r0
 8000636:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d004      	beq.n	800064a <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000640:	23fc      	movs	r3, #252	; 0xfc
 8000642:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000644:	e001      	b.n	800064a <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000646:	23ff      	movs	r3, #255	; 0xff
 8000648:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800064a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800064e:	4618      	mov	r0, r3
 8000650:	371c      	adds	r7, #28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}

08000656 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000656:	b590      	push	{r4, r7, lr}
 8000658:	b089      	sub	sp, #36	; 0x24
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4613      	mov	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d901      	bls.n	8000670 <bmp280_set_regs+0x1a>
    {
        len = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	f000 fa5d 	bl	8000b30 <null_ptr_check>
 8000676:	4603      	mov	r3, r0
 8000678:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800067a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d14d      	bne.n	800071e <bmp280_set_regs+0xc8>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d04a      	beq.n	800071e <bmp280_set_regs+0xc8>
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d047      	beq.n	800071e <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d041      	beq.n	8000718 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d114      	bne.n	80006cc <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	76fb      	strb	r3, [r7, #27]
 80006a6:	e00d      	b.n	80006c4 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80006a8:	7efb      	ldrb	r3, [r7, #27]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	7efb      	ldrb	r3, [r7, #27]
 80006b2:	68f9      	ldr	r1, [r7, #12]
 80006b4:	440b      	add	r3, r1
 80006b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006be:	7efb      	ldrb	r3, [r7, #27]
 80006c0:	3301      	adds	r3, #1
 80006c2:	76fb      	strb	r3, [r7, #27]
 80006c4:	7efa      	ldrb	r2, [r7, #27]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3ed      	bcc.n	80006a8 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d90d      	bls.n	80006ee <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f107 0110 	add.w	r1, r7, #16
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f000 fa48 	bl	8000b70 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	3b01      	subs	r3, #1
 80006ea:	83bb      	strh	r3, [r7, #28]
 80006ec:	e001      	b.n	80006f2 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689c      	ldr	r4, [r3, #8]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	7858      	ldrb	r0, [r3, #1]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	7819      	ldrb	r1, [r3, #0]
 80006fe:	8bbb      	ldrh	r3, [r7, #28]
 8000700:	f107 0210 	add.w	r2, r7, #16
 8000704:	47a0      	blx	r4
 8000706:	4603      	mov	r3, r0
 8000708:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 800070a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000712:	23fc      	movs	r3, #252	; 0xfc
 8000714:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000716:	e005      	b.n	8000724 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000718:	23fd      	movs	r3, #253	; 0xfd
 800071a:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800071c:	e002      	b.n	8000724 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800071e:	23ff      	movs	r3, #255	; 0xff
 8000720:	77fb      	strb	r3, [r7, #31]
 8000722:	e000      	b.n	8000726 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000724:	bf00      	nop
    }

    return rslt;
 8000726:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd90      	pop	{r4, r7, pc}

08000732 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800073a:	23e0      	movs	r3, #224	; 0xe0
 800073c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800073e:	23b6      	movs	r3, #182	; 0xb6
 8000740:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f9f4 	bl	8000b30 <null_ptr_check>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10d      	bne.n	8000770 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000754:	f107 010d 	add.w	r1, r7, #13
 8000758:	f107 000e 	add.w	r0, r7, #14
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2201      	movs	r2, #1
 8000760:	f7ff ff79 	bl	8000656 <bmp280_set_regs>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	2002      	movs	r0, #2
 800076e:	4798      	blx	r3
    }

    return rslt;
 8000770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000784:	2305      	movs	r3, #5
 8000786:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f9d1 	bl	8000b30 <null_ptr_check>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d150      	bne.n	800083c <bmp280_init+0xc0>
    {
        while (try_count)
 800079a:	e02d      	b.n	80007f8 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	20d0      	movs	r0, #208	; 0xd0
 80007a4:	f7ff ff20 	bl	80005e8 <bmp280_get_regs>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11a      	bne.n	80007ea <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80007b8:	2b56      	cmp	r3, #86	; 0x56
 80007ba:	d007      	beq.n	80007cc <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b57      	cmp	r3, #87	; 0x57
 80007c2:	d003      	beq.n	80007cc <bmp280_init+0x50>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b58      	cmp	r3, #88	; 0x58
 80007ca:	d10e      	bne.n	80007ea <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffb0 	bl	8000732 <bmp280_soft_reset>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d110      	bne.n	8000800 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f9f2 	bl	8000bc8 <get_calib_param>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007e8:	e00a      	b.n	8000800 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	200a      	movs	r0, #10
 80007f0:	4798      	blx	r3
            --try_count;
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ce      	bne.n	800079c <bmp280_init+0x20>
 80007fe:	e000      	b.n	8000802 <bmp280_init+0x86>
                break;
 8000800:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000808:	23fe      	movs	r3, #254	; 0xfe
 800080a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 800080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d113      	bne.n	800083c <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000852:	2300      	movs	r3, #0
 8000854:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000856:	6838      	ldr	r0, [r7, #0]
 8000858:	f000 f96a 	bl	8000b30 <null_ptr_check>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d137      	bne.n	80008d8 <bmp280_get_config+0x90>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d034      	beq.n	80008d8 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800086e:	f107 010c 	add.w	r1, r7, #12
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	2202      	movs	r2, #2
 8000876:	20f4      	movs	r0, #244	; 0xf4
 8000878:	f7ff feb6 	bl	80005e8 <bmp280_get_regs>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d129      	bne.n	80008dc <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000888:	7b3b      	ldrb	r3, [r7, #12]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	109b      	asrs	r3, r3, #2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	b2da      	uxtb	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80008a2:	7b7b      	ldrb	r3, [r7, #13]
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	109b      	asrs	r3, r3, #2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	332c      	adds	r3, #44	; 0x2c
 80008ce:	6810      	ldr	r0, [r2, #0]
 80008d0:	6018      	str	r0, [r3, #0]
 80008d2:	7912      	ldrb	r2, [r2, #4]
 80008d4:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80008d6:	e001      	b.n	80008dc <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008d8:	23ff      	movs	r3, #255	; 0xff
 80008da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fa04 	bl	8000d04 <conf_sensor>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	6039      	str	r1, [r7, #0]
 8000910:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f000 f90c 	bl	8000b30 <null_ptr_check>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800091c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f9e8 	bl	8000d04 <conf_sensor>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	2300      	movs	r3, #0
 8000954:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f000 f8ea 	bl	8000b30 <null_ptr_check>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8000960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d133      	bne.n	80009d0 <bmp280_get_uncomp_data+0x8c>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d030      	beq.n	80009d0 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 800096e:	f107 0108 	add.w	r1, r7, #8
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2206      	movs	r2, #6
 8000976:	20f7      	movs	r0, #247	; 0xf7
 8000978:	f7ff fe36 	bl	80005e8 <bmp280_get_regs>
 800097c:	4603      	mov	r3, r0
 800097e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8000980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d120      	bne.n	80009ca <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000988:	7a3b      	ldrb	r3, [r7, #8]
 800098a:	031a      	lsls	r2, r3, #12
 800098c:	7a7b      	ldrb	r3, [r7, #9]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	4313      	orrs	r3, r2
 8000992:	7aba      	ldrb	r2, [r7, #10]
 8000994:	0912      	lsrs	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	031a      	lsls	r2, r3, #12
 80009a2:	7b3b      	ldrb	r3, [r7, #12]
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	4313      	orrs	r3, r2
 80009a8:	7b7a      	ldrb	r2, [r7, #13]
 80009aa:	0912      	lsrs	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4619      	mov	r1, r3
 80009be:	4610      	mov	r0, r2
 80009c0:	f000 fa56 	bl	8000e70 <st_check_boundaries>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009c8:	e004      	b.n	80009d4 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80009ca:	23f3      	movs	r3, #243	; 0xf3
 80009cc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80009ce:	e001      	b.n	80009d4 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80009d0:	23ff      	movs	r3, #255	; 0xff
 80009d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80009d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f89f 	bl	8000b30 <null_ptr_check>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80009f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d170      	bne.n	8000ae2 <bmp280_get_comp_temp_double+0x102>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	ee07 3a90 	vmov	s15, r3
 8000a06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a0a:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8000b08 <bmp280_get_comp_temp_double+0x128>
 8000a0e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	8a1b      	ldrh	r3, [r3, #16]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000a1e:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8000b10 <bmp280_get_comp_temp_double+0x130>
 8000a22:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000a26:	ee36 6b47 	vsub.f64	d6, d6, d7
               ((double) dev->calib_param.dig_t2);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8000a38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a3c:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000b18 <bmp280_get_comp_temp_double+0x138>
 8000a4e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8a1b      	ldrh	r3, [r3, #16]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000a5e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8000b20 <bmp280_get_comp_temp_double+0x140>
 8000a62:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000a66:	ee36 6b47 	vsub.f64	d6, d6, d7
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a74:	ed9f 4b28 	vldr	d4, [pc, #160]	; 8000b18 <bmp280_get_comp_temp_double+0x138>
 8000a78:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8a1b      	ldrh	r3, [r3, #16]
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8000a88:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8000b20 <bmp280_get_comp_temp_double+0x140>
 8000a8c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000a90:	ee35 7b47 	vsub.f64	d7, d5, d7
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8000a94:	ee26 6b07 	vmul.f64	d6, d6, d7
            ((double) dev->calib_param.dig_t3);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        var2 =
 8000aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000aaa:	ed87 7b04 	vstr	d7, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8000aae:	ed97 6b06 	vldr	d6, [r7, #24]
 8000ab2:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000abe:	ee17 2a90 	vmov	r2, s15
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8000ac6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000aca:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ace:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ad2:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000b28 <bmp280_get_comp_temp_double+0x148>
 8000ad6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	ed83 7b00 	vstr	d7, [r3]
 8000ae0:	e009      	b.n	8000af6 <bmp280_get_comp_temp_double+0x116>
    }
    else
    {
        *temperature = 0;
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8000af0:	23ef      	movs	r3, #239	; 0xef
 8000af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8000af6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	f3af 8000 	nop.w
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	40d00000 	.word	0x40d00000
 8000b10:	00000000 	.word	0x00000000
 8000b14:	40900000 	.word	0x40900000
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	41000000 	.word	0x41000000
 8000b20:	00000000 	.word	0x00000000
 8000b24:	40c00000 	.word	0x40c00000
 8000b28:	00000000 	.word	0x00000000
 8000b2c:	40b40000 	.word	0x40b40000

08000b30 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <null_ptr_check+0x26>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d007      	beq.n	8000b56 <null_ptr_check+0x26>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <null_ptr_check+0x26>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000b56:	23ff      	movs	r3, #255	; 0xff
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e001      	b.n	8000b60 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
 8000b82:	e016      	b.n	8000bb2 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	441a      	add	r2, r3
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	440b      	add	r3, r1
 8000b94:	7812      	ldrb	r2, [r2, #0]
 8000b96:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	440b      	add	r3, r1
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	7dfa      	ldrb	r2, [r7, #23]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3e4      	bcc.n	8000b84 <interleave_data+0x14>
    }
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffa3 	bl	8000b30 <null_ptr_check>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d17f      	bne.n	8000cf8 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2218      	movs	r2, #24
 8000c00:	2088      	movs	r0, #136	; 0x88
 8000c02:	f7ff fcf1 	bl	80005e8 <bmp280_get_regs>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8000c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d171      	bne.n	8000cf8 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	7b3b      	ldrb	r3, [r7, #12]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000c3a:	7c7b      	ldrb	r3, [r7, #17]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	7c3b      	ldrb	r3, [r7, #16]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000c4c:	7cfb      	ldrb	r3, [r7, #19]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	7cbb      	ldrb	r3, [r7, #18]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8000c60:	7d7b      	ldrb	r3, [r7, #21]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	7d3b      	ldrb	r3, [r7, #20]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	7dbb      	ldrb	r3, [r7, #22]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000c84:	7e7b      	ldrb	r3, [r7, #25]
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	7e3b      	ldrb	r3, [r7, #24]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000c96:	7efb      	ldrb	r3, [r7, #27]
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	7ebb      	ldrb	r3, [r7, #26]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000ca8:	7f7b      	ldrb	r3, [r7, #29]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	7f3b      	ldrb	r3, [r7, #28]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000cba:	7ffb      	ldrb	r3, [r7, #31]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	7fbb      	ldrb	r3, [r7, #30]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000ccc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000d12:	2300      	movs	r3, #0
 8000d14:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8000d16:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8000d1a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff07 	bl	8000b30 <null_ptr_check>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8000d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 8095 	bne.w	8000e5a <conf_sensor+0x156>
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8091 	beq.w	8000e5a <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000d38:	f107 0114 	add.w	r1, r7, #20
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	20f4      	movs	r0, #244	; 0xf4
 8000d42:	f7ff fc51 	bl	80005e8 <bmp280_get_regs>
 8000d46:	4603      	mov	r3, r0
 8000d48:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8086 	bne.w	8000e60 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fcec 	bl	8000732 <bmp280_soft_reset>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8000d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d17c      	bne.n	8000e60 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8000d66:	7d3b      	ldrb	r3, [r7, #20]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	015b      	lsls	r3, r3, #5
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8000d80:	7d3b      	ldrb	r3, [r7, #20]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	f023 031c 	bic.w	r3, r3, #28
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	f003 031c 	and.w	r3, r3, #28
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8000da0:	7d7b      	ldrb	r3, [r7, #21]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	015b      	lsls	r3, r3, #5
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8000dba:	7d7b      	ldrb	r3, [r7, #21]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	f023 031c 	bic.w	r3, r3, #28
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f003 031c 	and.w	r3, r3, #28
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	f023 0301 	bic.w	r3, r3, #1
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8000df8:	f107 0114 	add.w	r1, r7, #20
 8000dfc:	f107 0010 	add.w	r0, r7, #16
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2202      	movs	r2, #2
 8000e04:	f7ff fc27 	bl	8000656 <bmp280_set_regs>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8000e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d125      	bne.n	8000e60 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	332c      	adds	r3, #44	; 0x2c
 8000e1a:	6810      	ldr	r0, [r2, #0]
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	7912      	ldrb	r2, [r2, #4]
 8000e20:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01b      	beq.n	8000e60 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8000e28:	7d3b      	ldrb	r3, [r7, #20]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f023 0303 	bic.w	r3, r3, #3
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8000e44:	f107 0114 	add.w	r1, r7, #20
 8000e48:	f107 0010 	add.w	r0, r7, #16
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f7ff fc01 	bl	8000656 <bmp280_set_regs>
 8000e54:	4603      	mov	r3, r0
 8000e56:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8000e58:	e002      	b.n	8000e60 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	e000      	b.n	8000e62 <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8000e60:	bf00      	nop
    }

    return rslt;
 8000e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dd03      	ble.n	8000e8c <st_check_boundaries+0x1c>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <st_check_boundaries+0x6c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	dd09      	ble.n	8000ea0 <st_check_boundaries+0x30>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	dd03      	ble.n	8000e9a <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <st_check_boundaries+0x6c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	dd02      	ble.n	8000ea0 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000e9a:	23f4      	movs	r3, #244	; 0xf4
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e015      	b.n	8000ecc <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd03      	ble.n	8000eae <st_check_boundaries+0x3e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <st_check_boundaries+0x6c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	dd02      	ble.n	8000eb4 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000eae:	23f6      	movs	r3, #246	; 0xf6
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e00b      	b.n	8000ecc <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dd03      	ble.n	8000ec2 <st_check_boundaries+0x52>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <st_check_boundaries+0x6c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	dd02      	ble.n	8000ec8 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000ec2:	23f5      	movs	r3, #245	; 0xf5
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e001      	b.n	8000ecc <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	000fffef 	.word	0x000fffef

08000ee0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	; 0x30
 8000ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b8a      	ldr	r3, [pc, #552]	; (8001120 <MX_GPIO_Init+0x240>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a89      	ldr	r2, [pc, #548]	; (8001120 <MX_GPIO_Init+0x240>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b87      	ldr	r3, [pc, #540]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b84      	ldr	r3, [pc, #528]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a83      	ldr	r2, [pc, #524]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b81      	ldr	r3, [pc, #516]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	4b7e      	ldr	r3, [pc, #504]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a7d      	ldr	r2, [pc, #500]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b7b      	ldr	r3, [pc, #492]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b78      	ldr	r3, [pc, #480]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a77      	ldr	r2, [pc, #476]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b75      	ldr	r3, [pc, #468]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b72      	ldr	r3, [pc, #456]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a71      	ldr	r2, [pc, #452]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b6f      	ldr	r3, [pc, #444]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b69      	ldr	r3, [pc, #420]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a65      	ldr	r2, [pc, #404]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b63      	ldr	r3, [pc, #396]	; (8001120 <MX_GPIO_Init+0x240>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CS1_GPIO_Port, BMP280_CS1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4860      	ldr	r0, [pc, #384]	; (8001124 <MX_GPIO_Init+0x244>)
 8000fa4:	f001 fb80 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fae:	485e      	ldr	r0, [pc, #376]	; (8001128 <MX_GPIO_Init+0x248>)
 8000fb0:	f001 fb7a 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	485c      	ldr	r0, [pc, #368]	; (800112c <MX_GPIO_Init+0x24c>)
 8000fba:	f001 fb75 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_CS1_Pin;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BMP280_CS1_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4853      	ldr	r0, [pc, #332]	; (8001124 <MX_GPIO_Init+0x244>)
 8000fd6:	f001 f9bb 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	484f      	ldr	r0, [pc, #316]	; (8001130 <MX_GPIO_Init+0x250>)
 8000ff2:	f001 f9ad 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff6:	2332      	movs	r3, #50	; 0x32
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4847      	ldr	r0, [pc, #284]	; (8001130 <MX_GPIO_Init+0x250>)
 8001012:	f001 f99d 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001016:	2386      	movs	r3, #134	; 0x86
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001026:	230b      	movs	r3, #11
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4840      	ldr	r0, [pc, #256]	; (8001134 <MX_GPIO_Init+0x254>)
 8001032:	f001 f98d 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001036:	f244 0381 	movw	r3, #16513	; 0x4081
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4836      	ldr	r0, [pc, #216]	; (8001128 <MX_GPIO_Init+0x248>)
 8001050:	f001 f97e 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	482d      	ldr	r0, [pc, #180]	; (8001128 <MX_GPIO_Init+0x248>)
 8001072:	f001 f96d 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_GPIO_Init+0x24c>)
 800108e:	f001 f95f 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_GPIO_Init+0x24c>)
 80010a6:	f001 f953 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010bc:	230a      	movs	r3, #10
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <MX_GPIO_Init+0x254>)
 80010c8:	f001 f942 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_GPIO_Init+0x254>)
 80010e2:	f001 f935 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f8:	230b      	movs	r3, #11
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <MX_GPIO_Init+0x24c>)
 8001104:	f001 f924 	bl	8002350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	f001 f856 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001112:	2028      	movs	r0, #40	; 0x28
 8001114:	f001 f86f 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40021000 	.word	0x40021000
 8001128:	40020400 	.word	0x40020400
 800112c:	40021800 	.word	0x40021800
 8001130:	40020800 	.word	0x40020800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_TIM_PeriodElapsedCallback>:
float PWM_raw;
float SWV_temp;
char odebrane[3];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b097      	sub	sp, #92	; 0x5c
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a80      	ldr	r2, [pc, #512]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001146:	4293      	cmp	r3, r2
 8001148:	f040 80b6 	bne.w	80012b8 <HAL_TIM_PeriodElapsedCallback+0x180>
	 {
		 /* Reading the raw data from sensor */
		 rslt = bmp280_get_uncomp_data(&bmp280_data, &bmp280);
 800114c:	497f      	ldr	r1, [pc, #508]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x214>)
 800114e:	4880      	ldr	r0, [pc, #512]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001150:	f7ff fbf8 	bl	8000944 <bmp280_get_uncomp_data>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b7e      	ldr	r3, [pc, #504]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800115a:	701a      	strb	r2, [r3, #0]

		 rslt = bmp280_get_comp_temp_double(&temp, bmp280_data.uncomp_temp, &bmp280);
 800115c:	4b7c      	ldr	r3, [pc, #496]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a7a      	ldr	r2, [pc, #488]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001162:	4619      	mov	r1, r3
 8001164:	487c      	ldr	r0, [pc, #496]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001166:	f7ff fc3b 	bl	80009e0 <bmp280_get_comp_temp_double>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b79      	ldr	r3, [pc, #484]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001170:	701a      	strb	r2, [r3, #0]
		 SWV_temp = (float)temp;
 8001172:	4b79      	ldr	r3, [pc, #484]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001174:	ed93 7b00 	vldr	d7, [r3]
 8001178:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800117c:	4b77      	ldr	r3, [pc, #476]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800117e:	edc3 7a00 	vstr	s15, [r3]

		 uchyb = (float)(setValue - temp);
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800118e:	4b72      	ldr	r3, [pc, #456]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001190:	ed93 7b00 	vldr	d7, [r3]
 8001194:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001198:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800119c:	4b71      	ldr	r3, [pc, #452]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800119e:	edc3 7a00 	vstr	s15, [r3]

		 PWM_raw = arm_pid_f32(&PID, uchyb);
 80011a2:	4b70      	ldr	r3, [pc, #448]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a70      	ldr	r2, [pc, #448]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80011a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80011ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011b6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80011ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80011c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80011ca:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80011ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80011d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80011da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011e4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    /* Update state */
    S->state[1] = S->state[0];
 80011f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80011f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011fc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80011fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001202:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001206:	4a59      	ldr	r2, [pc, #356]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001208:	6013      	str	r3, [r2, #0]
		 PWM = (uint16_t)(PWM_raw);
 800120a:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001214:	ee17 3a90 	vmov	r3, s15
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800121c:	801a      	strh	r2, [r3, #0]

		 if(PWM_raw>2000)
 800121e:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001374 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	dd11      	ble.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x11e>
		 {
		 	PWM=2000;
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001234:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001238:	801a      	strh	r2, [r3, #0]
		 	// arm_pid_reset_f32(&PID);
		 	if(PID.state[2] > 2500) PID.state[2] = 2500;
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800123c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001240:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001378 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dd12      	ble.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x13c>
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001250:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	e00e      	b.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x13c>
		 }
		 else if (PWM_raw<0)
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	d506      	bpl.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x13c>
		 {
		 	// arm_pid_reset_f32(&PID);
		 	PWM=0;
 8001266:	4b42      	ldr	r3, [pc, #264]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001268:	2200      	movs	r2, #0
 800126a:	801a      	strh	r2, [r3, #0]
		 	PID.state[2] = 0;
 800126c:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
		 }
		 if(PWM<=1000)
 8001274:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800127c:	d80e      	bhi.n	800129c <HAL_TIM_PeriodElapsedCallback+0x164>
		 {
			 SWV_PWM = PWM/10;
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800128e:	801a      	strh	r2, [r3, #0]
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM);
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	e00d      	b.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x180>
		 }
		 else
		 {
			 SWV_PWM = 100;
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800129e:	2264      	movs	r2, #100	; 0x64
 80012a0:	801a      	strh	r2, [r3, #0]
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, SWV_PWM*10);
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
		 }


	 }

	 if (htim->Instance == TIM4)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a33      	ldr	r2, [pc, #204]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d139      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x1fe>
	 {
		 char txData[50];
		 int text = sprintf(txData, "set_temp: %u | temp: %d.%02u | uchyb: %d\r\n",
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80012ca:	ed93 7b00 	vldr	d7, [r3]
 80012ce:	eefd 5bc7 	vcvt.s32.f64	s11, d7
		 				 	setValue, (int32_t)temp, (int32_t)((temp-(int32_t)temp)*100),
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80012d4:	ed93 6b00 	vldr	d6, [r3]
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80012da:	ed93 7b00 	vldr	d7, [r3]
 80012de:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012ea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001340 <HAL_TIM_PeriodElapsedCallback+0x208>
 80012ee:	ee27 7b06 	vmul.f64	d7, d7, d6
		 int text = sprintf(txData, "set_temp: %u | temp: %d.%02u | uchyb: %d\r\n",
 80012f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012f6:	ee17 1a90 	vmov	r1, s15
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001304:	ee17 3a90 	vmov	r3, s15
 8001308:	f107 000c 	add.w	r0, r7, #12
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9100      	str	r1, [sp, #0]
 8001310:	ee15 3a90 	vmov	r3, s11
 8001314:	491e      	ldr	r1, [pc, #120]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001316:	f005 fee3 	bl	80070e0 <siprintf>
 800131a:	64f8      	str	r0, [r7, #76]	; 0x4c
							(int32_t)uchyb);

		 HAL_UART_Transmit(&huart3, (uint8_t*)txData, text, strlen(text));
 800131c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131e:	b29c      	uxth	r4, r3
 8001320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff8c 	bl	8000240 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	f107 010c 	add.w	r1, r7, #12
 800132e:	4622      	mov	r2, r4
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001332:	f004 fbbd 	bl	8005ab0 <HAL_UART_Transmit>
	 }
}
 8001336:	bf00      	nop
 8001338:	3754      	adds	r7, #84	; 0x54
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	bf00      	nop
 8001340:	00000000 	.word	0x00000000
 8001344:	40590000 	.word	0x40590000
 8001348:	40000400 	.word	0x40000400
 800134c:	20000000 	.word	0x20000000
 8001350:	200000d4 	.word	0x200000d4
 8001354:	200000dc 	.word	0x200000dc
 8001358:	20000108 	.word	0x20000108
 800135c:	20000114 	.word	0x20000114
 8001360:	20000110 	.word	0x20000110
 8001364:	2000011c 	.word	0x2000011c
 8001368:	200000e0 	.word	0x200000e0
 800136c:	200000d0 	.word	0x200000d0
 8001370:	20000112 	.word	0x20000112
 8001374:	44fa0000 	.word	0x44fa0000
 8001378:	451c4000 	.word	0x451c4000
 800137c:	451c4000 	.word	0x451c4000
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	20000104 	.word	0x20000104
 8001388:	2000021c 	.word	0x2000021c
 800138c:	40000800 	.word	0x40000800
 8001390:	08007954 	.word	0x08007954
 8001394:	20000268 	.word	0x20000268

08001398 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	; (800140c <HAL_UART_RxCpltCallback+0x74>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d126      	bne.n	80013f8 <HAL_UART_RxCpltCallback+0x60>
//			if(PWM>100) PWM = 100;
//			else if(PWM<0) PWM = 0;
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM*10);
//		}

		if(odebrane[0]=='T')
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_UART_RxCpltCallback+0x78>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b54      	cmp	r3, #84	; 0x54
 80013b0:	d122      	bne.n	80013f8 <HAL_UART_RxCpltCallback+0x60>
		{
			//konwersja na int od 1 elementu tablicy
			setValue = ((int8_t)odebrane[1]-'0')*10+((int8_t)odebrane[2]-'0')*1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_RxCpltCallback+0x78>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	3b30      	subs	r3, #48	; 0x30
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_UART_RxCpltCallback+0x78>)
 80013c8:	789b      	ldrb	r3, [r3, #2]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b30      	subs	r3, #48	; 0x30
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_UART_RxCpltCallback+0x7c>)
 80013d8:	801a      	strh	r2, [r3, #0]
			if(setValue>40) setValue = 40;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_UART_RxCpltCallback+0x7c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	2b28      	cmp	r3, #40	; 0x28
 80013e0:	d903      	bls.n	80013ea <HAL_UART_RxCpltCallback+0x52>
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_UART_RxCpltCallback+0x7c>)
 80013e4:	2228      	movs	r2, #40	; 0x28
 80013e6:	801a      	strh	r2, [r3, #0]
 80013e8:	e006      	b.n	80013f8 <HAL_UART_RxCpltCallback+0x60>
			else if(setValue<20) setValue = 20;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_UART_RxCpltCallback+0x7c>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b13      	cmp	r3, #19
 80013f0:	d802      	bhi.n	80013f8 <HAL_UART_RxCpltCallback+0x60>
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_UART_RxCpltCallback+0x7c>)
 80013f4:	2214      	movs	r2, #20
 80013f6:	801a      	strh	r2, [r3, #0]
//			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, setValue*10);
		}
	}

	HAL_UART_Receive_IT(&huart3, (uint8_t*)odebrane, 4);
 80013f8:	2204      	movs	r2, #4
 80013fa:	4905      	ldr	r1, [pc, #20]	; (8001410 <HAL_UART_RxCpltCallback+0x78>)
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <HAL_UART_RxCpltCallback+0x80>)
 80013fe:	f004 fbea 	bl	8005bd6 <HAL_UART_Receive_IT>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40004800 	.word	0x40004800
 8001410:	20000118 	.word	0x20000118
 8001414:	20000110 	.word	0x20000110
 8001418:	20000268 	.word	0x20000268

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001422:	f000 fd70 	bl	8001f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001426:	f000 f861 	bl	80014ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142a:	f7ff fd59 	bl	8000ee0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800142e:	f000 fca9 	bl	8001d84 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8001432:	f000 f9a5 	bl	8001780 <MX_SPI4_Init>
  MX_TIM2_Init();
 8001436:	f000 fafd 	bl	8001a34 <MX_TIM2_Init>
  MX_TIM3_Init();
 800143a:	f000 fb71 	bl	8001b20 <MX_TIM3_Init>
  MX_TIM4_Init();
 800143e:	f000 fbbf 	bl	8001bc0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // ZAD. 4 ////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);
 8001442:	4820      	ldr	r0, [pc, #128]	; (80014c4 <main+0xa8>)
 8001444:	f003 f982 	bl	800474c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001448:	481f      	ldr	r0, [pc, #124]	; (80014c8 <main+0xac>)
 800144a:	f003 f97f 	bl	800474c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800144e:	210c      	movs	r1, #12
 8001450:	481e      	ldr	r0, [pc, #120]	; (80014cc <main+0xb0>)
 8001452:	f003 fa55 	bl	8004900 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)odebrane, sizeof(odebrane));
 8001456:	2203      	movs	r2, #3
 8001458:	491d      	ldr	r1, [pc, #116]	; (80014d0 <main+0xb4>)
 800145a:	481e      	ldr	r0, [pc, #120]	; (80014d4 <main+0xb8>)
 800145c:	f004 fbbb 	bl	8005bd6 <HAL_UART_Receive_IT>

  PID.Kp = PID_KP;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <main+0xbc>)
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <main+0xc0>)
 8001464:	619a      	str	r2, [r3, #24]
  PID.Ki = PID_KI * PID_TS;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <main+0xbc>)
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <main+0xc4>)
 800146a:	61da      	str	r2, [r3, #28]
  PID.Kd = PID_KD / PID_TS;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <main+0xbc>)
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <main+0xc8>)
 8001470:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID, 1);
 8001472:	2101      	movs	r1, #1
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <main+0xbc>)
 8001476:	f005 fde3 	bl	8007040 <arm_pid_init_f32>

      struct bmp280_config conf;
      uint8_t rslt = bmp280_init(&bmp280);
 800147a:	481b      	ldr	r0, [pc, #108]	; (80014e8 <main+0xcc>)
 800147c:	f7ff f97e 	bl	800077c <bmp280_init>
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
      /* Always read the current settings before writing, especially when
      * all the configuration is not modified
      */
      rslt = bmp280_get_config(&conf, &bmp280);
 8001484:	463b      	mov	r3, r7
 8001486:	4918      	ldr	r1, [pc, #96]	; (80014e8 <main+0xcc>)
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f9dd 	bl	8000848 <bmp280_get_config>
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
      /* configuring the temperature oversampling, filter coefficient and output data rate */
      /* Overwrite the desired settings */
      conf.filter = BMP280_FILTER_OFF;
 8001492:	2300      	movs	r3, #0
 8001494:	70fb      	strb	r3, [r7, #3]
      /* Temperature oversampling set at 1x */
      conf.os_temp = BMP280_OS_1X;
 8001496:	2301      	movs	r3, #1
 8001498:	703b      	strb	r3, [r7, #0]
      /* Pressure over sampling none (disabling pressure measurement) */
      conf.os_pres = BMP280_OS_1X;
 800149a:	2301      	movs	r3, #1
 800149c:	707b      	strb	r3, [r7, #1]
      /* Setting the output data rate as 1HZ(1000ms) */
      conf.odr = BMP280_ODR_1000_MS;
 800149e:	2305      	movs	r3, #5
 80014a0:	70bb      	strb	r3, [r7, #2]
      rslt = bmp280_set_config(&conf, &bmp280);
 80014a2:	463b      	mov	r3, r7
 80014a4:	4910      	ldr	r1, [pc, #64]	; (80014e8 <main+0xcc>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fa1e 	bl	80008e8 <bmp280_set_config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
      /* Always set the power mode after setting the configuration */
      rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp280);
 80014b0:	490d      	ldr	r1, [pc, #52]	; (80014e8 <main+0xcc>)
 80014b2:	2003      	movs	r0, #3
 80014b4:	f7ff fa27 	bl	8000906 <bmp280_set_power_mode>
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
      /* Pressure over sampling 1X */
      conf.os_pres = BMP280_OS_1X;
 80014bc:	2301      	movs	r3, #1
 80014be:	707b      	strb	r3, [r7, #1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <main+0xa4>
 80014c2:	bf00      	nop
 80014c4:	200001d0 	.word	0x200001d0
 80014c8:	20000184 	.word	0x20000184
 80014cc:	2000021c 	.word	0x2000021c
 80014d0:	20000118 	.word	0x20000118
 80014d4:	20000268 	.word	0x20000268
 80014d8:	200000e0 	.word	0x200000e0
 80014dc:	41200000 	.word	0x41200000
 80014e0:	3d4ccccd 	.word	0x3d4ccccd
 80014e4:	41a00000 	.word	0x41a00000
 80014e8:	20000000 	.word	0x20000000

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b094      	sub	sp, #80	; 0x50
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	2234      	movs	r2, #52	; 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 fde8 	bl	80070d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001510:	f001 f908 	bl	8002724 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <SystemClock_Config+0xcc>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <SystemClock_Config+0xcc>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <SystemClock_Config+0xcc>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <SystemClock_Config+0xd0>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <SystemClock_Config+0xd0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800154c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001550:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001560:	2390      	movs	r3, #144	; 0x90
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f8e5 	bl	8002744 <HAL_RCC_OscConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001580:	f000 f8f8 	bl	8001774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001584:	230f      	movs	r3, #15
 8001586:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001588:	2302      	movs	r3, #2
 800158a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2102      	movs	r1, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fb7d 	bl	8002ca0 <HAL_RCC_ClockConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015ac:	f000 f8e2 	bl	8001774 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3750      	adds	r7, #80	; 0x50
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000

080015c0 <bmp280_spi_reg_read>:

#define BMP280_SPI_BUFFER_LEN 28
#define BMP280_DATA_INDEX 1

int8_t bmp280_spi_reg_read ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	603a      	str	r2, [r7, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	460b      	mov	r3, r1
 80015d0:	71bb      	strb	r3, [r7, #6]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80bb      	strh	r3, [r7, #4]
	/* Implement the SPI read routine according to the target machine . */
	HAL_StatusTypeDef status = HAL_OK ;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	int32_t iError = BMP280_OK ;
 80015dc:	2300      	movs	r3, #0
 80015de:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t txarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
	uint8_t rxarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
	uint8_t stringpos ;
	txarray [0] = reg_addr ;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	/* Software slave selection procedure */
	if(cs == BMP280_CS1 ){
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d104      	bne.n	8001622 <bmp280_spi_reg_read+0x62>
		HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET );
 8001618:	2200      	movs	r2, #0
 800161a:	2110      	movs	r1, #16
 800161c:	4823      	ldr	r0, [pc, #140]	; (80016ac <bmp280_spi_reg_read+0xec>)
 800161e:	f001 f843 	bl	80026a8 <HAL_GPIO_WritePin>
	}

	/* Data exchange */
	status = HAL_SPI_TransmitReceive ( BMP280_SPI , ( uint8_t *) (& txarray ), ( uint8_t *)
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	f107 0208 	add.w	r2, r7, #8
 800162c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001630:	2005      	movs	r0, #5
 8001632:	9000      	str	r0, [sp, #0]
 8001634:	481e      	ldr	r0, [pc, #120]	; (80016b0 <bmp280_spi_reg_read+0xf0>)
 8001636:	f002 fb76 	bl	8003d26 <HAL_SPI_TransmitReceive>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			(&rxarray ), length +1, 5);
	while ( BMP280_SPI -> State == HAL_SPI_STATE_BUSY ) {};
 8001640:	bf00      	nop
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <bmp280_spi_reg_read+0xf0>)
 8001644:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d0f9      	beq.n	8001642 <bmp280_spi_reg_read+0x82>

	/* Disable all slaves */
	HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET );
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <bmp280_spi_reg_read+0xec>)
 8001654:	f001 f828 	bl	80026a8 <HAL_GPIO_WritePin>

	/* Copy data from rx buffer */
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800165e:	e011      	b.n	8001684 <bmp280_spi_reg_read+0xc4>
		reg_data [ stringpos ] = rxarray [ stringpos + BMP280_DATA_INDEX ];
 8001660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	440b      	add	r3, r1
 800166e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001672:	440a      	add	r2, r1
 8001674:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001678:	701a      	strb	r2, [r3, #0]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 800167a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800167e:	3301      	adds	r3, #1
 8001680:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001684:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001688:	b29b      	uxth	r3, r3
 800168a:	88ba      	ldrh	r2, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8e7      	bhi.n	8001660 <bmp280_spi_reg_read+0xa0>
	}

	// memcpy ( reg_data , rxarray + BMP280_DATA_INDEX , length );
	if ( status != HAL_OK ) {
 8001690:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <bmp280_spi_reg_read+0xde>
	// The BME280 API calls for 0 return value as a success , and -1 returned as failure
		iError = ( -1);
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return ( int8_t ) iError ;
 800169e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a0:	b25b      	sxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3748      	adds	r7, #72	; 0x48
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	20000120 	.word	0x20000120

080016b4 <bmp280_spi_reg_write>:

int8_t bmp280_spi_reg_write ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t length )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	603a      	str	r2, [r7, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	460b      	mov	r3, r1
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80bb      	strh	r3, [r7, #4]
	/* Implement the SPI write routine according to the target machine . */
	HAL_StatusTypeDef status = HAL_OK ;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	int32_t iError = BMP280_OK ;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t txarray [ BMP280_SPI_BUFFER_LEN ];
	uint8_t stringpos ;

	/* Copy register address and data to tx buffer */
	txarray [0] = reg_addr ;
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	733b      	strb	r3, [r7, #12]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80016de:	e011      	b.n	8001704 <bmp280_spi_reg_write+0x50>
		txarray [ stringpos + BMP280_DATA_INDEX ] = reg_data [ stringpos ];
 80016e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	441a      	add	r2, r3
 80016e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016ec:	3301      	adds	r3, #1
 80016ee:	7812      	ldrb	r2, [r2, #0]
 80016f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80016f4:	440b      	add	r3, r1
 80016f6:	f803 2c24 	strb.w	r2, [r3, #-36]
	for ( stringpos = 0; stringpos < length ; stringpos ++) {
 80016fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016fe:	3301      	adds	r3, #1
 8001700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001708:	b29b      	uxth	r3, r3
 800170a:	88ba      	ldrh	r2, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8e7      	bhi.n	80016e0 <bmp280_spi_reg_write+0x2c>
	}

	// memcpy ( txarray + BMP280_DATA_INDEX , reg_data , length );
	/* Software slave selection procedure */
	if(cs == BMP280_CS1 ){
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d104      	bne.n	8001720 <bmp280_spi_reg_write+0x6c>
		HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET );
 8001716:	2200      	movs	r2, #0
 8001718:	2110      	movs	r1, #16
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <bmp280_spi_reg_write+0xb8>)
 800171c:	f000 ffc4 	bl	80026a8 <HAL_GPIO_WritePin>
	}

	/* Data exchange */
	status = HAL_SPI_Transmit ( BMP280_SPI , ( uint8_t *) (& txarray ), length +1, 100) ;
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	f107 010c 	add.w	r1, r7, #12
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <bmp280_spi_reg_write+0xbc>)
 800172e:	f002 f98c 	bl	8003a4a <HAL_SPI_Transmit>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while ( BMP280_SPI -> State == HAL_SPI_STATE_BUSY ) {};
 8001738:	bf00      	nop
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <bmp280_spi_reg_write+0xbc>)
 800173c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d0f9      	beq.n	800173a <bmp280_spi_reg_write+0x86>

	/* Disable all slaves */
	HAL_GPIO_WritePin (BMP280_CS1_GPIO_Port, BMP280_CS1_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	2110      	movs	r1, #16
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <bmp280_spi_reg_write+0xb8>)
 800174c:	f000 ffac 	bl	80026a8 <HAL_GPIO_WritePin>
	if ( status != HAL_OK ) {
 8001750:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <bmp280_spi_reg_write+0xaa>
		// The BMP280 API calls for 0 return value as a success , and -1 returned as failure
		iError = ( -1);
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return ( int8_t ) iError ;
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	b25b      	sxtb	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	3730      	adds	r7, #48	; 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	20000120 	.word	0x20000120

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <MX_SPI4_Init+0x74>)
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <MX_SPI4_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_SPI4_Init+0x74>)
 800178c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001790:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_SPI4_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_SPI4_Init+0x74>)
 800179a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800179e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017b6:	2218      	movs	r2, #24
 80017b8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017ce:	2207      	movs	r2, #7
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_SPI4_Init+0x74>)
 80017e0:	f002 f888 	bl	80038f4 <HAL_SPI_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f7ff ffc3 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000120 	.word	0x20000120
 80017f8:	40013400 	.word	0x40013400

080017fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12f      	bne.n	800187e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_SPI_MspInit+0x90>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a14      	ldr	r2, [pc, #80]	; (800188c <HAL_SPI_MspInit+0x90>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800184e:	2364      	movs	r3, #100	; 0x64
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800185e:	2305      	movs	r3, #5
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <HAL_SPI_MspInit+0x94>)
 800186a:	f000 fd71 	bl	8002350 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2054      	movs	r0, #84	; 0x54
 8001874:	f000 fca3 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001878:	2054      	movs	r0, #84	; 0x54
 800187a:	f000 fcbc 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40013400 	.word	0x40013400
 800188c:	40023800 	.word	0x40023800
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x44>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_MspInit+0x44>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x44>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x44>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x44>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x44>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 fb2a 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM2_IRQHandler+0x10>)
 8001936:	f003 f8dd 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000021c 	.word	0x2000021c

08001944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM3_IRQHandler+0x10>)
 800194a:	f003 f8d3 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001d0 	.word	0x200001d0

08001958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM4_IRQHandler+0x10>)
 800195e:	f003 f8c9 	bl	8004af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000184 	.word	0x20000184

0800196c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <USART3_IRQHandler+0x10>)
 8001972:	f004 f97f 	bl	8005c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000268 	.word	0x20000268

08001980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001984:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001988:	f000 fea8 	bl	80026dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <SPI4_IRQHandler+0x10>)
 8001996:	f002 fbd9 	bl	800414c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000120 	.word	0x20000120

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f005 fb52 	bl	800707c <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20080000 	.word	0x20080000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	200000c4 	.word	0x200000c4
 8001a0c:	20000300 	.word	0x20000300

08001a10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <SystemInit+0x20>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SystemInit+0x20>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	615a      	str	r2, [r3, #20]
 8001a64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a70:	2247      	movs	r2, #71	; 0x47
 8001a72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a8e:	4823      	ldr	r0, [pc, #140]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001a90:	f002 fe04 	bl	800469c <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a9a:	f7ff fe6b 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481c      	ldr	r0, [pc, #112]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001aac:	f003 fa56 	bl	8004f5c <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ab6:	f7ff fe5d 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aba:	4818      	ldr	r0, [pc, #96]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001abc:	f002 febe 	bl	800483c <HAL_TIM_PWM_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ac6:	f7ff fe55 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4810      	ldr	r0, [pc, #64]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001ada:	f003 feef 	bl	80058bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ae4:	f7ff fe46 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae8:	2360      	movs	r3, #96	; 0x60
 8001aea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	220c      	movs	r2, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001b00:	f003 f918 	bl	8004d34 <HAL_TIM_PWM_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b0a:	f7ff fe33 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b0e:	4803      	ldr	r0, [pc, #12]	; (8001b1c <MX_TIM2_Init+0xe8>)
 8001b10:	f000 f902 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 8001b14:	bf00      	nop
 8001b16:	3738      	adds	r7, #56	; 0x38
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000021c 	.word	0x2000021c

08001b20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <MX_TIM3_Init+0x9c>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b46:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b68:	f002 fd98 	bl	800469c <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b72:	f7ff fdff 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b84:	f003 f9ea 	bl	8004f5c <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b8e:	f7ff fdf1 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001ba0:	f003 fe8c 	bl	80058bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001baa:	f7ff fde3 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001d0 	.word	0x200001d0
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001be0:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <MX_TIM4_Init+0x9c>)
 8001be2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001be6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001bea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001bf4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001c08:	f002 fd48 	bl	800469c <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001c12:	f7ff fdaf 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001c24:	f003 f99a 	bl	8004f5c <HAL_TIM_ConfigClockSource>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001c2e:	f7ff fda1 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_TIM4_Init+0x98>)
 8001c40:	f003 fe3c 	bl	80058bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001c4a:	f7ff fd93 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000184 	.word	0x20000184
 8001c5c:	40000800 	.word	0x40000800

08001c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d114      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	201c      	movs	r0, #28
 8001c90:	f000 fa95 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c94:	201c      	movs	r0, #28
 8001c96:	f000 faae 	bl	80021f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c9a:	e032      	b.n	8001d02 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_TIM_Base_MspInit+0xb0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d114      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201d      	movs	r0, #29
 8001cc4:	f000 fa7b 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc8:	201d      	movs	r0, #29
 8001cca:	f000 fa94 	bl	80021f6 <HAL_NVIC_EnableIRQ>
}
 8001cce:	e018      	b.n	8001d02 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_TIM_Base_MspInit+0xb4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d113      	bne.n	8001d02 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_TIM_Base_MspInit+0xac>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201e      	movs	r0, #30
 8001cf8:	f000 fa61 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f000 fa7a 	bl	80021f6 <HAL_NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40000800 	.word	0x40000800

08001d18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d11b      	bne.n	8001d72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_TIM_MspPostInit+0x64>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_TIM_MspPostInit+0x64>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_TIM_MspPostInit+0x64>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d52:	2308      	movs	r3, #8
 8001d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <HAL_TIM_MspPostInit+0x68>)
 8001d6e:	f000 faef 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000

08001d84 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d8a:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <MX_USART3_UART_Init+0x5c>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART3_UART_Init+0x58>)
 8001dc8:	f003 fe24 	bl	8005a14 <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dd2:	f7ff fccf 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000268 	.word	0x20000268
 8001de0:	40004800 	.word	0x40004800

08001de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0ae      	sub	sp, #184	; 0xb8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2290      	movs	r2, #144	; 0x90
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 f963 	bl	80070d0 <memset>
  if(uartHandle->Instance==USART3)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_UART_MspInit+0xc4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d144      	bne.n	8001e9e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 f93e 	bl	80030a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e2e:	f7ff fca1 	bl	8001774 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_UART_MspInit+0xc8>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_UART_MspInit+0xc8>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_UART_MspInit+0xc8>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_UART_MspInit+0xc8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_UART_MspInit+0xc8>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0xc8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <HAL_UART_MspInit+0xcc>)
 8001e8a:	f000 fa61 	bl	8002350 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2027      	movs	r0, #39	; 0x27
 8001e94:	f000 f993 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e98:	2027      	movs	r0, #39	; 0x27
 8001e9a:	f000 f9ac 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	37b8      	adds	r7, #184	; 0xb8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40004800 	.word	0x40004800
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020c00 	.word	0x40020c00

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	; (8001f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ede:	f7ff fd97 	bl	8001a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f005 f8d1 	bl	8007088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7ff fa99 	bl	800141c <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001ef8:	080079dc 	.word	0x080079dc
  ldr r2, =_sbss
 8001efc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001f00:	20000300 	.word	0x20000300

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>

08001f06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f000 f94c 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f805 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f16:	f7ff fcbd 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f967 	bl	8002212 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f92f 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000034 	.word	0x20000034
 8001f78:	2000003c 	.word	0x2000003c
 8001f7c:	20000038 	.word	0x20000038

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2000003c 	.word	0x2000003c
 8001fa4:	200002ec 	.word	0x200002ec

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200002ec 	.word	0x200002ec

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000003c 	.word	0x2000003c

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	4313      	orrs	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	05fa0000 	.word	0x05fa0000

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff feb6 	bl	8001fa8 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d008      	beq.n	800225c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e052      	b.n	8002302 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0216 	bic.w	r2, r2, #22
 800226a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <HAL_DMA_Abort+0x62>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e013      	b.n	80022d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff fe7b 	bl	8001fa8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d90c      	bls.n	80022d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e015      	b.n	8002302 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e4      	bne.n	80022ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e00c      	b.n	8002342 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2205      	movs	r2, #5
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e175      	b.n	800265c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 8164 	bne.w	8002656 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x56>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80be 	beq.w	8002656 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_GPIO_Init+0x324>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a65      	ldr	r2, [pc, #404]	; (8002674 <HAL_GPIO_Init+0x324>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_GPIO_Init+0x324>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024f2:	4a61      	ldr	r2, [pc, #388]	; (8002678 <HAL_GPIO_Init+0x328>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_GPIO_Init+0x32c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d037      	beq.n	800258e <HAL_GPIO_Init+0x23e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_GPIO_Init+0x330>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d031      	beq.n	800258a <HAL_GPIO_Init+0x23a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a56      	ldr	r2, [pc, #344]	; (8002684 <HAL_GPIO_Init+0x334>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02b      	beq.n	8002586 <HAL_GPIO_Init+0x236>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a55      	ldr	r2, [pc, #340]	; (8002688 <HAL_GPIO_Init+0x338>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d025      	beq.n	8002582 <HAL_GPIO_Init+0x232>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_GPIO_Init+0x33c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01f      	beq.n	800257e <HAL_GPIO_Init+0x22e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a53      	ldr	r2, [pc, #332]	; (8002690 <HAL_GPIO_Init+0x340>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d019      	beq.n	800257a <HAL_GPIO_Init+0x22a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_GPIO_Init+0x344>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0x226>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_GPIO_Init+0x348>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_GPIO_Init+0x222>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_GPIO_Init+0x34c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x21e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <HAL_GPIO_Init+0x350>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_GPIO_Init+0x21a>
 8002566:	2309      	movs	r3, #9
 8002568:	e012      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800256a:	230a      	movs	r3, #10
 800256c:	e010      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800256e:	2308      	movs	r3, #8
 8002570:	e00e      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002572:	2307      	movs	r3, #7
 8002574:	e00c      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002576:	2306      	movs	r3, #6
 8002578:	e00a      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800257a:	2305      	movs	r3, #5
 800257c:	e008      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800257e:	2304      	movs	r3, #4
 8002580:	e006      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002582:	2303      	movs	r3, #3
 8002584:	e004      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002586:	2302      	movs	r3, #2
 8002588:	e002      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800258e:	2300      	movs	r3, #0
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f002 0203 	and.w	r2, r2, #3
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	4093      	lsls	r3, r2
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025a0:	4935      	ldr	r1, [pc, #212]	; (8002678 <HAL_GPIO_Init+0x328>)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_GPIO_Init+0x354>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_GPIO_Init+0x354>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_GPIO_Init+0x354>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_GPIO_Init+0x354>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3301      	adds	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b0f      	cmp	r3, #15
 8002660:	f67f ae86 	bls.w	8002370 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40013800 	.word	0x40013800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400
 8002684:	40020800 	.word	0x40020800
 8002688:	40020c00 	.word	0x40020c00
 800268c:	40021000 	.word	0x40021000
 8002690:	40021400 	.word	0x40021400
 8002694:	40021800 	.word	0x40021800
 8002698:	40021c00 	.word	0x40021c00
 800269c:	40022000 	.word	0x40022000
 80026a0:	40022400 	.word	0x40022400
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f806 	bl	800270c <HAL_GPIO_EXTI_Callback>
  }
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e29b      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002774:	4b93      	ldr	r3, [pc, #588]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
 8002780:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <HAL_RCC_OscConfig+0x130>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d168      	bne.n	8002874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e275      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x7a>
 80027b0:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a83      	ldr	r2, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x9c>
 80027c6:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7e      	ldr	r2, [pc, #504]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b7c      	ldr	r3, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7b      	ldr	r2, [pc, #492]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xc0>
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a72      	ldr	r2, [pc, #456]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 8002804:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6b      	ldr	r2, [pc, #428]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff fbc0 	bl	8001fa8 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff fbbc 	bl	8001fa8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e229      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe8>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff fbac 	bl	8001fa8 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fba8 	bl	8001fa8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e215      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x110>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d069      	beq.n	8002956 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x190>
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x17a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1e9      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	493d      	ldr	r1, [pc, #244]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e040      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a38      	ldr	r2, [pc, #224]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fb5e 	bl	8001fa8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fb5a 	bl	8001fa8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1c7      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4929      	ldr	r1, [pc, #164]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7ff fb3a 	bl	8001fa8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002938:	f7ff fb36 	bl	8001fa8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1a3      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d038      	beq.n	80029d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7ff fb17 	bl	8001fa8 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7ff fb13 	bl	8001fa8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e180      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x23a>
 800299c:	e01a      	b.n	80029d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_RCC_OscConfig+0x280>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7ff fafd 	bl	8001fa8 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7ff faf9 	bl	8001fa8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d903      	bls.n	80029c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e166      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
 80029c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a4 	beq.w	8002b2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a88      	ldr	r2, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b86      	ldr	r3, [pc, #536]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0a:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a16:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7ff fac1 	bl	8001fa8 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7ff fabd 	bl	8001fa8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e12a      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3c:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x31a>
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a6f      	ldr	r2, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x33c>
 8002a66:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x35e>
 8002a88:	4b62      	ldr	r3, [pc, #392]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a61      	ldr	r2, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fa71 	bl	8001fa8 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff fa6d 	bl	8001fa8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0d8      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x386>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7ff fa5b 	bl	8001fa8 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7ff fa57 	bl	8001fa8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0c2      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a3c      	ldr	r2, [pc, #240]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80ae 	beq.w	8002c90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d06d      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d14b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a31      	ldr	r2, [pc, #196]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7ff fa28 	bl	8001fa8 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7ff fa24 	bl	8001fa8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e091      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	071b      	lsls	r3, r3, #28
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f9f6 	bl	8001fa8 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7ff f9f2 	bl	8001fa8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e05f      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
 8002bde:	e057      	b.n	8002c90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff f9dc 	bl	8001fa8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7ff f9d8 	bl	8001fa8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e045      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4b0>
 8002c12:	e03d      	b.n	8002c90 <HAL_RCC_OscConfig+0x54c>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <HAL_RCC_OscConfig+0x558>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d030      	beq.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d129      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d122      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d119      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10f      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0d0      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4965      	ldr	r1, [pc, #404]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d040      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e073      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4936      	ldr	r1, [pc, #216]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7ff f908 	bl	8001fa8 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7ff f904 	bl	8001fa8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e053      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d210      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	4922      	ldr	r1, [pc, #136]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x1cc>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1d0>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1d4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f864 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08007980 	.word	0x08007980
 8002e70:	20000034 	.word	0x20000034
 8002e74:	20000038 	.word	0x20000038

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4b67      	ldr	r3, [pc, #412]	; (8003030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	f200 80bd 	bhi.w	800301c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x34>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eaa:	e0b7      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b61      	ldr	r3, [pc, #388]	; (8003034 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002eae:	60bb      	str	r3, [r7, #8]
      break;
 8002eb0:	e0b7      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002eb4:	60bb      	str	r3, [r7, #8]
      break;
 8002eb6:	e0b4      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ec2:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04d      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b58      	ldr	r3, [pc, #352]	; (8003030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	ea02 0800 	and.w	r8, r2, r0
 8002ee6:	ea03 0901 	and.w	r9, r3, r1
 8002eea:	4640      	mov	r0, r8
 8002eec:	4649      	mov	r1, r9
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	014b      	lsls	r3, r1, #5
 8002ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002efc:	0142      	lsls	r2, r0, #5
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	ebb0 0008 	subs.w	r0, r0, r8
 8002f06:	eb61 0109 	sbc.w	r1, r1, r9
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	018b      	lsls	r3, r1, #6
 8002f14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f18:	0182      	lsls	r2, r0, #6
 8002f1a:	1a12      	subs	r2, r2, r0
 8002f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f20:	f04f 0000 	mov.w	r0, #0
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	00d9      	lsls	r1, r3, #3
 8002f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f2e:	00d0      	lsls	r0, r2, #3
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	eb12 0208 	adds.w	r2, r2, r8
 8002f38:	eb43 0309 	adc.w	r3, r3, r9
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	0259      	lsls	r1, r3, #9
 8002f46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f4a:	0250      	lsls	r0, r2, #9
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f7fd f9c8 	bl	80002f0 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4613      	mov	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e04a      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	099b      	lsrs	r3, r3, #6
 8002f70:	461a      	mov	r2, r3
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	ea02 0400 	and.w	r4, r2, r0
 8002f82:	ea03 0501 	and.w	r5, r3, r1
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	014b      	lsls	r3, r1, #5
 8002f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f98:	0142      	lsls	r2, r0, #5
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	1b00      	subs	r0, r0, r4
 8002fa0:	eb61 0105 	sbc.w	r1, r1, r5
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	018b      	lsls	r3, r1, #6
 8002fae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fb2:	0182      	lsls	r2, r0, #6
 8002fb4:	1a12      	subs	r2, r2, r0
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	00d9      	lsls	r1, r3, #3
 8002fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc8:	00d0      	lsls	r0, r2, #3
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	1912      	adds	r2, r2, r4
 8002fd0:	eb45 0303 	adc.w	r3, r5, r3
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	0299      	lsls	r1, r3, #10
 8002fde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fe2:	0290      	lsls	r0, r2, #10
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	f7fd f97c 	bl	80002f0 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	60bb      	str	r3, [r7, #8]
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800301e:	60bb      	str	r3, [r7, #8]
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	68bb      	ldr	r3, [r7, #8]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000034 	.word	0x20000034

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff0 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	08007990 	.word	0x08007990

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffdc 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08007990 	.word	0x08007990

080030a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030cc:	4b69      	ldr	r3, [pc, #420]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a68      	ldr	r2, [pc, #416]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d6:	6093      	str	r3, [r2, #8]
 80030d8:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	4964      	ldr	r1, [pc, #400]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030fe:	4b5d      	ldr	r3, [pc, #372]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	4959      	ldr	r1, [pc, #356]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311c:	d101      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d017      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800313a:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	494a      	ldr	r1, [pc, #296]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003158:	d101      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 808b 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	4a39      	ldr	r2, [pc, #228]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6413      	str	r3, [r2, #64]	; 0x40
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a34      	ldr	r2, [pc, #208]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe fefc 	bl	8001fa8 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe fef8 	bl	8001fa8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e38f      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d035      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d02e      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d114      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fec0 	bl	8001fa8 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe febc 	bl	8001fa8 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e351      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325a:	d111      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800326a:	400b      	ands	r3, r1
 800326c:	4901      	ldr	r1, [pc, #4]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	e00b      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	0ffffcff 	.word	0x0ffffcff
 8003280:	4bb3      	ldr	r3, [pc, #716]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4ab2      	ldr	r2, [pc, #712]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003286:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	4bb0      	ldr	r3, [pc, #704]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800328e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	49ad      	ldr	r1, [pc, #692]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800329a:	4313      	orrs	r3, r2
 800329c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d010      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032aa:	4ba9      	ldr	r3, [pc, #676]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b0:	4aa7      	ldr	r2, [pc, #668]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032ba:	4ba5      	ldr	r3, [pc, #660]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	49a2      	ldr	r1, [pc, #648]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d8:	4b9d      	ldr	r3, [pc, #628]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e6:	499a      	ldr	r1, [pc, #616]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fa:	4b95      	ldr	r3, [pc, #596]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	4991      	ldr	r1, [pc, #580]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332a:	4989      	ldr	r1, [pc, #548]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800333e:	4b84      	ldr	r3, [pc, #528]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4980      	ldr	r1, [pc, #512]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003360:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4978      	ldr	r1, [pc, #480]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003382:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f023 020c 	bic.w	r2, r3, #12
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	496f      	ldr	r1, [pc, #444]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	4967      	ldr	r1, [pc, #412]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c6:	4b62      	ldr	r3, [pc, #392]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	495e      	ldr	r1, [pc, #376]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e8:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	4956      	ldr	r1, [pc, #344]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800340a:	4b51      	ldr	r3, [pc, #324]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	494d      	ldr	r1, [pc, #308]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800342c:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	4945      	ldr	r1, [pc, #276]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800344e:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	493c      	ldr	r1, [pc, #240]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003470:	4b37      	ldr	r3, [pc, #220]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800347e:	4934      	ldr	r1, [pc, #208]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d011      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a0:	492b      	ldr	r1, [pc, #172]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b0:	d101      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	491b      	ldr	r1, [pc, #108]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034f4:	4b16      	ldr	r3, [pc, #88]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003504:	4912      	ldr	r1, [pc, #72]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003528:	4909      	ldr	r1, [pc, #36]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800353e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003542:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	e002      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	4986      	ldr	r1, [pc, #536]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800356a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	497d      	ldr	r1, [pc, #500]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d006      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80d6 	beq.w	8003740 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe fd02 	bl	8001fa8 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a8:	f7fe fcfe 	bl	8001fa8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e195      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d021      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11d      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035da:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e8:	4b61      	ldr	r3, [pc, #388]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	019a      	lsls	r2, r3, #6
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	4958      	ldr	r1, [pc, #352]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02e      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d129      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003642:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003650:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	0f1b      	lsrs	r3, r3, #28
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	019a      	lsls	r2, r3, #6
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	071b      	lsls	r3, r3, #28
 8003676:	493e      	ldr	r1, [pc, #248]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003684:	f023 021f 	bic.w	r2, r3, #31
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	3b01      	subs	r3, #1
 800368e:	4938      	ldr	r1, [pc, #224]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01d      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	0e1b      	lsrs	r3, r3, #24
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b6:	0f1b      	lsrs	r3, r3, #28
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	019a      	lsls	r2, r3, #6
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	431a      	orrs	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	4926      	ldr	r1, [pc, #152]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	019a      	lsls	r2, r3, #6
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	491a      	ldr	r1, [pc, #104]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371a:	f7fe fc45 	bl	8001fa8 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003722:	f7fe fc41 	bl	8001fa8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b64      	cmp	r3, #100	; 0x64
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0d8      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	f040 80ce 	bne.w	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fe fc28 	bl	8001fa8 <HAL_GetTick>
 8003758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800375a:	e00b      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800375c:	f7fe fc24 	bl	8001fa8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d904      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0bb      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003774:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d0ec      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d12a      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b8:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	0f1b      	lsrs	r3, r3, #28
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	019a      	lsls	r2, r3, #6
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	071b      	lsls	r3, r3, #28
 80037de:	4944      	ldr	r1, [pc, #272]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037e6:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	493d      	ldr	r1, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d022      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003814:	d11d      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	0e1b      	lsrs	r3, r3, #24
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	0f1b      	lsrs	r3, r3, #28
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	019a      	lsls	r2, r3, #6
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	431a      	orrs	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	4929      	ldr	r1, [pc, #164]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	0e1b      	lsrs	r3, r3, #24
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	019a      	lsls	r2, r3, #6
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	071b      	lsls	r3, r3, #28
 8003892:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4911      	ldr	r1, [pc, #68]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fe fb74 	bl	8001fa8 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038c4:	f7fe fb70 	bl	8001fa8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e007      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e2:	d1ef      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e09d      	b.n	8003a42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003916:	d009      	beq.n	800392c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	61da      	str	r2, [r3, #28]
 800391e:	e005      	b.n	800392c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd ff58 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800396c:	d902      	bls.n	8003974 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e002      	b.n	800397a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003978:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003982:	d007      	beq.n	8003994 <HAL_SPI_Init+0xa0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	ea42 0103 	orr.w	r1, r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	f003 0204 	and.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a10:	ea42 0103 	orr.w	r1, r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_SPI_Transmit+0x22>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e158      	b.n	8003d1e <HAL_SPI_Transmit+0x2d4>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a74:	f7fe fa98 	bl	8001fa8 <HAL_GetTick>
 8003a78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a8e:	e13d      	b.n	8003d0c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_Transmit+0x52>
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aa0:	e134      	b.n	8003d0c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	d10f      	bne.n	8003b0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d007      	beq.n	8003b2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b34:	d94b      	bls.n	8003bce <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Transmit+0xfa>
 8003b3e:	8afb      	ldrh	r3, [r7, #22]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d13e      	bne.n	8003bc2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	881a      	ldrh	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	1c9a      	adds	r2, r3, #2
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b68:	e02b      	b.n	8003bc2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d112      	bne.n	8003b9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	1c9a      	adds	r2, r3, #2
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b9c:	e011      	b.n	8003bc2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b9e:	f7fe fa03 	bl	8001fa8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d803      	bhi.n	8003bb6 <HAL_SPI_Transmit+0x16c>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d102      	bne.n	8003bbc <HAL_SPI_Transmit+0x172>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc0:	e0a4      	b.n	8003d0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ce      	bne.n	8003b6a <HAL_SPI_Transmit+0x120>
 8003bcc:	e07c      	b.n	8003cc8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Transmit+0x192>
 8003bd6:	8afb      	ldrh	r3, [r7, #22]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d170      	bne.n	8003cbe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d912      	bls.n	8003c0c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b02      	subs	r3, #2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c0a:	e058      	b.n	8003cbe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	7812      	ldrb	r2, [r2, #0]
 8003c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c32:	e044      	b.n	8003cbe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d12b      	bne.n	8003c9a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d912      	bls.n	8003c72 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b02      	subs	r3, #2
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c70:	e025      	b.n	8003cbe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c98:	e011      	b.n	8003cbe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c9a:	f7fe f985 	bl	8001fa8 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d803      	bhi.n	8003cb2 <HAL_SPI_Transmit+0x268>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d102      	bne.n	8003cb8 <HAL_SPI_Transmit+0x26e>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cbc:	e026      	b.n	8003d0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1b5      	bne.n	8003c34 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fc7b 	bl	80045c8 <SPI_EndRxTxTransaction>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e000      	b.n	8003d0c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b08a      	sub	sp, #40	; 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x26>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e1fb      	b.n	8004144 <HAL_SPI_TransmitReceive+0x41e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d54:	f7fe f928 	bl	8001fa8 <HAL_GetTick>
 8003d58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d70:	7efb      	ldrb	r3, [r7, #27]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d00e      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x6e>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7c:	d106      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x66>
 8003d86:	7efb      	ldrb	r3, [r7, #27]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d003      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d92:	e1cd      	b.n	8004130 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x80>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x80>
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dac:	e1c0      	b.n	8004130 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d003      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	887a      	ldrh	r2, [r7, #2]
 8003dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	887a      	ldrh	r2, [r7, #2]
 8003dee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e04:	d802      	bhi.n	8003e0c <HAL_SPI_TransmitReceive+0xe6>
 8003e06:	8a3b      	ldrh	r3, [r7, #16]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d908      	bls.n	8003e1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	e007      	b.n	8003e2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d007      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e54:	d97c      	bls.n	8003f50 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_TransmitReceive+0x13e>
 8003e5e:	8a7b      	ldrh	r3, [r7, #18]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d169      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e88:	e056      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x1aa>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x1aa>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d113      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d11c      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x1f2>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f14:	2301      	movs	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f18:	f7fe f846 	bl	8001fa8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d807      	bhi.n	8003f38 <HAL_SPI_TransmitReceive+0x212>
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d003      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f36:	e0fb      	b.n	8004130 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1a3      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x164>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d19d      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x164>
 8003f4e:	e0df      	b.n	8004110 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x23a>
 8003f58:	8a7b      	ldrh	r3, [r7, #18]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 80cb 	bne.w	80040f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d912      	bls.n	8003f90 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	881a      	ldrh	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b02      	subs	r3, #2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f8e:	e0b2      	b.n	80040f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb6:	e09e      	b.n	80040f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d134      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x30a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02f      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x30a>
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d12c      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d912      	bls.n	8004006 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b02      	subs	r3, #2
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004004:	e012      	b.n	800402c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d148      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x3aa>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d042      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d923      	bls.n	800409e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	b292      	uxth	r2, r2
 8004062:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b02      	subs	r3, #2
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d81f      	bhi.n	80040cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	e016      	b.n	80040cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f103 020c 	add.w	r2, r3, #12
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040cc:	2301      	movs	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040d0:	f7fd ff6a 	bl	8001fa8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040dc:	429a      	cmp	r2, r3
 80040de:	d803      	bhi.n	80040e8 <HAL_SPI_TransmitReceive+0x3c2>
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d102      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x3c8>
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040f4:	e01c      	b.n	8004130 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f af5b 	bne.w	8003fb8 <HAL_SPI_TransmitReceive+0x292>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	f47f af54 	bne.w	8003fb8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa57 	bl	80045c8 <SPI_EndRxTxTransaction>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
 800412c:	e000      	b.n	8004130 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800412e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004144:	4618      	mov	r0, r3
 8004146:	3728      	adds	r7, #40	; 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10f      	bne.n	8004190 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
    return;
 800418e:	e0d7      	b.n	8004340 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_SPI_IRQHandler+0x66>
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	09db      	lsrs	r3, r3, #7
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
    return;
 80041b0:	e0c6      	b.n	8004340 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_SPI_IRQHandler+0x8c>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 80b4 	beq.w	8004340 <HAL_SPI_IRQHandler+0x1f4>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80ad 	beq.w	8004340 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d011      	beq.n	8004222 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	e00b      	b.n	800423a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]
        return;
 8004238:	e082      	b.n	8004340 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d014      	beq.n	8004270 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424a:	f043 0201 	orr.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004280:	f043 0208 	orr.w	r2, r3, #8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004288:	2300      	movs	r3, #0
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04f      	beq.n	800433e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <HAL_SPI_IRQHandler+0x17e>
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d034      	beq.n	8004334 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0203 	bic.w	r2, r2, #3
 80042d8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d011      	beq.n	8004306 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_SPI_IRQHandler+0x1fc>)
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe f80b 	bl	800230a <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	4a0d      	ldr	r2, [pc, #52]	; (8004348 <HAL_SPI_IRQHandler+0x1fc>)
 8004314:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fff5 	bl	800230a <HAL_DMA_Abort_IT>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004332:	e003      	b.n	800433c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f809 	bl	800434c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800433a:	e000      	b.n	800433e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800433c:	bf00      	nop
    return;
 800433e:	bf00      	nop
  }
}
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	08004361 	.word	0x08004361

0800434c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ffe5 	bl	800434c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800439c:	f7fd fe04 	bl	8001fa8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4413      	add	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043ac:	f7fd fdfc 	bl	8001fa8 <HAL_GetTick>
 80043b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	0d1b      	lsrs	r3, r3, #20
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c2:	e054      	b.n	800446e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d050      	beq.n	800446e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043cc:	f7fd fdec 	bl	8001fa8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d902      	bls.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d13d      	bne.n	800445e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d111      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	d004      	beq.n	8004410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d107      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004428:	d10f      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e017      	b.n	800448e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3b01      	subs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d19b      	bne.n	80043c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000034 	.word	0x20000034

0800449c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044ae:	f7fd fd7b 	bl	8001fa8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	4413      	add	r3, r2
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80044be:	f7fd fd73 	bl	8001fa8 <HAL_GetTick>
 80044c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044cc:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	00da      	lsls	r2, r3, #3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	0d1b      	lsrs	r3, r3, #20
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044e4:	e060      	b.n	80045a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044ec:	d107      	bne.n	80044fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d050      	beq.n	80045a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004506:	f7fd fd4f 	bl	8001fa8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	429a      	cmp	r2, r3
 8004514:	d902      	bls.n	800451c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d13d      	bne.n	8004598 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800452a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004534:	d111      	bne.n	800455a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453e:	d004      	beq.n	800454a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d107      	bne.n	800455a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004562:	d10f      	bne.n	8004584 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004582:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e010      	b.n	80045ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d196      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000034 	.word	0x20000034

080045c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2200      	movs	r2, #0
 80045dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff5b 	bl	800449c <SPI_WaitFifoStateUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e046      	b.n	800468a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <SPI_EndRxTxTransaction+0xcc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a25      	ldr	r2, [pc, #148]	; (8004698 <SPI_EndRxTxTransaction+0xd0>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0d5b      	lsrs	r3, r3, #21
 8004608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d112      	bne.n	8004642 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff feb0 	bl	800438c <SPI_WaitFlagStateUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e023      	b.n	800468a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3b01      	subs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b80      	cmp	r3, #128	; 0x80
 800465a:	d0f2      	beq.n	8004642 <SPI_EndRxTxTransaction+0x7a>
 800465c:	e000      	b.n	8004660 <SPI_EndRxTxTransaction+0x98>
        break;
 800465e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2200      	movs	r2, #0
 8004668:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff ff15 	bl	800449c <SPI_WaitFifoStateUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e000      	b.n	800468a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000034 	.word	0x20000034
 8004698:	165e9f81 	.word	0x165e9f81

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e049      	b.n	8004742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd facc 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 fd30 	bl	8005140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d001      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e054      	b.n	800480e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a26      	ldr	r2, [pc, #152]	; (800481c <HAL_TIM_Base_Start_IT+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478e:	d01d      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a22      	ldr	r2, [pc, #136]	; (8004820 <HAL_TIM_Base_Start_IT+0xd4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <HAL_TIM_Base_Start_IT+0xd8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <HAL_TIM_Base_Start_IT+0xdc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <HAL_TIM_Base_Start_IT+0xe0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <HAL_TIM_Base_Start_IT+0xe4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_TIM_Base_Start_IT+0xe8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d115      	bne.n	80047f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_TIM_Base_Start_IT+0xec>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d015      	beq.n	800480a <HAL_TIM_Base_Start_IT+0xbe>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d011      	beq.n	800480a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f6:	e008      	b.n	800480a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e000      	b.n	800480c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40010400 	.word	0x40010400
 8004830:	40014000 	.word	0x40014000
 8004834:	40001800 	.word	0x40001800
 8004838:	00010007 	.word	0x00010007

0800483c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e049      	b.n	80048e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f841 	bl	80048ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 fc60 	bl	8005140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x24>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e03c      	b.n	800499e <HAL_TIM_PWM_Start+0x9e>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b04      	cmp	r3, #4
 8004928:	d109      	bne.n	800493e <HAL_TIM_PWM_Start+0x3e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e02f      	b.n	800499e <HAL_TIM_PWM_Start+0x9e>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d109      	bne.n	8004958 <HAL_TIM_PWM_Start+0x58>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e022      	b.n	800499e <HAL_TIM_PWM_Start+0x9e>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d109      	bne.n	8004972 <HAL_TIM_PWM_Start+0x72>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e015      	b.n	800499e <HAL_TIM_PWM_Start+0x9e>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d109      	bne.n	800498c <HAL_TIM_PWM_Start+0x8c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e008      	b.n	800499e <HAL_TIM_PWM_Start+0x9e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e092      	b.n	8004acc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0xb6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b4:	e023      	b.n	80049fe <HAL_TIM_PWM_Start+0xfe>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0xc6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c4:	e01b      	b.n	80049fe <HAL_TIM_PWM_Start+0xfe>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0xd6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	e013      	b.n	80049fe <HAL_TIM_PWM_Start+0xfe>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0xe6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049e4:	e00b      	b.n	80049fe <HAL_TIM_PWM_Start+0xfe>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start+0xf6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f4:	e003      	b.n	80049fe <HAL_TIM_PWM_Start+0xfe>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff32 	bl	8005870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a30      	ldr	r2, [pc, #192]	; (8004ad4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_PWM_Start+0x120>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ad8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_PWM_Start+0x124>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_TIM_PWM_Start+0x126>
 8004a24:	2300      	movs	r3, #0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a25      	ldr	r2, [pc, #148]	; (8004ad4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a22      	ldr	r2, [pc, #136]	; (8004adc <HAL_TIM_PWM_Start+0x1dc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <HAL_TIM_PWM_Start+0x1e0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <HAL_TIM_PWM_Start+0x1e4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_TIM_PWM_Start+0x1e8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_PWM_Start+0x18a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_TIM_PWM_Start+0x1ec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d115      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <HAL_TIM_PWM_Start+0x1f0>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d015      	beq.n	8004ac8 <HAL_TIM_PWM_Start+0x1c8>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa2:	d011      	beq.n	8004ac8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	e008      	b.n	8004ac8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e000      	b.n	8004aca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40010400 	.word	0x40010400
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40000c00 	.word	0x40000c00
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40001800 	.word	0x40001800
 8004af0:	00010007 	.word	0x00010007

08004af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0202 	mvn.w	r2, #2
 8004b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fae4 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fad6 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fae7 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0204 	mvn.w	r2, #4
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 faba 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 faac 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fabd 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0208 	mvn.w	r2, #8
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa90 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa82 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fa93 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0210 	mvn.w	r2, #16
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2208      	movs	r2, #8
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa66 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa58 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa69 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10e      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d107      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0201 	mvn.w	r2, #1
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fa60 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fea4 	bl	80059ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fe97 	bl	8005a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d10e      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d107      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa17 	bl	800512c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d10e      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0220 	mvn.w	r2, #32
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fe57 	bl	80059d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e0ff      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b14      	cmp	r3, #20
 8004d5e:	f200 80f0 	bhi.w	8004f42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004f43 	.word	0x08004f43
 8004d70:	08004f43 	.word	0x08004f43
 8004d74:	08004f43 	.word	0x08004f43
 8004d78:	08004dfd 	.word	0x08004dfd
 8004d7c:	08004f43 	.word	0x08004f43
 8004d80:	08004f43 	.word	0x08004f43
 8004d84:	08004f43 	.word	0x08004f43
 8004d88:	08004e3f 	.word	0x08004e3f
 8004d8c:	08004f43 	.word	0x08004f43
 8004d90:	08004f43 	.word	0x08004f43
 8004d94:	08004f43 	.word	0x08004f43
 8004d98:	08004e7f 	.word	0x08004e7f
 8004d9c:	08004f43 	.word	0x08004f43
 8004da0:	08004f43 	.word	0x08004f43
 8004da4:	08004f43 	.word	0x08004f43
 8004da8:	08004ec1 	.word	0x08004ec1
 8004dac:	08004f43 	.word	0x08004f43
 8004db0:	08004f43 	.word	0x08004f43
 8004db4:	08004f43 	.word	0x08004f43
 8004db8:	08004f01 	.word	0x08004f01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fa5c 	bl	8005280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0208 	orr.w	r2, r2, #8
 8004dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0204 	bic.w	r2, r2, #4
 8004de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6999      	ldr	r1, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	619a      	str	r2, [r3, #24]
      break;
 8004dfa:	e0a5      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 faae 	bl	8005364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	619a      	str	r2, [r3, #24]
      break;
 8004e3c:	e084      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb05 	bl	8005454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0208 	orr.w	r2, r2, #8
 8004e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0204 	bic.w	r2, r2, #4
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	61da      	str	r2, [r3, #28]
      break;
 8004e7c:	e064      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fb5b 	bl	8005540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69d9      	ldr	r1, [r3, #28]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	021a      	lsls	r2, r3, #8
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	61da      	str	r2, [r3, #28]
      break;
 8004ebe:	e043      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fb92 	bl	80055f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0208 	orr.w	r2, r2, #8
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0204 	bic.w	r2, r2, #4
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004efe:	e023      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fbc4 	bl	8005694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	021a      	lsls	r2, r3, #8
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f40:	e002      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
      break;
 8004f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop

08004f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_TIM_ConfigClockSource+0x1c>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e0b4      	b.n	80050e2 <HAL_TIM_ConfigClockSource+0x186>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4b56      	ldr	r3, [pc, #344]	; (80050ec <HAL_TIM_ConfigClockSource+0x190>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb0:	d03e      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0xd4>
 8004fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb6:	f200 8087 	bhi.w	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbe:	f000 8086 	beq.w	80050ce <HAL_TIM_ConfigClockSource+0x172>
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	d87f      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b70      	cmp	r3, #112	; 0x70
 8004fca:	d01a      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xa6>
 8004fcc:	2b70      	cmp	r3, #112	; 0x70
 8004fce:	d87b      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b60      	cmp	r3, #96	; 0x60
 8004fd2:	d050      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x11a>
 8004fd4:	2b60      	cmp	r3, #96	; 0x60
 8004fd6:	d877      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b50      	cmp	r3, #80	; 0x50
 8004fda:	d03c      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0xfa>
 8004fdc:	2b50      	cmp	r3, #80	; 0x50
 8004fde:	d873      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d058      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x13a>
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d86f      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b30      	cmp	r3, #48	; 0x30
 8004fea:	d064      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fec:	2b30      	cmp	r3, #48	; 0x30
 8004fee:	d86b      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d060      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d867      	bhi.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d05a      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005000:	e062      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f000 fc0d 	bl	8005830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	609a      	str	r2, [r3, #8]
      break;
 800502e:	e04f      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6899      	ldr	r1, [r3, #8]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f000 fbf6 	bl	8005830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005052:	609a      	str	r2, [r3, #8]
      break;
 8005054:	e03c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fb6a 	bl	800573c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2150      	movs	r1, #80	; 0x50
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fbc3 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 8005074:	e02c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	461a      	mov	r2, r3
 8005084:	f000 fb89 	bl	800579a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2160      	movs	r1, #96	; 0x60
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fbb3 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 8005094:	e01c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 fb4a 	bl	800573c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2140      	movs	r1, #64	; 0x40
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fba3 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 80050b4:	e00c      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f000 fb9a 	bl	80057fa <TIM_ITRx_SetConfig>
      break;
 80050c6:	e003      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      break;
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	fffeff88 	.word	0xfffeff88

080050f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a40      	ldr	r2, [pc, #256]	; (8005254 <TIM_Base_SetConfig+0x114>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d00f      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3d      	ldr	r2, [pc, #244]	; (8005258 <TIM_Base_SetConfig+0x118>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00b      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3c      	ldr	r2, [pc, #240]	; (800525c <TIM_Base_SetConfig+0x11c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3b      	ldr	r2, [pc, #236]	; (8005260 <TIM_Base_SetConfig+0x120>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3a      	ldr	r2, [pc, #232]	; (8005264 <TIM_Base_SetConfig+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2f      	ldr	r2, [pc, #188]	; (8005254 <TIM_Base_SetConfig+0x114>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02b      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a0:	d027      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <TIM_Base_SetConfig+0x118>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d023      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	; (800525c <TIM_Base_SetConfig+0x11c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01f      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2a      	ldr	r2, [pc, #168]	; (8005260 <TIM_Base_SetConfig+0x120>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01b      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a29      	ldr	r2, [pc, #164]	; (8005264 <TIM_Base_SetConfig+0x124>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d017      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a28      	ldr	r2, [pc, #160]	; (8005268 <TIM_Base_SetConfig+0x128>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a27      	ldr	r2, [pc, #156]	; (800526c <TIM_Base_SetConfig+0x12c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00f      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a26      	ldr	r2, [pc, #152]	; (8005270 <TIM_Base_SetConfig+0x130>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a25      	ldr	r2, [pc, #148]	; (8005274 <TIM_Base_SetConfig+0x134>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a24      	ldr	r2, [pc, #144]	; (8005278 <TIM_Base_SetConfig+0x138>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a23      	ldr	r2, [pc, #140]	; (800527c <TIM_Base_SetConfig+0x13c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <TIM_Base_SetConfig+0x114>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0xf8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <TIM_Base_SetConfig+0x124>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d103      	bne.n	8005240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	615a      	str	r2, [r3, #20]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800
 8005274:	40001800 	.word	0x40001800
 8005278:	40001c00 	.word	0x40001c00
 800527c:	40002000 	.word	0x40002000

08005280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <TIM_OC1_SetConfig+0xd8>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 0302 	bic.w	r3, r3, #2
 80052c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a21      	ldr	r2, [pc, #132]	; (800535c <TIM_OC1_SetConfig+0xdc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_OC1_SetConfig+0x64>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a20      	ldr	r2, [pc, #128]	; (8005360 <TIM_OC1_SetConfig+0xe0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10c      	bne.n	80052fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0308 	bic.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <TIM_OC1_SetConfig+0xdc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC1_SetConfig+0x8e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <TIM_OC1_SetConfig+0xe0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	fffeff8f 	.word	0xfffeff8f
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400

08005364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0210 	bic.w	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <TIM_OC2_SetConfig+0xe4>)
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0320 	bic.w	r3, r3, #32
 80053ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a23      	ldr	r2, [pc, #140]	; (800544c <TIM_OC2_SetConfig+0xe8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC2_SetConfig+0x68>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a22      	ldr	r2, [pc, #136]	; (8005450 <TIM_OC2_SetConfig+0xec>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10d      	bne.n	80053e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a18      	ldr	r2, [pc, #96]	; (800544c <TIM_OC2_SetConfig+0xe8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_OC2_SetConfig+0x94>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a17      	ldr	r2, [pc, #92]	; (8005450 <TIM_OC2_SetConfig+0xec>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d113      	bne.n	8005420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	feff8fff 	.word	0xfeff8fff
 800544c:	40010000 	.word	0x40010000
 8005450:	40010400 	.word	0x40010400

08005454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4b2d      	ldr	r3, [pc, #180]	; (8005534 <TIM_OC3_SetConfig+0xe0>)
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <TIM_OC3_SetConfig+0xe4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0x66>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a21      	ldr	r2, [pc, #132]	; (800553c <TIM_OC3_SetConfig+0xe8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10d      	bne.n	80054d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <TIM_OC3_SetConfig+0xe4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC3_SetConfig+0x92>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a16      	ldr	r2, [pc, #88]	; (800553c <TIM_OC3_SetConfig+0xe8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d113      	bne.n	800550e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	fffeff8f 	.word	0xfffeff8f
 8005538:	40010000 	.word	0x40010000
 800553c:	40010400 	.word	0x40010400

08005540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <TIM_OC4_SetConfig+0xa4>)
 800556c:	4013      	ands	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <TIM_OC4_SetConfig+0xa8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC4_SetConfig+0x68>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <TIM_OC4_SetConfig+0xac>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d109      	bne.n	80055bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	feff8fff 	.word	0xfeff8fff
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40010400 	.word	0x40010400

080055f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <TIM_OC5_SetConfig+0x98>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005630:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a12      	ldr	r2, [pc, #72]	; (800568c <TIM_OC5_SetConfig+0x9c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_OC5_SetConfig+0x5e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a11      	ldr	r2, [pc, #68]	; (8005690 <TIM_OC5_SetConfig+0xa0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d109      	bne.n	8005662 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005654:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	621a      	str	r2, [r3, #32]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	fffeff8f 	.word	0xfffeff8f
 800568c:	40010000 	.word	0x40010000
 8005690:	40010400 	.word	0x40010400

08005694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <TIM_OC6_SetConfig+0x9c>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	051b      	lsls	r3, r3, #20
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a13      	ldr	r2, [pc, #76]	; (8005734 <TIM_OC6_SetConfig+0xa0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC6_SetConfig+0x60>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <TIM_OC6_SetConfig+0xa4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d109      	bne.n	8005708 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	feff8fff 	.word	0xfeff8fff
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400

0800573c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 030a 	bic.w	r3, r3, #10
 8005778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800579a:	b480      	push	{r7}
 800579c:	b087      	sub	sp, #28
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f023 0210 	bic.w	r2, r3, #16
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	031b      	lsls	r3, r3, #12
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	f043 0307 	orr.w	r3, r3, #7
 800581c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	431a      	orrs	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	2201      	movs	r2, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1a      	ldr	r2, [r3, #32]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1a      	ldr	r2, [r3, #32]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	fa01 f303 	lsl.w	r3, r1, r3
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e06d      	b.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a30      	ldr	r2, [pc, #192]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2f      	ldr	r2, [pc, #188]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d108      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800590e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005920:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d022      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005946:	d01d      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d018      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00e      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10c      	bne.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40001800 	.word	0x40001800

080059d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e040      	b.n	8005aa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fc f9d4 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	; 0x24
 8005a40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fc18 	bl	8006288 <UART_SetConfig>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e022      	b.n	8005aa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fe6e 	bl	800674c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fef5 	bl	8006890 <UART_CheckIdleState>
 8005aa6:	4603      	mov	r3, r0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	f040 8081 	bne.w	8005bcc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_UART_Transmit+0x26>
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e079      	b.n	8005bce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UART_Transmit+0x38>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e072      	b.n	8005bce <HAL_UART_Transmit+0x11e>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2221      	movs	r2, #33	; 0x21
 8005afc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005afe:	f7fc fa53 	bl	8001fa8 <HAL_GetTick>
 8005b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1c:	d108      	bne.n	8005b30 <HAL_UART_Transmit+0x80>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e003      	b.n	8005b38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b40:	e02c      	b.n	8005b9c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fee8 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e038      	b.n	8005bce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3302      	adds	r3, #2
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e007      	b.n	8005b8a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1cc      	bne.n	8005b42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 feb5 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e005      	b.n	8005bce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b08a      	sub	sp, #40	; 0x28
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d13d      	bne.n	8005c68 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_UART_Receive_IT+0x22>
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e036      	b.n	8005c6a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Receive_IT+0x34>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e02f      	b.n	8005c6a <HAL_UART_Receive_IT+0x94>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d018      	beq.n	8005c58 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	69f9      	ldr	r1, [r7, #28]
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 ff24 	bl	8006aac <UART_Start_Receive_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	e000      	b.n	8005c6a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3728      	adds	r7, #40	; 0x28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b0ba      	sub	sp, #232	; 0xe8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d115      	bne.n	8005cdc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00f      	beq.n	8005cdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d009      	beq.n	8005cdc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 82a4 	beq.w	800621a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
      }
      return;
 8005cda:	e29e      	b.n	800621a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8117 	beq.w	8005f14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cf6:	4b85      	ldr	r3, [pc, #532]	; (8005f0c <HAL_UART_IRQHandler+0x298>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 810a 	beq.w	8005f14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d011      	beq.n	8005d30 <HAL_UART_IRQHandler+0xbc>
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d26:	f043 0201 	orr.w	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d011      	beq.n	8005d60 <HAL_UART_IRQHandler+0xec>
 8005d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d56:	f043 0204 	orr.w	r2, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d011      	beq.n	8005d90 <HAL_UART_IRQHandler+0x11c>
 8005d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	f043 0202 	orr.w	r2, r3, #2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d017      	beq.n	8005dcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2208      	movs	r2, #8
 8005dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc2:	f043 0208 	orr.w	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_UART_IRQHandler+0x18a>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 820a 	beq.w	800621e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d005      	beq.n	8005e56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04f      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fef2 	bl	8006c40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d141      	bne.n	8005eee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1d9      	bne.n	8005e6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d013      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <HAL_UART_IRQHandler+0x29c>)
 8005ec4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc fa1d 	bl	800230a <HAL_DMA_Abort_IT>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	e00f      	b.n	8005f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9ae 	bl	8006248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	e00b      	b.n	8005f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9aa 	bl	8006248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e007      	b.n	8005f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9a6 	bl	8006248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f04:	e18b      	b.n	800621e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f06:	bf00      	nop
    return;
 8005f08:	e189      	b.n	800621e <HAL_UART_IRQHandler+0x5aa>
 8005f0a:	bf00      	nop
 8005f0c:	04000120 	.word	0x04000120
 8005f10:	08006d07 	.word	0x08006d07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 8144 	bne.w	80061a6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 813d 	beq.w	80061a6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8136 	beq.w	80061a6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	f040 80b2 	bne.w	80060b6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 815d 	beq.w	8006222 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f080 8155 	bcs.w	8006222 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8c:	f000 8085 	beq.w	800609a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1da      	bne.n	8005f90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ffe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006002:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006006:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e1      	bne.n	8005fda <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800603a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800603c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e3      	bne.n	8006016 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800607c:	65bb      	str	r3, [r7, #88]	; 0x58
 800607e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006082:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800608a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e4      	bne.n	800605a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4618      	mov	r0, r3
 8006096:	f7fc f8c8 	bl	800222a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8d4 	bl	800625c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060b4:	e0b5      	b.n	8006222 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80a7 	beq.w	8006226 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80060d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80a2 	beq.w	8006226 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
 8006106:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800610a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	623b      	str	r3, [r7, #32]
   return(result);
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800613c:	633a      	str	r2, [r7, #48]	; 0x30
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e3      	bne.n	8006118 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	69b9      	ldr	r1, [r7, #24]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	617b      	str	r3, [r7, #20]
   return(result);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e4      	bne.n	8006162 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f85c 	bl	800625c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061a4:	e03f      	b.n	8006226 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00e      	beq.n	80061d0 <HAL_UART_IRQHandler+0x55c>
 80061b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f853 	bl	8006274 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ce:	e02d      	b.n	800622c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00e      	beq.n	80061fa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01c      	beq.n	800622a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
    }
    return;
 80061f8:	e017      	b.n	800622a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <HAL_UART_IRQHandler+0x5b8>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fd8d 	bl	8006d32 <UART_EndTransmit_IT>
    return;
 8006218:	e008      	b.n	800622c <HAL_UART_IRQHandler+0x5b8>
      return;
 800621a:	bf00      	nop
 800621c:	e006      	b.n	800622c <HAL_UART_IRQHandler+0x5b8>
    return;
 800621e:	bf00      	nop
 8006220:	e004      	b.n	800622c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006222:	bf00      	nop
 8006224:	e002      	b.n	800622c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006226:	bf00      	nop
 8006228:	e000      	b.n	800622c <HAL_UART_IRQHandler+0x5b8>
    return;
 800622a:	bf00      	nop
  }

}
 800622c:	37e8      	adds	r7, #232	; 0xe8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop

08006234 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4ba7      	ldr	r3, [pc, #668]	; (8006550 <UART_SetConfig+0x2c8>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	6979      	ldr	r1, [r7, #20]
 80062bc:	430b      	orrs	r3, r1
 80062be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a95      	ldr	r2, [pc, #596]	; (8006554 <UART_SetConfig+0x2cc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d120      	bne.n	8006346 <UART_SetConfig+0xbe>
 8006304:	4b94      	ldr	r3, [pc, #592]	; (8006558 <UART_SetConfig+0x2d0>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d816      	bhi.n	8006340 <UART_SetConfig+0xb8>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <UART_SetConfig+0x90>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006329 	.word	0x08006329
 800631c:	08006335 	.word	0x08006335
 8006320:	0800632f 	.word	0x0800632f
 8006324:	0800633b 	.word	0x0800633b
 8006328:	2301      	movs	r3, #1
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e14f      	b.n	80065ce <UART_SetConfig+0x346>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e14c      	b.n	80065ce <UART_SetConfig+0x346>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e149      	b.n	80065ce <UART_SetConfig+0x346>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e146      	b.n	80065ce <UART_SetConfig+0x346>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e143      	b.n	80065ce <UART_SetConfig+0x346>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a84      	ldr	r2, [pc, #528]	; (800655c <UART_SetConfig+0x2d4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d132      	bne.n	80063b6 <UART_SetConfig+0x12e>
 8006350:	4b81      	ldr	r3, [pc, #516]	; (8006558 <UART_SetConfig+0x2d0>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b0c      	cmp	r3, #12
 800635c:	d828      	bhi.n	80063b0 <UART_SetConfig+0x128>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0xdc>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006399 	.word	0x08006399
 8006368:	080063b1 	.word	0x080063b1
 800636c:	080063b1 	.word	0x080063b1
 8006370:	080063b1 	.word	0x080063b1
 8006374:	080063a5 	.word	0x080063a5
 8006378:	080063b1 	.word	0x080063b1
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080063b1 	.word	0x080063b1
 8006384:	0800639f 	.word	0x0800639f
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b1 	.word	0x080063b1
 8006390:	080063b1 	.word	0x080063b1
 8006394:	080063ab 	.word	0x080063ab
 8006398:	2300      	movs	r3, #0
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e117      	b.n	80065ce <UART_SetConfig+0x346>
 800639e:	2302      	movs	r3, #2
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e114      	b.n	80065ce <UART_SetConfig+0x346>
 80063a4:	2304      	movs	r3, #4
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e111      	b.n	80065ce <UART_SetConfig+0x346>
 80063aa:	2308      	movs	r3, #8
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e10e      	b.n	80065ce <UART_SetConfig+0x346>
 80063b0:	2310      	movs	r3, #16
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e10b      	b.n	80065ce <UART_SetConfig+0x346>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a69      	ldr	r2, [pc, #420]	; (8006560 <UART_SetConfig+0x2d8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d120      	bne.n	8006402 <UART_SetConfig+0x17a>
 80063c0:	4b65      	ldr	r3, [pc, #404]	; (8006558 <UART_SetConfig+0x2d0>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ca:	2b30      	cmp	r3, #48	; 0x30
 80063cc:	d013      	beq.n	80063f6 <UART_SetConfig+0x16e>
 80063ce:	2b30      	cmp	r3, #48	; 0x30
 80063d0:	d814      	bhi.n	80063fc <UART_SetConfig+0x174>
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d009      	beq.n	80063ea <UART_SetConfig+0x162>
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d810      	bhi.n	80063fc <UART_SetConfig+0x174>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <UART_SetConfig+0x15c>
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d006      	beq.n	80063f0 <UART_SetConfig+0x168>
 80063e2:	e00b      	b.n	80063fc <UART_SetConfig+0x174>
 80063e4:	2300      	movs	r3, #0
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e0f1      	b.n	80065ce <UART_SetConfig+0x346>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e0ee      	b.n	80065ce <UART_SetConfig+0x346>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e0eb      	b.n	80065ce <UART_SetConfig+0x346>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e0e8      	b.n	80065ce <UART_SetConfig+0x346>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e0e5      	b.n	80065ce <UART_SetConfig+0x346>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a57      	ldr	r2, [pc, #348]	; (8006564 <UART_SetConfig+0x2dc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d120      	bne.n	800644e <UART_SetConfig+0x1c6>
 800640c:	4b52      	ldr	r3, [pc, #328]	; (8006558 <UART_SetConfig+0x2d0>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006416:	2bc0      	cmp	r3, #192	; 0xc0
 8006418:	d013      	beq.n	8006442 <UART_SetConfig+0x1ba>
 800641a:	2bc0      	cmp	r3, #192	; 0xc0
 800641c:	d814      	bhi.n	8006448 <UART_SetConfig+0x1c0>
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d009      	beq.n	8006436 <UART_SetConfig+0x1ae>
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d810      	bhi.n	8006448 <UART_SetConfig+0x1c0>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <UART_SetConfig+0x1a8>
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d006      	beq.n	800643c <UART_SetConfig+0x1b4>
 800642e:	e00b      	b.n	8006448 <UART_SetConfig+0x1c0>
 8006430:	2300      	movs	r3, #0
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e0cb      	b.n	80065ce <UART_SetConfig+0x346>
 8006436:	2302      	movs	r3, #2
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e0c8      	b.n	80065ce <UART_SetConfig+0x346>
 800643c:	2304      	movs	r3, #4
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e0c5      	b.n	80065ce <UART_SetConfig+0x346>
 8006442:	2308      	movs	r3, #8
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e0c2      	b.n	80065ce <UART_SetConfig+0x346>
 8006448:	2310      	movs	r3, #16
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e0bf      	b.n	80065ce <UART_SetConfig+0x346>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a45      	ldr	r2, [pc, #276]	; (8006568 <UART_SetConfig+0x2e0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d125      	bne.n	80064a4 <UART_SetConfig+0x21c>
 8006458:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <UART_SetConfig+0x2d0>)
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006466:	d017      	beq.n	8006498 <UART_SetConfig+0x210>
 8006468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646c:	d817      	bhi.n	800649e <UART_SetConfig+0x216>
 800646e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006472:	d00b      	beq.n	800648c <UART_SetConfig+0x204>
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d811      	bhi.n	800649e <UART_SetConfig+0x216>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <UART_SetConfig+0x1fe>
 800647e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006482:	d006      	beq.n	8006492 <UART_SetConfig+0x20a>
 8006484:	e00b      	b.n	800649e <UART_SetConfig+0x216>
 8006486:	2300      	movs	r3, #0
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e0a0      	b.n	80065ce <UART_SetConfig+0x346>
 800648c:	2302      	movs	r3, #2
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e09d      	b.n	80065ce <UART_SetConfig+0x346>
 8006492:	2304      	movs	r3, #4
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e09a      	b.n	80065ce <UART_SetConfig+0x346>
 8006498:	2308      	movs	r3, #8
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e097      	b.n	80065ce <UART_SetConfig+0x346>
 800649e:	2310      	movs	r3, #16
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e094      	b.n	80065ce <UART_SetConfig+0x346>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a30      	ldr	r2, [pc, #192]	; (800656c <UART_SetConfig+0x2e4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d125      	bne.n	80064fa <UART_SetConfig+0x272>
 80064ae:	4b2a      	ldr	r3, [pc, #168]	; (8006558 <UART_SetConfig+0x2d0>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064bc:	d017      	beq.n	80064ee <UART_SetConfig+0x266>
 80064be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c2:	d817      	bhi.n	80064f4 <UART_SetConfig+0x26c>
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c8:	d00b      	beq.n	80064e2 <UART_SetConfig+0x25a>
 80064ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ce:	d811      	bhi.n	80064f4 <UART_SetConfig+0x26c>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <UART_SetConfig+0x254>
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d006      	beq.n	80064e8 <UART_SetConfig+0x260>
 80064da:	e00b      	b.n	80064f4 <UART_SetConfig+0x26c>
 80064dc:	2301      	movs	r3, #1
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e075      	b.n	80065ce <UART_SetConfig+0x346>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e072      	b.n	80065ce <UART_SetConfig+0x346>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e06f      	b.n	80065ce <UART_SetConfig+0x346>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e06c      	b.n	80065ce <UART_SetConfig+0x346>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e069      	b.n	80065ce <UART_SetConfig+0x346>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <UART_SetConfig+0x2e8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d137      	bne.n	8006574 <UART_SetConfig+0x2ec>
 8006504:	4b14      	ldr	r3, [pc, #80]	; (8006558 <UART_SetConfig+0x2d0>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800650e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006512:	d017      	beq.n	8006544 <UART_SetConfig+0x2bc>
 8006514:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006518:	d817      	bhi.n	800654a <UART_SetConfig+0x2c2>
 800651a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651e:	d00b      	beq.n	8006538 <UART_SetConfig+0x2b0>
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006524:	d811      	bhi.n	800654a <UART_SetConfig+0x2c2>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <UART_SetConfig+0x2aa>
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652e:	d006      	beq.n	800653e <UART_SetConfig+0x2b6>
 8006530:	e00b      	b.n	800654a <UART_SetConfig+0x2c2>
 8006532:	2300      	movs	r3, #0
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e04a      	b.n	80065ce <UART_SetConfig+0x346>
 8006538:	2302      	movs	r3, #2
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e047      	b.n	80065ce <UART_SetConfig+0x346>
 800653e:	2304      	movs	r3, #4
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e044      	b.n	80065ce <UART_SetConfig+0x346>
 8006544:	2308      	movs	r3, #8
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e041      	b.n	80065ce <UART_SetConfig+0x346>
 800654a:	2310      	movs	r3, #16
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e03e      	b.n	80065ce <UART_SetConfig+0x346>
 8006550:	efff69f3 	.word	0xefff69f3
 8006554:	40011000 	.word	0x40011000
 8006558:	40023800 	.word	0x40023800
 800655c:	40004400 	.word	0x40004400
 8006560:	40004800 	.word	0x40004800
 8006564:	40004c00 	.word	0x40004c00
 8006568:	40005000 	.word	0x40005000
 800656c:	40011400 	.word	0x40011400
 8006570:	40007800 	.word	0x40007800
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a71      	ldr	r2, [pc, #452]	; (8006740 <UART_SetConfig+0x4b8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d125      	bne.n	80065ca <UART_SetConfig+0x342>
 800657e:	4b71      	ldr	r3, [pc, #452]	; (8006744 <UART_SetConfig+0x4bc>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006588:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800658c:	d017      	beq.n	80065be <UART_SetConfig+0x336>
 800658e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006592:	d817      	bhi.n	80065c4 <UART_SetConfig+0x33c>
 8006594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006598:	d00b      	beq.n	80065b2 <UART_SetConfig+0x32a>
 800659a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659e:	d811      	bhi.n	80065c4 <UART_SetConfig+0x33c>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <UART_SetConfig+0x324>
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a8:	d006      	beq.n	80065b8 <UART_SetConfig+0x330>
 80065aa:	e00b      	b.n	80065c4 <UART_SetConfig+0x33c>
 80065ac:	2300      	movs	r3, #0
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e00d      	b.n	80065ce <UART_SetConfig+0x346>
 80065b2:	2302      	movs	r3, #2
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e00a      	b.n	80065ce <UART_SetConfig+0x346>
 80065b8:	2304      	movs	r3, #4
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e007      	b.n	80065ce <UART_SetConfig+0x346>
 80065be:	2308      	movs	r3, #8
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e004      	b.n	80065ce <UART_SetConfig+0x346>
 80065c4:	2310      	movs	r3, #16
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e001      	b.n	80065ce <UART_SetConfig+0x346>
 80065ca:	2310      	movs	r3, #16
 80065cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d6:	d15a      	bne.n	800668e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d827      	bhi.n	800662e <UART_SetConfig+0x3a6>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x35c>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	0800662f 	.word	0x0800662f
 80065f4:	0800661f 	.word	0x0800661f
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	0800662f 	.word	0x0800662f
 8006600:	0800662f 	.word	0x0800662f
 8006604:	08006627 	.word	0x08006627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fc fd24 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 800660c:	61b8      	str	r0, [r7, #24]
        break;
 800660e:	e013      	b.n	8006638 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fc fd34 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8006614:	61b8      	str	r0, [r7, #24]
        break;
 8006616:	e00f      	b.n	8006638 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006618:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <UART_SetConfig+0x4c0>)
 800661a:	61bb      	str	r3, [r7, #24]
        break;
 800661c:	e00c      	b.n	8006638 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661e:	f7fc fc2b 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8006622:	61b8      	str	r0, [r7, #24]
        break;
 8006624:	e008      	b.n	8006638 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	61bb      	str	r3, [r7, #24]
        break;
 800662c:	e004      	b.n	8006638 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	77bb      	strb	r3, [r7, #30]
        break;
 8006636:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d074      	beq.n	8006728 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	005a      	lsls	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d916      	bls.n	8006688 <UART_SetConfig+0x400>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d212      	bcs.n	8006688 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f023 030f 	bic.w	r3, r3, #15
 800666a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	b29b      	uxth	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b29a      	uxth	r2, r3
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	4313      	orrs	r3, r2
 800667c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	89fa      	ldrh	r2, [r7, #14]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	e04f      	b.n	8006728 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77bb      	strb	r3, [r7, #30]
 800668c:	e04c      	b.n	8006728 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668e:	7ffb      	ldrb	r3, [r7, #31]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d828      	bhi.n	80066e6 <UART_SetConfig+0x45e>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0x414>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066e7 	.word	0x080066e7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fc fcc8 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 80066c4:	61b8      	str	r0, [r7, #24]
        break;
 80066c6:	e013      	b.n	80066f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fc fcd8 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e00f      	b.n	80066f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <UART_SetConfig+0x4c0>)
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e00c      	b.n	80066f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fc fbcf 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 80066da:	61b8      	str	r0, [r7, #24]
        break;
 80066dc:	e008      	b.n	80066f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e2:	61bb      	str	r3, [r7, #24]
        break;
 80066e4:	e004      	b.n	80066f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	77bb      	strb	r3, [r7, #30]
        break;
 80066ee:	bf00      	nop
    }

    if (pclk != 0U)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	085a      	lsrs	r2, r3, #1
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	441a      	add	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b0f      	cmp	r3, #15
 800670e:	d909      	bls.n	8006724 <UART_SetConfig+0x49c>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006716:	d205      	bcs.n	8006724 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	e001      	b.n	8006728 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006734:	7fbb      	ldrb	r3, [r7, #30]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40007c00 	.word	0x40007c00
 8006744:	40023800 	.word	0x40023800
 8006748:	00f42400 	.word	0x00f42400

0800674c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01a      	beq.n	8006862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684a:	d10a      	bne.n	8006862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068a0:	f7fb fb82 	bl	8001fa8 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10e      	bne.n	80068d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f82d 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e023      	b.n	800691a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d10e      	bne.n	80068fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f817 	bl	8006922 <UART_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e00d      	b.n	800691a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b09c      	sub	sp, #112	; 0x70
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006932:	e0a5      	b.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	f000 80a1 	beq.w	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693e:	f7fb fb33 	bl	8001fa8 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800694a:	429a      	cmp	r2, r3
 800694c:	d302      	bcc.n	8006954 <UART_WaitOnFlagUntilTimeout+0x32>
 800694e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006950:	2b00      	cmp	r3, #0
 8006952:	d13e      	bne.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006968:	667b      	str	r3, [r7, #100]	; 0x64
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006974:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	663b      	str	r3, [r7, #96]	; 0x60
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80069a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e067      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d04f      	beq.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ee:	d147      	bne.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a4c:	623a      	str	r2, [r7, #32]
 8006a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69f9      	ldr	r1, [r7, #28]
 8006a52:	6a3a      	ldr	r2, [r7, #32]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e010      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	f43f af4a 	beq.w	8006934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3770      	adds	r7, #112	; 0x70
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b097      	sub	sp, #92	; 0x5c
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ade:	d10e      	bne.n	8006afe <UART_Start_Receive_IT+0x52>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <UART_Start_Receive_IT+0x48>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006af2:	e02d      	b.n	8006b50 <UART_Start_Receive_IT+0xa4>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	22ff      	movs	r2, #255	; 0xff
 8006af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006afc:	e028      	b.n	8006b50 <UART_Start_Receive_IT+0xa4>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <UART_Start_Receive_IT+0x76>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <UART_Start_Receive_IT+0x6c>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	22ff      	movs	r2, #255	; 0xff
 8006b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b16:	e01b      	b.n	8006b50 <UART_Start_Receive_IT+0xa4>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	227f      	movs	r2, #127	; 0x7f
 8006b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b20:	e016      	b.n	8006b50 <UART_Start_Receive_IT+0xa4>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b2a:	d10d      	bne.n	8006b48 <UART_Start_Receive_IT+0x9c>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <UART_Start_Receive_IT+0x92>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	227f      	movs	r2, #127	; 0x7f
 8006b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b3c:	e008      	b.n	8006b50 <UART_Start_Receive_IT+0xa4>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	223f      	movs	r2, #63	; 0x3f
 8006b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b46:	e003      	b.n	8006b50 <UART_Start_Receive_IT+0xa4>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2222      	movs	r2, #34	; 0x22
 8006b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	657b      	str	r3, [r7, #84]	; 0x54
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9a:	d107      	bne.n	8006bac <UART_Start_Receive_IT+0x100>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a24      	ldr	r2, [pc, #144]	; (8006c38 <UART_Start_Receive_IT+0x18c>)
 8006ba8:	665a      	str	r2, [r3, #100]	; 0x64
 8006baa:	e002      	b.n	8006bb2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4a23      	ldr	r2, [pc, #140]	; (8006c3c <UART_Start_Receive_IT+0x190>)
 8006bb0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d019      	beq.n	8006bf6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
 8006be2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_Start_Receive_IT+0x116>
 8006bf4:	e018      	b.n	8006c28 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	613b      	str	r3, [r7, #16]
   return(result);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f043 0320 	orr.w	r3, r3, #32
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	69f9      	ldr	r1, [r7, #28]
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e6      	bne.n	8006bf6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	375c      	adds	r7, #92	; 0x5c
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	08006ee3 	.word	0x08006ee3
 8006c3c:	08006d87 	.word	0x08006d87

08006c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b095      	sub	sp, #84	; 0x54
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c66:	643b      	str	r3, [r7, #64]	; 0x40
 8006c68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e6      	bne.n	8006c48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3308      	adds	r3, #8
 8006c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e5      	bne.n	8006c7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d118      	bne.n	8006ce8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	647b      	str	r3, [r7, #68]	; 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006cfa:	bf00      	nop
 8006cfc:	3754      	adds	r7, #84	; 0x54
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fa8f 	bl	8006248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b088      	sub	sp, #32
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6979      	ldr	r1, [r7, #20]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	613b      	str	r3, [r7, #16]
   return(result);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e6      	bne.n	8006d3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fa5b 	bl	8006234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d7e:	bf00      	nop
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b096      	sub	sp, #88	; 0x58
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9c:	2b22      	cmp	r3, #34	; 0x22
 8006d9e:	f040 8094 	bne.w	8006eca <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006db0:	b2d9      	uxtb	r1, r3
 8006db2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	400a      	ands	r2, r1
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d177      	bne.n	8006eda <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d12e      	bne.n	8006ec2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0310 	bic.w	r3, r3, #16
 8006e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	69b9      	ldr	r1, [r7, #24]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	617b      	str	r3, [r7, #20]
   return(result);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d103      	bne.n	8006eb2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff f9ce 	bl	800625c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec0:	e00b      	b.n	8006eda <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa fa68 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8006ec8:	e007      	b.n	8006eda <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0208 	orr.w	r2, r2, #8
 8006ed8:	619a      	str	r2, [r3, #24]
}
 8006eda:	bf00      	nop
 8006edc:	3758      	adds	r7, #88	; 0x58
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b096      	sub	sp, #88	; 0x58
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef8:	2b22      	cmp	r3, #34	; 0x22
 8006efa:	f040 8094 	bne.w	8007026 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f0e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f16:	4013      	ands	r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d177      	bne.n	8007036 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	643b      	str	r3, [r7, #64]	; 0x40
 8006f66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d12e      	bne.n	800701e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f023 0310 	bic.w	r3, r3, #16
 8006fda:	647b      	str	r3, [r7, #68]	; 0x44
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6979      	ldr	r1, [r7, #20]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e6      	bne.n	8006fc6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	2b10      	cmp	r3, #16
 8007004:	d103      	bne.n	800700e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2210      	movs	r2, #16
 800700c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff f920 	bl	800625c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800701c:	e00b      	b.n	8007036 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fa f9ba 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8007024:	e007      	b.n	8007036 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0208 	orr.w	r2, r2, #8
 8007034:	619a      	str	r2, [r3, #24]
}
 8007036:	bf00      	nop
 8007038:	3758      	adds	r7, #88	; 0x58
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <arm_pid_init_f32>:
 8007040:	ed90 7a08 	vldr	s14, [r0, #32]
 8007044:	edd0 7a06 	vldr	s15, [r0, #24]
 8007048:	ed90 6a07 	vldr	s12, [r0, #28]
 800704c:	eef1 6a67 	vneg.f32	s13, s15
 8007050:	ed80 7a02 	vstr	s14, [r0, #8]
 8007054:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007058:	ee37 6a07 	vadd.f32	s12, s14, s14
 800705c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007060:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007064:	edc0 7a00 	vstr	s15, [r0]
 8007068:	ed80 7a01 	vstr	s14, [r0, #4]
 800706c:	b901      	cbnz	r1, 8007070 <arm_pid_init_f32+0x30>
 800706e:	4770      	bx	lr
 8007070:	2300      	movs	r3, #0
 8007072:	60c3      	str	r3, [r0, #12]
 8007074:	6103      	str	r3, [r0, #16]
 8007076:	6143      	str	r3, [r0, #20]
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <__errno>:
 800707c:	4b01      	ldr	r3, [pc, #4]	; (8007084 <__errno+0x8>)
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000040 	.word	0x20000040

08007088 <__libc_init_array>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4d0d      	ldr	r5, [pc, #52]	; (80070c0 <__libc_init_array+0x38>)
 800708c:	4c0d      	ldr	r4, [pc, #52]	; (80070c4 <__libc_init_array+0x3c>)
 800708e:	1b64      	subs	r4, r4, r5
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2600      	movs	r6, #0
 8007094:	42a6      	cmp	r6, r4
 8007096:	d109      	bne.n	80070ac <__libc_init_array+0x24>
 8007098:	4d0b      	ldr	r5, [pc, #44]	; (80070c8 <__libc_init_array+0x40>)
 800709a:	4c0c      	ldr	r4, [pc, #48]	; (80070cc <__libc_init_array+0x44>)
 800709c:	f000 fc4e 	bl	800793c <_init>
 80070a0:	1b64      	subs	r4, r4, r5
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	2600      	movs	r6, #0
 80070a6:	42a6      	cmp	r6, r4
 80070a8:	d105      	bne.n	80070b6 <__libc_init_array+0x2e>
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b0:	4798      	blx	r3
 80070b2:	3601      	adds	r6, #1
 80070b4:	e7ee      	b.n	8007094 <__libc_init_array+0xc>
 80070b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ba:	4798      	blx	r3
 80070bc:	3601      	adds	r6, #1
 80070be:	e7f2      	b.n	80070a6 <__libc_init_array+0x1e>
 80070c0:	080079d4 	.word	0x080079d4
 80070c4:	080079d4 	.word	0x080079d4
 80070c8:	080079d4 	.word	0x080079d4
 80070cc:	080079d8 	.word	0x080079d8

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <siprintf>:
 80070e0:	b40e      	push	{r1, r2, r3}
 80070e2:	b500      	push	{lr}
 80070e4:	b09c      	sub	sp, #112	; 0x70
 80070e6:	ab1d      	add	r3, sp, #116	; 0x74
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	9006      	str	r0, [sp, #24]
 80070ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f0:	4809      	ldr	r0, [pc, #36]	; (8007118 <siprintf+0x38>)
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	9104      	str	r1, [sp, #16]
 80070f6:	4909      	ldr	r1, [pc, #36]	; (800711c <siprintf+0x3c>)
 80070f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fc:	9105      	str	r1, [sp, #20]
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	a902      	add	r1, sp, #8
 8007104:	f000 f868 	bl	80071d8 <_svfiprintf_r>
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	b01c      	add	sp, #112	; 0x70
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b003      	add	sp, #12
 8007116:	4770      	bx	lr
 8007118:	20000040 	.word	0x20000040
 800711c:	ffff0208 	.word	0xffff0208

08007120 <__ssputs_r>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	688e      	ldr	r6, [r1, #8]
 8007126:	429e      	cmp	r6, r3
 8007128:	4682      	mov	sl, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4690      	mov	r8, r2
 800712e:	461f      	mov	r7, r3
 8007130:	d838      	bhi.n	80071a4 <__ssputs_r+0x84>
 8007132:	898a      	ldrh	r2, [r1, #12]
 8007134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007138:	d032      	beq.n	80071a0 <__ssputs_r+0x80>
 800713a:	6825      	ldr	r5, [r4, #0]
 800713c:	6909      	ldr	r1, [r1, #16]
 800713e:	eba5 0901 	sub.w	r9, r5, r1
 8007142:	6965      	ldr	r5, [r4, #20]
 8007144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800714c:	3301      	adds	r3, #1
 800714e:	444b      	add	r3, r9
 8007150:	106d      	asrs	r5, r5, #1
 8007152:	429d      	cmp	r5, r3
 8007154:	bf38      	it	cc
 8007156:	461d      	movcc	r5, r3
 8007158:	0553      	lsls	r3, r2, #21
 800715a:	d531      	bpl.n	80071c0 <__ssputs_r+0xa0>
 800715c:	4629      	mov	r1, r5
 800715e:	f000 fb47 	bl	80077f0 <_malloc_r>
 8007162:	4606      	mov	r6, r0
 8007164:	b950      	cbnz	r0, 800717c <__ssputs_r+0x5c>
 8007166:	230c      	movs	r3, #12
 8007168:	f8ca 3000 	str.w	r3, [sl]
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717c:	6921      	ldr	r1, [r4, #16]
 800717e:	464a      	mov	r2, r9
 8007180:	f000 fabe 	bl	8007700 <memcpy>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800718a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718e:	81a3      	strh	r3, [r4, #12]
 8007190:	6126      	str	r6, [r4, #16]
 8007192:	6165      	str	r5, [r4, #20]
 8007194:	444e      	add	r6, r9
 8007196:	eba5 0509 	sub.w	r5, r5, r9
 800719a:	6026      	str	r6, [r4, #0]
 800719c:	60a5      	str	r5, [r4, #8]
 800719e:	463e      	mov	r6, r7
 80071a0:	42be      	cmp	r6, r7
 80071a2:	d900      	bls.n	80071a6 <__ssputs_r+0x86>
 80071a4:	463e      	mov	r6, r7
 80071a6:	4632      	mov	r2, r6
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	4641      	mov	r1, r8
 80071ac:	f000 fab6 	bl	800771c <memmove>
 80071b0:	68a3      	ldr	r3, [r4, #8]
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	1b9b      	subs	r3, r3, r6
 80071b6:	4432      	add	r2, r6
 80071b8:	60a3      	str	r3, [r4, #8]
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e7db      	b.n	8007178 <__ssputs_r+0x58>
 80071c0:	462a      	mov	r2, r5
 80071c2:	f000 fb6f 	bl	80078a4 <_realloc_r>
 80071c6:	4606      	mov	r6, r0
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1e1      	bne.n	8007190 <__ssputs_r+0x70>
 80071cc:	6921      	ldr	r1, [r4, #16]
 80071ce:	4650      	mov	r0, sl
 80071d0:	f000 fabe 	bl	8007750 <_free_r>
 80071d4:	e7c7      	b.n	8007166 <__ssputs_r+0x46>
	...

080071d8 <_svfiprintf_r>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4698      	mov	r8, r3
 80071de:	898b      	ldrh	r3, [r1, #12]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	b09d      	sub	sp, #116	; 0x74
 80071e4:	4607      	mov	r7, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	d50e      	bpl.n	800720a <_svfiprintf_r+0x32>
 80071ec:	690b      	ldr	r3, [r1, #16]
 80071ee:	b963      	cbnz	r3, 800720a <_svfiprintf_r+0x32>
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	f000 fafd 	bl	80077f0 <_malloc_r>
 80071f6:	6028      	str	r0, [r5, #0]
 80071f8:	6128      	str	r0, [r5, #16]
 80071fa:	b920      	cbnz	r0, 8007206 <_svfiprintf_r+0x2e>
 80071fc:	230c      	movs	r3, #12
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e0d1      	b.n	80073aa <_svfiprintf_r+0x1d2>
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	616b      	str	r3, [r5, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	9309      	str	r3, [sp, #36]	; 0x24
 800720e:	2320      	movs	r3, #32
 8007210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007214:	f8cd 800c 	str.w	r8, [sp, #12]
 8007218:	2330      	movs	r3, #48	; 0x30
 800721a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073c4 <_svfiprintf_r+0x1ec>
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007222:	f04f 0901 	mov.w	r9, #1
 8007226:	4623      	mov	r3, r4
 8007228:	469a      	mov	sl, r3
 800722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722e:	b10a      	cbz	r2, 8007234 <_svfiprintf_r+0x5c>
 8007230:	2a25      	cmp	r2, #37	; 0x25
 8007232:	d1f9      	bne.n	8007228 <_svfiprintf_r+0x50>
 8007234:	ebba 0b04 	subs.w	fp, sl, r4
 8007238:	d00b      	beq.n	8007252 <_svfiprintf_r+0x7a>
 800723a:	465b      	mov	r3, fp
 800723c:	4622      	mov	r2, r4
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ff6d 	bl	8007120 <__ssputs_r>
 8007246:	3001      	adds	r0, #1
 8007248:	f000 80aa 	beq.w	80073a0 <_svfiprintf_r+0x1c8>
 800724c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724e:	445a      	add	r2, fp
 8007250:	9209      	str	r2, [sp, #36]	; 0x24
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80a2 	beq.w	80073a0 <_svfiprintf_r+0x1c8>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007266:	f10a 0a01 	add.w	sl, sl, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007272:	931a      	str	r3, [sp, #104]	; 0x68
 8007274:	4654      	mov	r4, sl
 8007276:	2205      	movs	r2, #5
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	4851      	ldr	r0, [pc, #324]	; (80073c4 <_svfiprintf_r+0x1ec>)
 800727e:	f7f8 ffe7 	bl	8000250 <memchr>
 8007282:	9a04      	ldr	r2, [sp, #16]
 8007284:	b9d8      	cbnz	r0, 80072be <_svfiprintf_r+0xe6>
 8007286:	06d0      	lsls	r0, r2, #27
 8007288:	bf44      	itt	mi
 800728a:	2320      	movmi	r3, #32
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007290:	0711      	lsls	r1, r2, #28
 8007292:	bf44      	itt	mi
 8007294:	232b      	movmi	r3, #43	; 0x2b
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b2a      	cmp	r3, #42	; 0x2a
 80072a0:	d015      	beq.n	80072ce <_svfiprintf_r+0xf6>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4654      	mov	r4, sl
 80072a6:	2000      	movs	r0, #0
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4621      	mov	r1, r4
 80072ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b2:	3b30      	subs	r3, #48	; 0x30
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d94e      	bls.n	8007356 <_svfiprintf_r+0x17e>
 80072b8:	b1b0      	cbz	r0, 80072e8 <_svfiprintf_r+0x110>
 80072ba:	9207      	str	r2, [sp, #28]
 80072bc:	e014      	b.n	80072e8 <_svfiprintf_r+0x110>
 80072be:	eba0 0308 	sub.w	r3, r0, r8
 80072c2:	fa09 f303 	lsl.w	r3, r9, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	46a2      	mov	sl, r4
 80072cc:	e7d2      	b.n	8007274 <_svfiprintf_r+0x9c>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbb      	ittet	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	f042 0202 	orrlt.w	r2, r2, #2
 80072e0:	9307      	strge	r3, [sp, #28]
 80072e2:	9307      	strlt	r3, [sp, #28]
 80072e4:	bfb8      	it	lt
 80072e6:	9204      	strlt	r2, [sp, #16]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	2b2e      	cmp	r3, #46	; 0x2e
 80072ec:	d10c      	bne.n	8007308 <_svfiprintf_r+0x130>
 80072ee:	7863      	ldrb	r3, [r4, #1]
 80072f0:	2b2a      	cmp	r3, #42	; 0x2a
 80072f2:	d135      	bne.n	8007360 <_svfiprintf_r+0x188>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb8      	it	lt
 8007300:	f04f 33ff 	movlt.w	r3, #4294967295
 8007304:	3402      	adds	r4, #2
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073d4 <_svfiprintf_r+0x1fc>
 800730c:	7821      	ldrb	r1, [r4, #0]
 800730e:	2203      	movs	r2, #3
 8007310:	4650      	mov	r0, sl
 8007312:	f7f8 ff9d 	bl	8000250 <memchr>
 8007316:	b140      	cbz	r0, 800732a <_svfiprintf_r+0x152>
 8007318:	2340      	movs	r3, #64	; 0x40
 800731a:	eba0 000a 	sub.w	r0, r0, sl
 800731e:	fa03 f000 	lsl.w	r0, r3, r0
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	4303      	orrs	r3, r0
 8007326:	3401      	adds	r4, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732e:	4826      	ldr	r0, [pc, #152]	; (80073c8 <_svfiprintf_r+0x1f0>)
 8007330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007334:	2206      	movs	r2, #6
 8007336:	f7f8 ff8b 	bl	8000250 <memchr>
 800733a:	2800      	cmp	r0, #0
 800733c:	d038      	beq.n	80073b0 <_svfiprintf_r+0x1d8>
 800733e:	4b23      	ldr	r3, [pc, #140]	; (80073cc <_svfiprintf_r+0x1f4>)
 8007340:	bb1b      	cbnz	r3, 800738a <_svfiprintf_r+0x1b2>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	3307      	adds	r3, #7
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	3308      	adds	r3, #8
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	4433      	add	r3, r6
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	e767      	b.n	8007226 <_svfiprintf_r+0x4e>
 8007356:	fb0c 3202 	mla	r2, ip, r2, r3
 800735a:	460c      	mov	r4, r1
 800735c:	2001      	movs	r0, #1
 800735e:	e7a5      	b.n	80072ac <_svfiprintf_r+0xd4>
 8007360:	2300      	movs	r3, #0
 8007362:	3401      	adds	r4, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	4619      	mov	r1, r3
 8007368:	f04f 0c0a 	mov.w	ip, #10
 800736c:	4620      	mov	r0, r4
 800736e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007372:	3a30      	subs	r2, #48	; 0x30
 8007374:	2a09      	cmp	r2, #9
 8007376:	d903      	bls.n	8007380 <_svfiprintf_r+0x1a8>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0c5      	beq.n	8007308 <_svfiprintf_r+0x130>
 800737c:	9105      	str	r1, [sp, #20]
 800737e:	e7c3      	b.n	8007308 <_svfiprintf_r+0x130>
 8007380:	fb0c 2101 	mla	r1, ip, r1, r2
 8007384:	4604      	mov	r4, r0
 8007386:	2301      	movs	r3, #1
 8007388:	e7f0      	b.n	800736c <_svfiprintf_r+0x194>
 800738a:	ab03      	add	r3, sp, #12
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <_svfiprintf_r+0x1f8>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	4638      	mov	r0, r7
 8007396:	f3af 8000 	nop.w
 800739a:	1c42      	adds	r2, r0, #1
 800739c:	4606      	mov	r6, r0
 800739e:	d1d6      	bne.n	800734e <_svfiprintf_r+0x176>
 80073a0:	89ab      	ldrh	r3, [r5, #12]
 80073a2:	065b      	lsls	r3, r3, #25
 80073a4:	f53f af2c 	bmi.w	8007200 <_svfiprintf_r+0x28>
 80073a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073aa:	b01d      	add	sp, #116	; 0x74
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <_svfiprintf_r+0x1f8>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4638      	mov	r0, r7
 80073bc:	f000 f87a 	bl	80074b4 <_printf_i>
 80073c0:	e7eb      	b.n	800739a <_svfiprintf_r+0x1c2>
 80073c2:	bf00      	nop
 80073c4:	08007998 	.word	0x08007998
 80073c8:	080079a2 	.word	0x080079a2
 80073cc:	00000000 	.word	0x00000000
 80073d0:	08007121 	.word	0x08007121
 80073d4:	0800799e 	.word	0x0800799e

080073d8 <_printf_common>:
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	4616      	mov	r6, r2
 80073de:	4699      	mov	r9, r3
 80073e0:	688a      	ldr	r2, [r1, #8]
 80073e2:	690b      	ldr	r3, [r1, #16]
 80073e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bfb8      	it	lt
 80073ec:	4613      	movlt	r3, r2
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f4:	4607      	mov	r7, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b10a      	cbz	r2, 80073fe <_printf_common+0x26>
 80073fa:	3301      	adds	r3, #1
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	0699      	lsls	r1, r3, #26
 8007402:	bf42      	ittt	mi
 8007404:	6833      	ldrmi	r3, [r6, #0]
 8007406:	3302      	addmi	r3, #2
 8007408:	6033      	strmi	r3, [r6, #0]
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	f015 0506 	ands.w	r5, r5, #6
 8007410:	d106      	bne.n	8007420 <_printf_common+0x48>
 8007412:	f104 0a19 	add.w	sl, r4, #25
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	6832      	ldr	r2, [r6, #0]
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	42ab      	cmp	r3, r5
 800741e:	dc26      	bgt.n	800746e <_printf_common+0x96>
 8007420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007424:	1e13      	subs	r3, r2, #0
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	2301      	movne	r3, #1
 800742c:	0692      	lsls	r2, r2, #26
 800742e:	d42b      	bmi.n	8007488 <_printf_common+0xb0>
 8007430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d01e      	beq.n	800747c <_printf_common+0xa4>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	68e5      	ldr	r5, [r4, #12]
 8007442:	6832      	ldr	r2, [r6, #0]
 8007444:	f003 0306 	and.w	r3, r3, #6
 8007448:	2b04      	cmp	r3, #4
 800744a:	bf08      	it	eq
 800744c:	1aad      	subeq	r5, r5, r2
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	bf0c      	ite	eq
 8007454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007458:	2500      	movne	r5, #0
 800745a:	4293      	cmp	r3, r2
 800745c:	bfc4      	itt	gt
 800745e:	1a9b      	subgt	r3, r3, r2
 8007460:	18ed      	addgt	r5, r5, r3
 8007462:	2600      	movs	r6, #0
 8007464:	341a      	adds	r4, #26
 8007466:	42b5      	cmp	r5, r6
 8007468:	d11a      	bne.n	80074a0 <_printf_common+0xc8>
 800746a:	2000      	movs	r0, #0
 800746c:	e008      	b.n	8007480 <_printf_common+0xa8>
 800746e:	2301      	movs	r3, #1
 8007470:	4652      	mov	r2, sl
 8007472:	4649      	mov	r1, r9
 8007474:	4638      	mov	r0, r7
 8007476:	47c0      	blx	r8
 8007478:	3001      	adds	r0, #1
 800747a:	d103      	bne.n	8007484 <_printf_common+0xac>
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	3501      	adds	r5, #1
 8007486:	e7c6      	b.n	8007416 <_printf_common+0x3e>
 8007488:	18e1      	adds	r1, r4, r3
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	2030      	movs	r0, #48	; 0x30
 800748e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007492:	4422      	add	r2, r4
 8007494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800749c:	3302      	adds	r3, #2
 800749e:	e7c7      	b.n	8007430 <_printf_common+0x58>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4622      	mov	r2, r4
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d0e6      	beq.n	800747c <_printf_common+0xa4>
 80074ae:	3601      	adds	r6, #1
 80074b0:	e7d9      	b.n	8007466 <_printf_common+0x8e>
	...

080074b4 <_printf_i>:
 80074b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	460c      	mov	r4, r1
 80074ba:	4691      	mov	r9, r2
 80074bc:	7e27      	ldrb	r7, [r4, #24]
 80074be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074c0:	2f78      	cmp	r7, #120	; 0x78
 80074c2:	4680      	mov	r8, r0
 80074c4:	469a      	mov	sl, r3
 80074c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ca:	d807      	bhi.n	80074dc <_printf_i+0x28>
 80074cc:	2f62      	cmp	r7, #98	; 0x62
 80074ce:	d80a      	bhi.n	80074e6 <_printf_i+0x32>
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	f000 80d8 	beq.w	8007686 <_printf_i+0x1d2>
 80074d6:	2f58      	cmp	r7, #88	; 0x58
 80074d8:	f000 80a3 	beq.w	8007622 <_printf_i+0x16e>
 80074dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e4:	e03a      	b.n	800755c <_printf_i+0xa8>
 80074e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ea:	2b15      	cmp	r3, #21
 80074ec:	d8f6      	bhi.n	80074dc <_printf_i+0x28>
 80074ee:	a001      	add	r0, pc, #4	; (adr r0, 80074f4 <_printf_i+0x40>)
 80074f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	08007561 	.word	0x08007561
 80074fc:	080074dd 	.word	0x080074dd
 8007500:	080074dd 	.word	0x080074dd
 8007504:	080074dd 	.word	0x080074dd
 8007508:	080074dd 	.word	0x080074dd
 800750c:	08007561 	.word	0x08007561
 8007510:	080074dd 	.word	0x080074dd
 8007514:	080074dd 	.word	0x080074dd
 8007518:	080074dd 	.word	0x080074dd
 800751c:	080074dd 	.word	0x080074dd
 8007520:	0800766d 	.word	0x0800766d
 8007524:	08007591 	.word	0x08007591
 8007528:	0800764f 	.word	0x0800764f
 800752c:	080074dd 	.word	0x080074dd
 8007530:	080074dd 	.word	0x080074dd
 8007534:	0800768f 	.word	0x0800768f
 8007538:	080074dd 	.word	0x080074dd
 800753c:	08007591 	.word	0x08007591
 8007540:	080074dd 	.word	0x080074dd
 8007544:	080074dd 	.word	0x080074dd
 8007548:	08007657 	.word	0x08007657
 800754c:	680b      	ldr	r3, [r1, #0]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	600a      	str	r2, [r1, #0]
 8007554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800755c:	2301      	movs	r3, #1
 800755e:	e0a3      	b.n	80076a8 <_printf_i+0x1f4>
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	6808      	ldr	r0, [r1, #0]
 8007564:	062e      	lsls	r6, r5, #24
 8007566:	f100 0304 	add.w	r3, r0, #4
 800756a:	d50a      	bpl.n	8007582 <_printf_i+0xce>
 800756c:	6805      	ldr	r5, [r0, #0]
 800756e:	600b      	str	r3, [r1, #0]
 8007570:	2d00      	cmp	r5, #0
 8007572:	da03      	bge.n	800757c <_printf_i+0xc8>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	426d      	negs	r5, r5
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757c:	485e      	ldr	r0, [pc, #376]	; (80076f8 <_printf_i+0x244>)
 800757e:	230a      	movs	r3, #10
 8007580:	e019      	b.n	80075b6 <_printf_i+0x102>
 8007582:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007586:	6805      	ldr	r5, [r0, #0]
 8007588:	600b      	str	r3, [r1, #0]
 800758a:	bf18      	it	ne
 800758c:	b22d      	sxthne	r5, r5
 800758e:	e7ef      	b.n	8007570 <_printf_i+0xbc>
 8007590:	680b      	ldr	r3, [r1, #0]
 8007592:	6825      	ldr	r5, [r4, #0]
 8007594:	1d18      	adds	r0, r3, #4
 8007596:	6008      	str	r0, [r1, #0]
 8007598:	0628      	lsls	r0, r5, #24
 800759a:	d501      	bpl.n	80075a0 <_printf_i+0xec>
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	e002      	b.n	80075a6 <_printf_i+0xf2>
 80075a0:	0669      	lsls	r1, r5, #25
 80075a2:	d5fb      	bpl.n	800759c <_printf_i+0xe8>
 80075a4:	881d      	ldrh	r5, [r3, #0]
 80075a6:	4854      	ldr	r0, [pc, #336]	; (80076f8 <_printf_i+0x244>)
 80075a8:	2f6f      	cmp	r7, #111	; 0x6f
 80075aa:	bf0c      	ite	eq
 80075ac:	2308      	moveq	r3, #8
 80075ae:	230a      	movne	r3, #10
 80075b0:	2100      	movs	r1, #0
 80075b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075b6:	6866      	ldr	r6, [r4, #4]
 80075b8:	60a6      	str	r6, [r4, #8]
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	bfa2      	ittt	ge
 80075be:	6821      	ldrge	r1, [r4, #0]
 80075c0:	f021 0104 	bicge.w	r1, r1, #4
 80075c4:	6021      	strge	r1, [r4, #0]
 80075c6:	b90d      	cbnz	r5, 80075cc <_printf_i+0x118>
 80075c8:	2e00      	cmp	r6, #0
 80075ca:	d04d      	beq.n	8007668 <_printf_i+0x1b4>
 80075cc:	4616      	mov	r6, r2
 80075ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80075d2:	fb03 5711 	mls	r7, r3, r1, r5
 80075d6:	5dc7      	ldrb	r7, [r0, r7]
 80075d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075dc:	462f      	mov	r7, r5
 80075de:	42bb      	cmp	r3, r7
 80075e0:	460d      	mov	r5, r1
 80075e2:	d9f4      	bls.n	80075ce <_printf_i+0x11a>
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10b      	bne.n	8007600 <_printf_i+0x14c>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07df      	lsls	r7, r3, #31
 80075ec:	d508      	bpl.n	8007600 <_printf_i+0x14c>
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6861      	ldr	r1, [r4, #4]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	bfde      	ittt	le
 80075f6:	2330      	movle	r3, #48	; 0x30
 80075f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007600:	1b92      	subs	r2, r2, r6
 8007602:	6122      	str	r2, [r4, #16]
 8007604:	f8cd a000 	str.w	sl, [sp]
 8007608:	464b      	mov	r3, r9
 800760a:	aa03      	add	r2, sp, #12
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff fee2 	bl	80073d8 <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	d14c      	bne.n	80076b2 <_printf_i+0x1fe>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b004      	add	sp, #16
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	4835      	ldr	r0, [pc, #212]	; (80076f8 <_printf_i+0x244>)
 8007624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	680e      	ldr	r6, [r1, #0]
 800762c:	061f      	lsls	r7, r3, #24
 800762e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007632:	600e      	str	r6, [r1, #0]
 8007634:	d514      	bpl.n	8007660 <_printf_i+0x1ac>
 8007636:	07d9      	lsls	r1, r3, #31
 8007638:	bf44      	itt	mi
 800763a:	f043 0320 	orrmi.w	r3, r3, #32
 800763e:	6023      	strmi	r3, [r4, #0]
 8007640:	b91d      	cbnz	r5, 800764a <_printf_i+0x196>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f023 0320 	bic.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	2310      	movs	r3, #16
 800764c:	e7b0      	b.n	80075b0 <_printf_i+0xfc>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f043 0320 	orr.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	2378      	movs	r3, #120	; 0x78
 8007658:	4828      	ldr	r0, [pc, #160]	; (80076fc <_printf_i+0x248>)
 800765a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800765e:	e7e3      	b.n	8007628 <_printf_i+0x174>
 8007660:	065e      	lsls	r6, r3, #25
 8007662:	bf48      	it	mi
 8007664:	b2ad      	uxthmi	r5, r5
 8007666:	e7e6      	b.n	8007636 <_printf_i+0x182>
 8007668:	4616      	mov	r6, r2
 800766a:	e7bb      	b.n	80075e4 <_printf_i+0x130>
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	6826      	ldr	r6, [r4, #0]
 8007670:	6960      	ldr	r0, [r4, #20]
 8007672:	1d1d      	adds	r5, r3, #4
 8007674:	600d      	str	r5, [r1, #0]
 8007676:	0635      	lsls	r5, r6, #24
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	d501      	bpl.n	8007680 <_printf_i+0x1cc>
 800767c:	6018      	str	r0, [r3, #0]
 800767e:	e002      	b.n	8007686 <_printf_i+0x1d2>
 8007680:	0671      	lsls	r1, r6, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0x1c8>
 8007684:	8018      	strh	r0, [r3, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	4616      	mov	r6, r2
 800768c:	e7ba      	b.n	8007604 <_printf_i+0x150>
 800768e:	680b      	ldr	r3, [r1, #0]
 8007690:	1d1a      	adds	r2, r3, #4
 8007692:	600a      	str	r2, [r1, #0]
 8007694:	681e      	ldr	r6, [r3, #0]
 8007696:	6862      	ldr	r2, [r4, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	4630      	mov	r0, r6
 800769c:	f7f8 fdd8 	bl	8000250 <memchr>
 80076a0:	b108      	cbz	r0, 80076a6 <_printf_i+0x1f2>
 80076a2:	1b80      	subs	r0, r0, r6
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	2300      	movs	r3, #0
 80076ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b0:	e7a8      	b.n	8007604 <_printf_i+0x150>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	4632      	mov	r2, r6
 80076b6:	4649      	mov	r1, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	47d0      	blx	sl
 80076bc:	3001      	adds	r0, #1
 80076be:	d0ab      	beq.n	8007618 <_printf_i+0x164>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	079b      	lsls	r3, r3, #30
 80076c4:	d413      	bmi.n	80076ee <_printf_i+0x23a>
 80076c6:	68e0      	ldr	r0, [r4, #12]
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	4298      	cmp	r0, r3
 80076cc:	bfb8      	it	lt
 80076ce:	4618      	movlt	r0, r3
 80076d0:	e7a4      	b.n	800761c <_printf_i+0x168>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4632      	mov	r2, r6
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d09b      	beq.n	8007618 <_printf_i+0x164>
 80076e0:	3501      	adds	r5, #1
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	9903      	ldr	r1, [sp, #12]
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	42ab      	cmp	r3, r5
 80076ea:	dcf2      	bgt.n	80076d2 <_printf_i+0x21e>
 80076ec:	e7eb      	b.n	80076c6 <_printf_i+0x212>
 80076ee:	2500      	movs	r5, #0
 80076f0:	f104 0619 	add.w	r6, r4, #25
 80076f4:	e7f5      	b.n	80076e2 <_printf_i+0x22e>
 80076f6:	bf00      	nop
 80076f8:	080079a9 	.word	0x080079a9
 80076fc:	080079ba 	.word	0x080079ba

08007700 <memcpy>:
 8007700:	440a      	add	r2, r1
 8007702:	4291      	cmp	r1, r2
 8007704:	f100 33ff 	add.w	r3, r0, #4294967295
 8007708:	d100      	bne.n	800770c <memcpy+0xc>
 800770a:	4770      	bx	lr
 800770c:	b510      	push	{r4, lr}
 800770e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007716:	4291      	cmp	r1, r2
 8007718:	d1f9      	bne.n	800770e <memcpy+0xe>
 800771a:	bd10      	pop	{r4, pc}

0800771c <memmove>:
 800771c:	4288      	cmp	r0, r1
 800771e:	b510      	push	{r4, lr}
 8007720:	eb01 0402 	add.w	r4, r1, r2
 8007724:	d902      	bls.n	800772c <memmove+0x10>
 8007726:	4284      	cmp	r4, r0
 8007728:	4623      	mov	r3, r4
 800772a:	d807      	bhi.n	800773c <memmove+0x20>
 800772c:	1e43      	subs	r3, r0, #1
 800772e:	42a1      	cmp	r1, r4
 8007730:	d008      	beq.n	8007744 <memmove+0x28>
 8007732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800773a:	e7f8      	b.n	800772e <memmove+0x12>
 800773c:	4402      	add	r2, r0
 800773e:	4601      	mov	r1, r0
 8007740:	428a      	cmp	r2, r1
 8007742:	d100      	bne.n	8007746 <memmove+0x2a>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800774a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800774e:	e7f7      	b.n	8007740 <memmove+0x24>

08007750 <_free_r>:
 8007750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007752:	2900      	cmp	r1, #0
 8007754:	d048      	beq.n	80077e8 <_free_r+0x98>
 8007756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775a:	9001      	str	r0, [sp, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f1a1 0404 	sub.w	r4, r1, #4
 8007762:	bfb8      	it	lt
 8007764:	18e4      	addlt	r4, r4, r3
 8007766:	f000 f8d3 	bl	8007910 <__malloc_lock>
 800776a:	4a20      	ldr	r2, [pc, #128]	; (80077ec <_free_r+0x9c>)
 800776c:	9801      	ldr	r0, [sp, #4]
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	4615      	mov	r5, r2
 8007772:	b933      	cbnz	r3, 8007782 <_free_r+0x32>
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	6014      	str	r4, [r2, #0]
 8007778:	b003      	add	sp, #12
 800777a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800777e:	f000 b8cd 	b.w	800791c <__malloc_unlock>
 8007782:	42a3      	cmp	r3, r4
 8007784:	d90b      	bls.n	800779e <_free_r+0x4e>
 8007786:	6821      	ldr	r1, [r4, #0]
 8007788:	1862      	adds	r2, r4, r1
 800778a:	4293      	cmp	r3, r2
 800778c:	bf04      	itt	eq
 800778e:	681a      	ldreq	r2, [r3, #0]
 8007790:	685b      	ldreq	r3, [r3, #4]
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	bf04      	itt	eq
 8007796:	1852      	addeq	r2, r2, r1
 8007798:	6022      	streq	r2, [r4, #0]
 800779a:	602c      	str	r4, [r5, #0]
 800779c:	e7ec      	b.n	8007778 <_free_r+0x28>
 800779e:	461a      	mov	r2, r3
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b10b      	cbz	r3, 80077a8 <_free_r+0x58>
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	d9fa      	bls.n	800779e <_free_r+0x4e>
 80077a8:	6811      	ldr	r1, [r2, #0]
 80077aa:	1855      	adds	r5, r2, r1
 80077ac:	42a5      	cmp	r5, r4
 80077ae:	d10b      	bne.n	80077c8 <_free_r+0x78>
 80077b0:	6824      	ldr	r4, [r4, #0]
 80077b2:	4421      	add	r1, r4
 80077b4:	1854      	adds	r4, r2, r1
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	6011      	str	r1, [r2, #0]
 80077ba:	d1dd      	bne.n	8007778 <_free_r+0x28>
 80077bc:	681c      	ldr	r4, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	6053      	str	r3, [r2, #4]
 80077c2:	4421      	add	r1, r4
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	e7d7      	b.n	8007778 <_free_r+0x28>
 80077c8:	d902      	bls.n	80077d0 <_free_r+0x80>
 80077ca:	230c      	movs	r3, #12
 80077cc:	6003      	str	r3, [r0, #0]
 80077ce:	e7d3      	b.n	8007778 <_free_r+0x28>
 80077d0:	6825      	ldr	r5, [r4, #0]
 80077d2:	1961      	adds	r1, r4, r5
 80077d4:	428b      	cmp	r3, r1
 80077d6:	bf04      	itt	eq
 80077d8:	6819      	ldreq	r1, [r3, #0]
 80077da:	685b      	ldreq	r3, [r3, #4]
 80077dc:	6063      	str	r3, [r4, #4]
 80077de:	bf04      	itt	eq
 80077e0:	1949      	addeq	r1, r1, r5
 80077e2:	6021      	streq	r1, [r4, #0]
 80077e4:	6054      	str	r4, [r2, #4]
 80077e6:	e7c7      	b.n	8007778 <_free_r+0x28>
 80077e8:	b003      	add	sp, #12
 80077ea:	bd30      	pop	{r4, r5, pc}
 80077ec:	200000c8 	.word	0x200000c8

080077f0 <_malloc_r>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	1ccd      	adds	r5, r1, #3
 80077f4:	f025 0503 	bic.w	r5, r5, #3
 80077f8:	3508      	adds	r5, #8
 80077fa:	2d0c      	cmp	r5, #12
 80077fc:	bf38      	it	cc
 80077fe:	250c      	movcc	r5, #12
 8007800:	2d00      	cmp	r5, #0
 8007802:	4606      	mov	r6, r0
 8007804:	db01      	blt.n	800780a <_malloc_r+0x1a>
 8007806:	42a9      	cmp	r1, r5
 8007808:	d903      	bls.n	8007812 <_malloc_r+0x22>
 800780a:	230c      	movs	r3, #12
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	2000      	movs	r0, #0
 8007810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007812:	f000 f87d 	bl	8007910 <__malloc_lock>
 8007816:	4921      	ldr	r1, [pc, #132]	; (800789c <_malloc_r+0xac>)
 8007818:	680a      	ldr	r2, [r1, #0]
 800781a:	4614      	mov	r4, r2
 800781c:	b99c      	cbnz	r4, 8007846 <_malloc_r+0x56>
 800781e:	4f20      	ldr	r7, [pc, #128]	; (80078a0 <_malloc_r+0xb0>)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	b923      	cbnz	r3, 800782e <_malloc_r+0x3e>
 8007824:	4621      	mov	r1, r4
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f862 	bl	80078f0 <_sbrk_r>
 800782c:	6038      	str	r0, [r7, #0]
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f000 f85d 	bl	80078f0 <_sbrk_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	d123      	bne.n	8007882 <_malloc_r+0x92>
 800783a:	230c      	movs	r3, #12
 800783c:	6033      	str	r3, [r6, #0]
 800783e:	4630      	mov	r0, r6
 8007840:	f000 f86c 	bl	800791c <__malloc_unlock>
 8007844:	e7e3      	b.n	800780e <_malloc_r+0x1e>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	1b5b      	subs	r3, r3, r5
 800784a:	d417      	bmi.n	800787c <_malloc_r+0x8c>
 800784c:	2b0b      	cmp	r3, #11
 800784e:	d903      	bls.n	8007858 <_malloc_r+0x68>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	441c      	add	r4, r3
 8007854:	6025      	str	r5, [r4, #0]
 8007856:	e004      	b.n	8007862 <_malloc_r+0x72>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	42a2      	cmp	r2, r4
 800785c:	bf0c      	ite	eq
 800785e:	600b      	streq	r3, [r1, #0]
 8007860:	6053      	strne	r3, [r2, #4]
 8007862:	4630      	mov	r0, r6
 8007864:	f000 f85a 	bl	800791c <__malloc_unlock>
 8007868:	f104 000b 	add.w	r0, r4, #11
 800786c:	1d23      	adds	r3, r4, #4
 800786e:	f020 0007 	bic.w	r0, r0, #7
 8007872:	1ac2      	subs	r2, r0, r3
 8007874:	d0cc      	beq.n	8007810 <_malloc_r+0x20>
 8007876:	1a1b      	subs	r3, r3, r0
 8007878:	50a3      	str	r3, [r4, r2]
 800787a:	e7c9      	b.n	8007810 <_malloc_r+0x20>
 800787c:	4622      	mov	r2, r4
 800787e:	6864      	ldr	r4, [r4, #4]
 8007880:	e7cc      	b.n	800781c <_malloc_r+0x2c>
 8007882:	1cc4      	adds	r4, r0, #3
 8007884:	f024 0403 	bic.w	r4, r4, #3
 8007888:	42a0      	cmp	r0, r4
 800788a:	d0e3      	beq.n	8007854 <_malloc_r+0x64>
 800788c:	1a21      	subs	r1, r4, r0
 800788e:	4630      	mov	r0, r6
 8007890:	f000 f82e 	bl	80078f0 <_sbrk_r>
 8007894:	3001      	adds	r0, #1
 8007896:	d1dd      	bne.n	8007854 <_malloc_r+0x64>
 8007898:	e7cf      	b.n	800783a <_malloc_r+0x4a>
 800789a:	bf00      	nop
 800789c:	200000c8 	.word	0x200000c8
 80078a0:	200000cc 	.word	0x200000cc

080078a4 <_realloc_r>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	4607      	mov	r7, r0
 80078a8:	4614      	mov	r4, r2
 80078aa:	460e      	mov	r6, r1
 80078ac:	b921      	cbnz	r1, 80078b8 <_realloc_r+0x14>
 80078ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078b2:	4611      	mov	r1, r2
 80078b4:	f7ff bf9c 	b.w	80077f0 <_malloc_r>
 80078b8:	b922      	cbnz	r2, 80078c4 <_realloc_r+0x20>
 80078ba:	f7ff ff49 	bl	8007750 <_free_r>
 80078be:	4625      	mov	r5, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c4:	f000 f830 	bl	8007928 <_malloc_usable_size_r>
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d20f      	bcs.n	80078ec <_realloc_r+0x48>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4638      	mov	r0, r7
 80078d0:	f7ff ff8e 	bl	80077f0 <_malloc_r>
 80078d4:	4605      	mov	r5, r0
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d0f2      	beq.n	80078c0 <_realloc_r+0x1c>
 80078da:	4631      	mov	r1, r6
 80078dc:	4622      	mov	r2, r4
 80078de:	f7ff ff0f 	bl	8007700 <memcpy>
 80078e2:	4631      	mov	r1, r6
 80078e4:	4638      	mov	r0, r7
 80078e6:	f7ff ff33 	bl	8007750 <_free_r>
 80078ea:	e7e9      	b.n	80078c0 <_realloc_r+0x1c>
 80078ec:	4635      	mov	r5, r6
 80078ee:	e7e7      	b.n	80078c0 <_realloc_r+0x1c>

080078f0 <_sbrk_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	; (800790c <_sbrk_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7fa f852 	bl	80019a4 <_sbrk>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_sbrk_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_sbrk_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200002f0 	.word	0x200002f0

08007910 <__malloc_lock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_lock+0x8>)
 8007912:	f000 b811 	b.w	8007938 <__retarget_lock_acquire_recursive>
 8007916:	bf00      	nop
 8007918:	200002f8 	.word	0x200002f8

0800791c <__malloc_unlock>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__malloc_unlock+0x8>)
 800791e:	f000 b80c 	b.w	800793a <__retarget_lock_release_recursive>
 8007922:	bf00      	nop
 8007924:	200002f8 	.word	0x200002f8

08007928 <_malloc_usable_size_r>:
 8007928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792c:	1f18      	subs	r0, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfbc      	itt	lt
 8007932:	580b      	ldrlt	r3, [r1, r0]
 8007934:	18c0      	addlt	r0, r0, r3
 8007936:	4770      	bx	lr

08007938 <__retarget_lock_acquire_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_release_recursive>:
 800793a:	4770      	bx	lr

0800793c <_init>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr

08007948 <_fini>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr
